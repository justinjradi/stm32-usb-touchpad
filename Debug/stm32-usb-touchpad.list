
stm32-usb-touchpad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008078  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800823c  0800823c  0000923c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083b0  080083b0  0000a310  2**0
                  CONTENTS
  4 .ARM          00000008  080083b0  080083b0  000093b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083b8  080083b8  0000a310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083b8  080083b8  000093b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083bc  080083bc  000093bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000310  20000000  080083c0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab4  20000310  080086d0  0000a310  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dc4  080086d0  0000adc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a310  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cdc  00000000  00000000  0000a340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000333c  00000000  00000000  0001d01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00020358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cdf  00000000  00000000  00021450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000258dc  00000000  00000000  0002212f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001624a  00000000  00000000  00047a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dec82  00000000  00000000  0005dc55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c8d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a4  00000000  00000000  0013c91c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00140fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000310 	.word	0x20000310
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008224 	.word	0x08008224

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000314 	.word	0x20000314
 8000200:	08008224 	.word	0x08008224

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08e      	sub	sp, #56	@ 0x38
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fb3b 	bl	8000b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f8ad 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f98d 	bl	8000820 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000506:	f007 f94b 	bl	80077a0 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800050a:	f000 f913 	bl	8000734 <MX_ADC1_Init>
  MX_TIM10_Init();
 800050e:	f000 f963 	bl	80007d8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  tp_clear();
 8000512:	f007 f835 	bl	8007580 <tp_clear>
  HAL_TIM_Base_Start(&htim10);
 8000516:	484e      	ldr	r0, [pc, #312]	@ (8000650 <main+0x15c>)
 8000518:	f003 fcca 	bl	8003eb0 <HAL_TIM_Base_Start>
  int x0_i = 1847;
 800051c:	f240 7337 	movw	r3, #1847	@ 0x737
 8000520:	61fb      	str	r3, [r7, #28]
  int y0_i = 3947;
 8000522:	f640 736b 	movw	r3, #3947	@ 0xf6b
 8000526:	61bb      	str	r3, [r7, #24]
  int x1_i = 2247;
 8000528:	f640 03c7 	movw	r3, #2247	@ 0x8c7
 800052c:	617b      	str	r3, [r7, #20]
  int y1_i = 2047;
 800052e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000532:	613b      	str	r3, [r7, #16]
  int x0 = x0_i;
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	637b      	str	r3, [r7, #52]	@ 0x34
  int y0 = y0_i;
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	633b      	str	r3, [r7, #48]	@ 0x30
  int x1 = x1_i;
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int y1 = y1_i;
 8000540:	693b      	ldr	r3, [r7, #16]
 8000542:	62bb      	str	r3, [r7, #40]	@ 0x28
  int dx = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
  int dy = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	627b      	str	r3, [r7, #36]	@ 0x24

  int PANNING_DELAY = 1;
 800054c:	2301      	movs	r3, #1
 800054e:	60bb      	str	r3, [r7, #8]
  int t = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
  int contact_set = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	623b      	str	r3, [r7, #32]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

			if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8000558:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800055c:	483d      	ldr	r0, [pc, #244]	@ (8000654 <main+0x160>)
 800055e:	f001 f8b7 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d008      	beq.n	800057a <main+0x86>
			{
				HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2101      	movs	r1, #1
 800056c:	483a      	ldr	r0, [pc, #232]	@ (8000658 <main+0x164>)
 800056e:	f001 f8c7 	bl	8001700 <HAL_GPIO_WritePin>
				dy = -1;
 8000572:	f04f 33ff 	mov.w	r3, #4294967295
 8000576:	627b      	str	r3, [r7, #36]	@ 0x24
 8000578:	e017      	b.n	80005aa <main+0xb6>
			}
			else
			{
				HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2101      	movs	r1, #1
 800057e:	4836      	ldr	r0, [pc, #216]	@ (8000658 <main+0x164>)
 8000580:	f001 f8be 	bl	8001700 <HAL_GPIO_WritePin>
				dy = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	627b      	str	r3, [r7, #36]	@ 0x24
				tp_clear();
 8000588:	f006 fffa 	bl	8007580 <tp_clear>
				tp_send_touchpad_report(get_time_100us());
 800058c:	f000 f9b6 	bl	80008fc <get_time_100us>
 8000590:	4603      	mov	r3, r0
 8000592:	4618      	mov	r0, r3
 8000594:	f007 f870 	bl	8007678 <tp_send_touchpad_report>
				while (!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin));		// Wait until pressed again
 8000598:	bf00      	nop
 800059a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059e:	482d      	ldr	r0, [pc, #180]	@ (8000654 <main+0x160>)
 80005a0:	f001 f896 	bl	80016d0 <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f7      	beq.n	800059a <main+0xa6>
			}

			x0 += dx;
 80005aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4413      	add	r3, r2
 80005b0:	637b      	str	r3, [r7, #52]	@ 0x34
			y0 += dy;
 80005b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80005b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005b6:	4413      	add	r3, r2
 80005b8:	633b      	str	r3, [r7, #48]	@ 0x30
			x1 += dx;
 80005ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4413      	add	r3, r2
 80005c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			y1 += dy;
 80005c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80005c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005c6:	4413      	add	r3, r2
 80005c8:	62bb      	str	r3, [r7, #40]	@ 0x28
			if ((x0 < 0) || (y0 < 0) || (x1 < 0) || (y1 < 0) ||(x0 > TP_LOG_WIDTH) || (y0 > TP_LOG_HEIGHT) || (x1 > TP_LOG_WIDTH) || (y1 > TP_LOG_HEIGHT))
 80005ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db18      	blt.n	8000602 <main+0x10e>
 80005d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	db15      	blt.n	8000602 <main+0x10e>
 80005d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005d8:	2b00      	cmp	r3, #0
 80005da:	db12      	blt.n	8000602 <main+0x10e>
 80005dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db0f      	blt.n	8000602 <main+0x10e>
 80005e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80005e8:	da0b      	bge.n	8000602 <main+0x10e>
 80005ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80005f0:	da07      	bge.n	8000602 <main+0x10e>
 80005f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80005f8:	da03      	bge.n	8000602 <main+0x10e>
 80005fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000600:	db12      	blt.n	8000628 <main+0x134>
			{
				x0 = x0_i;
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	637b      	str	r3, [r7, #52]	@ 0x34
				y0 = y0_i;
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	633b      	str	r3, [r7, #48]	@ 0x30
				x1 = x1_i;
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	62fb      	str	r3, [r7, #44]	@ 0x2c
				y1 = y1_i;
 800060e:	693b      	ldr	r3, [r7, #16]
 8000610:	62bb      	str	r3, [r7, #40]	@ 0x28
				tp_reset_contact(0 + 2*contact_set);
 8000612:	6a3b      	ldr	r3, [r7, #32]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f007 f814 	bl	8007648 <tp_reset_contact>
//				tp_reset_contact(1 + 2*contact_set);
				contact_set ^= 1;
 8000620:	6a3b      	ldr	r3, [r7, #32]
 8000622:	f083 0301 	eor.w	r3, r3, #1
 8000626:	623b      	str	r3, [r7, #32]
			}
			tp_set_contact(0 + 2*contact_set, x0, y0);
 8000628:	6a3b      	ldr	r3, [r7, #32]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	b2db      	uxtb	r3, r3
 8000630:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000632:	b291      	uxth	r1, r2
 8000634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000636:	b292      	uxth	r2, r2
 8000638:	4618      	mov	r0, r3
 800063a:	f006 ffbf 	bl	80075bc <tp_set_contact>
//			tp_set_contact(1 + 2*contact_set, x1, y1);
			tp_send_touchpad_report(t);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	b29b      	uxth	r3, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f007 f818 	bl	8007678 <tp_send_touchpad_report>
			delay_100us(100);
 8000648:	2064      	movs	r0, #100	@ 0x64
 800064a:	f000 f96b 	bl	8000924 <delay_100us>
			if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 800064e:	e783      	b.n	8000558 <main+0x64>
 8000650:	20000374 	.word	0x20000374
 8000654:	40020800 	.word	0x40020800
 8000658:	40020400 	.word	0x40020400

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2234      	movs	r2, #52	@ 0x34
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f007 fdae 	bl	80081cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b29      	ldr	r3, [pc, #164]	@ (800072c <SystemClock_Config+0xd0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a28      	ldr	r2, [pc, #160]	@ (800072c <SystemClock_Config+0xd0>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b26      	ldr	r3, [pc, #152]	@ (800072c <SystemClock_Config+0xd0>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	4b23      	ldr	r3, [pc, #140]	@ (8000730 <SystemClock_Config+0xd4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a22      	ldr	r2, [pc, #136]	@ (8000730 <SystemClock_Config+0xd4>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b20      	ldr	r3, [pc, #128]	@ (8000730 <SystemClock_Config+0xd4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d0:	23a8      	movs	r3, #168	@ 0xa8
 80006d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d8:	2307      	movs	r3, #7
 80006da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 f8f5 	bl	80038d4 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006f0:	f000 f936 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000700:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000704:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2105      	movs	r1, #5
 8000712:	4618      	mov	r0, r3
 8000714:	f002 fa92 	bl	8002c3c <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800071e:	f000 f91f 	bl	8000960 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	@ 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000746:	4b21      	ldr	r3, [pc, #132]	@ (80007cc <MX_ADC1_Init+0x98>)
 8000748:	4a21      	ldr	r2, [pc, #132]	@ (80007d0 <MX_ADC1_Init+0x9c>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800074c:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <MX_ADC1_Init+0x98>)
 800074e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000752:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000754:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <MX_ADC1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <MX_ADC1_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000760:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <MX_ADC1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000766:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <MX_ADC1_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076e:	4b17      	ldr	r3, [pc, #92]	@ (80007cc <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000774:	4b15      	ldr	r3, [pc, #84]	@ (80007cc <MX_ADC1_Init+0x98>)
 8000776:	4a17      	ldr	r2, [pc, #92]	@ (80007d4 <MX_ADC1_Init+0xa0>)
 8000778:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077a:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_ADC1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <MX_ADC1_Init+0x98>)
 8000782:	2201      	movs	r2, #1
 8000784:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078e:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_ADC1_Init+0x98>)
 8000790:	2201      	movs	r2, #1
 8000792:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000794:	480d      	ldr	r0, [pc, #52]	@ (80007cc <MX_ADC1_Init+0x98>)
 8000796:	f000 fa83 	bl	8000ca0 <HAL_ADC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007a0:	f000 f8de 	bl	8000960 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	@ (80007cc <MX_ADC1_Init+0x98>)
 80007b6:	f000 fab7 	bl	8000d28 <HAL_ADC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007c0:	f000 f8ce 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000032c 	.word	0x2000032c
 80007d0:	40012000 	.word	0x40012000
 80007d4:	0f000001 	.word	0x0f000001

080007d8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_TIM10_Init+0x40>)
 80007de:	4a0f      	ldr	r2, [pc, #60]	@ (800081c <MX_TIM10_Init+0x44>)
 80007e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <MX_TIM10_Init+0x40>)
 80007e4:	22a7      	movs	r2, #167	@ 0xa7
 80007e6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <MX_TIM10_Init+0x40>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80007ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <MX_TIM10_Init+0x40>)
 80007f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007f4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MX_TIM10_Init+0x40>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_TIM10_Init+0x40>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_TIM10_Init+0x40>)
 8000804:	f003 fb04 	bl	8003e10 <HAL_TIM_Base_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800080e:	f000 f8a7 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000374 	.word	0x20000374
 800081c:	40014400 	.word	0x40014400

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b2d      	ldr	r3, [pc, #180]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a2c      	ldr	r2, [pc, #176]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b2a      	ldr	r3, [pc, #168]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b26      	ldr	r3, [pc, #152]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a25      	ldr	r2, [pc, #148]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b23      	ldr	r3, [pc, #140]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b1f      	ldr	r3, [pc, #124]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a1e      	ldr	r2, [pc, #120]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a17      	ldr	r2, [pc, #92]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2101      	movs	r1, #1
 80008aa:	4812      	ldr	r0, [pc, #72]	@ (80008f4 <MX_GPIO_Init+0xd4>)
 80008ac:	f000 ff28 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80008b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <MX_GPIO_Init+0xd8>)
 80008c8:	f000 fd6e 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80008cc:	2301      	movs	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MX_GPIO_Init+0xd4>)
 80008e4:	f000 fd60 	bl	80013a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	@ 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020400 	.word	0x40020400
 80008f8:	40020800 	.word	0x40020800

080008fc <get_time_100us>:

/* USER CODE BEGIN 4 */

uint16_t get_time_100us(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim10) / 100;
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <get_time_100us+0x20>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000906:	4a06      	ldr	r2, [pc, #24]	@ (8000920 <get_time_100us+0x24>)
 8000908:	fba2 2303 	umull	r2, r3, r2, r3
 800090c:	095b      	lsrs	r3, r3, #5
 800090e:	b29b      	uxth	r3, r3
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000374 	.word	0x20000374
 8000920:	51eb851f 	.word	0x51eb851f

08000924 <delay_100us>:

// 655 max
void delay_100us(uint16_t delay)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
	int t_0 = __HAL_TIM_GET_COUNTER(&htim10);
 800092e:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <delay_100us+0x38>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000934:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim10) - t_0 < delay * 100);
 8000936:	bf00      	nop
 8000938:	4b08      	ldr	r3, [pc, #32]	@ (800095c <delay_100us+0x38>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	88fa      	ldrh	r2, [r7, #6]
 8000944:	2164      	movs	r1, #100	@ 0x64
 8000946:	fb01 f202 	mul.w	r2, r1, r2
 800094a:	4293      	cmp	r3, r2
 800094c:	d3f4      	bcc.n	8000938 <delay_100us+0x14>
}
 800094e:	bf00      	nop
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	20000374 	.word	0x20000374

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <Error_Handler+0x8>

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	4a0f      	ldr	r2, [pc, #60]	@ (80009b8 <HAL_MspInit+0x4c>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000980:	6453      	str	r3, [r2, #68]	@ 0x44
 8000982:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	4a08      	ldr	r2, [pc, #32]	@ (80009b8 <HAL_MspInit+0x4c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099c:	6413      	str	r3, [r2, #64]	@ 0x40
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a17      	ldr	r2, [pc, #92]	@ (8000a38 <HAL_ADC_MspInit+0x7c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d127      	bne.n	8000a2e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <HAL_ADC_MspInit+0x80>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e6:	4a15      	ldr	r2, [pc, #84]	@ (8000a3c <HAL_ADC_MspInit+0x80>)
 80009e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ee:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <HAL_ADC_MspInit+0x80>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <HAL_ADC_MspInit+0x80>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a0e      	ldr	r2, [pc, #56]	@ (8000a3c <HAL_ADC_MspInit+0x80>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <HAL_ADC_MspInit+0x80>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a16:	2303      	movs	r3, #3
 8000a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <HAL_ADC_MspInit+0x84>)
 8000a2a:	f000 fcbd 	bl	80013a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a2e:	bf00      	nop
 8000a30:	3728      	adds	r7, #40	@ 0x28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40012000 	.word	0x40012000
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020000 	.word	0x40020000

08000a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0b      	ldr	r2, [pc, #44]	@ (8000a80 <HAL_TIM_Base_MspInit+0x3c>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d10d      	bne.n	8000a72 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <HAL_TIM_Base_MspInit+0x40>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5e:	4a09      	ldr	r2, [pc, #36]	@ (8000a84 <HAL_TIM_Base_MspInit+0x40>)
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a66:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <HAL_TIM_Base_MspInit+0x40>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40014400 	.word	0x40014400
 8000a84:	40023800 	.word	0x40023800

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <NMI_Handler+0x4>

08000a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <MemManage_Handler+0x4>

08000aa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <UsageFault_Handler+0x4>

08000ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ade:	f000 f89b 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000aec:	4802      	ldr	r0, [pc, #8]	@ (8000af8 <OTG_FS_IRQHandler+0x10>)
 8000aee:	f000 ff6b 	bl	80019c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200008c4 	.word	0x200008c4

08000afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <SystemInit+0x20>)
 8000b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b06:	4a05      	ldr	r2, [pc, #20]	@ (8000b1c <SystemInit+0x20>)
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b24:	f7ff ffea 	bl	8000afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b28:	480c      	ldr	r0, [pc, #48]	@ (8000b5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b2a:	490d      	ldr	r1, [pc, #52]	@ (8000b60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b40:	4c0a      	ldr	r4, [pc, #40]	@ (8000b6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f007 fb45 	bl	80081dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b52:	f7ff fccf 	bl	80004f4 <main>
  bx  lr    
 8000b56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b60:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 8000b64:	080083c0 	.word	0x080083c0
  ldr r2, =_sbss
 8000b68:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 8000b6c:	20000dc4 	.word	0x20000dc4

08000b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC_IRQHandler>
	...

08000b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b78:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb4 <HAL_Init+0x40>)
 8000b7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b84:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <HAL_Init+0x40>)
 8000b8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b90:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a07      	ldr	r2, [pc, #28]	@ (8000bb4 <HAL_Init+0x40>)
 8000b96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 fbc1 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f000 f808 	bl	8000bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba8:	f7ff fee0 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023c00 	.word	0x40023c00

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <HAL_InitTick+0x54>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <HAL_InitTick+0x58>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fbd9 	bl	800138e <HAL_SYSTICK_Config>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00e      	b.n	8000c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d80a      	bhi.n	8000c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f000 fba1 	bl	800133a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf8:	4a06      	ldr	r2, [pc, #24]	@ (8000c14 <HAL_InitTick+0x5c>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000004 	.word	0x20000004

08000c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_IncTick+0x20>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_IncTick+0x24>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a04      	ldr	r2, [pc, #16]	@ (8000c3c <HAL_IncTick+0x24>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	200003bc 	.word	0x200003bc

08000c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b03      	ldr	r3, [pc, #12]	@ (8000c54 <HAL_GetTick+0x14>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	200003bc 	.word	0x200003bc

08000c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c60:	f7ff ffee 	bl	8000c40 <HAL_GetTick>
 8000c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c70:	d005      	beq.n	8000c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c72:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <HAL_Delay+0x44>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c7e:	bf00      	nop
 8000c80:	f7ff ffde 	bl	8000c40 <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d8f7      	bhi.n	8000c80 <HAL_Delay+0x28>
  {
  }
}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000008 	.word	0x20000008

08000ca0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e033      	b.n	8000d1e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d109      	bne.n	8000cd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff fe7c 	bl	80009bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	f003 0310 	and.w	r3, r3, #16
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d118      	bne.n	8000d10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ce6:	f023 0302 	bic.w	r3, r3, #2
 8000cea:	f043 0202 	orr.w	r2, r3, #2
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f000 f94a 	bl	8000f8c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	f023 0303 	bic.w	r3, r3, #3
 8000d06:	f043 0201 	orr.w	r2, r3, #1
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d0e:	e001      	b.n	8000d14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d101      	bne.n	8000d44 <HAL_ADC_ConfigChannel+0x1c>
 8000d40:	2302      	movs	r3, #2
 8000d42:	e113      	b.n	8000f6c <HAL_ADC_ConfigChannel+0x244>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b09      	cmp	r3, #9
 8000d52:	d925      	bls.n	8000da0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	68d9      	ldr	r1, [r3, #12]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	4613      	mov	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	4413      	add	r3, r2
 8000d68:	3b1e      	subs	r3, #30
 8000d6a:	2207      	movs	r2, #7
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43da      	mvns	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	400a      	ands	r2, r1
 8000d78:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	68d9      	ldr	r1, [r3, #12]
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4403      	add	r3, r0
 8000d92:	3b1e      	subs	r3, #30
 8000d94:	409a      	lsls	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	e022      	b.n	8000de6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6919      	ldr	r1, [r3, #16]
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	461a      	mov	r2, r3
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	2207      	movs	r2, #7
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	400a      	ands	r2, r1
 8000dc2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6919      	ldr	r1, [r3, #16]
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4403      	add	r3, r0
 8000ddc:	409a      	lsls	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d824      	bhi.n	8000e38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3b05      	subs	r3, #5
 8000e00:	221f      	movs	r2, #31
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	400a      	ands	r2, r1
 8000e0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	3b05      	subs	r3, #5
 8000e2a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e36:	e04c      	b.n	8000ed2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b0c      	cmp	r3, #12
 8000e3e:	d824      	bhi.n	8000e8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	3b23      	subs	r3, #35	@ 0x23
 8000e52:	221f      	movs	r2, #31
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43da      	mvns	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	400a      	ands	r2, r1
 8000e60:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	3b23      	subs	r3, #35	@ 0x23
 8000e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	430a      	orrs	r2, r1
 8000e86:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e88:	e023      	b.n	8000ed2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	4613      	mov	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	3b41      	subs	r3, #65	@ 0x41
 8000e9c:	221f      	movs	r2, #31
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	400a      	ands	r2, r1
 8000eaa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	3b41      	subs	r3, #65	@ 0x41
 8000ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ed2:	4b29      	ldr	r3, [pc, #164]	@ (8000f78 <HAL_ADC_ConfigChannel+0x250>)
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a28      	ldr	r2, [pc, #160]	@ (8000f7c <HAL_ADC_ConfigChannel+0x254>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d10f      	bne.n	8000f00 <HAL_ADC_ConfigChannel+0x1d8>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b12      	cmp	r3, #18
 8000ee6:	d10b      	bne.n	8000f00 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a1d      	ldr	r2, [pc, #116]	@ (8000f7c <HAL_ADC_ConfigChannel+0x254>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d12b      	bne.n	8000f62 <HAL_ADC_ConfigChannel+0x23a>
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f80 <HAL_ADC_ConfigChannel+0x258>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d003      	beq.n	8000f1c <HAL_ADC_ConfigChannel+0x1f4>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b11      	cmp	r3, #17
 8000f1a:	d122      	bne.n	8000f62 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a11      	ldr	r2, [pc, #68]	@ (8000f80 <HAL_ADC_ConfigChannel+0x258>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d111      	bne.n	8000f62 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f3e:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <HAL_ADC_ConfigChannel+0x25c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a11      	ldr	r2, [pc, #68]	@ (8000f88 <HAL_ADC_ConfigChannel+0x260>)
 8000f44:	fba2 2303 	umull	r2, r3, r2, r3
 8000f48:	0c9a      	lsrs	r2, r3, #18
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000f54:	e002      	b.n	8000f5c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f9      	bne.n	8000f56 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	40012300 	.word	0x40012300
 8000f7c:	40012000 	.word	0x40012000
 8000f80:	10000012 	.word	0x10000012
 8000f84:	20000000 	.word	0x20000000
 8000f88:	431bde83 	.word	0x431bde83

08000f8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f94:	4b79      	ldr	r3, [pc, #484]	@ (800117c <ADC_Init+0x1f0>)
 8000f96:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6859      	ldr	r1, [r3, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	021a      	lsls	r2, r3, #8
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000fe4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001006:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6899      	ldr	r1, [r3, #8]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	430a      	orrs	r2, r1
 8001018:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800101e:	4a58      	ldr	r2, [pc, #352]	@ (8001180 <ADC_Init+0x1f4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d022      	beq.n	800106a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001032:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6899      	ldr	r1, [r3, #8]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	430a      	orrs	r2, r1
 8001044:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001054:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6899      	ldr	r1, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	430a      	orrs	r2, r1
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	e00f      	b.n	800108a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001078:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001088:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0202 	bic.w	r2, r2, #2
 8001098:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6899      	ldr	r1, [r3, #8]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7e1b      	ldrb	r3, [r3, #24]
 80010a4:	005a      	lsls	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	430a      	orrs	r2, r1
 80010ac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d01b      	beq.n	80010f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80010c6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80010d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6859      	ldr	r1, [r3, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e2:	3b01      	subs	r3, #1
 80010e4:	035a      	lsls	r2, r3, #13
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	e007      	b.n	8001100 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010fe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800110e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	3b01      	subs	r3, #1
 800111c:	051a      	lsls	r2, r3, #20
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	430a      	orrs	r2, r1
 8001124:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001134:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6899      	ldr	r1, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001142:	025a      	lsls	r2, r3, #9
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	430a      	orrs	r2, r1
 800114a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800115a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6899      	ldr	r1, [r3, #8]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	029a      	lsls	r2, r3, #10
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	430a      	orrs	r2, r1
 800116e:	609a      	str	r2, [r3, #8]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40012300 	.word	0x40012300
 8001180:	0f000001 	.word	0x0f000001

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	@ (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	@ (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	@ (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	@ 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	@ 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff29 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff3e 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff8e 	bl	8001278 <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5d 	bl	8001224 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff31 	bl	80011e8 <__NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffa2 	bl	80012e0 <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	@ 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
 80013c2:	e165      	b.n	8001690 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013c4:	2201      	movs	r2, #1
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	429a      	cmp	r2, r3
 80013de:	f040 8154 	bne.w	800168a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d005      	beq.n	80013fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d130      	bne.n	800145c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	2203      	movs	r2, #3
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001430:	2201      	movs	r2, #1
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	091b      	lsrs	r3, r3, #4
 8001446:	f003 0201 	and.w	r2, r3, #1
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b03      	cmp	r3, #3
 8001466:	d017      	beq.n	8001498 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d123      	bne.n	80014ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	08da      	lsrs	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3208      	adds	r2, #8
 80014ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	220f      	movs	r2, #15
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	691a      	ldr	r2, [r3, #16]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	08da      	lsrs	r2, r3, #3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3208      	adds	r2, #8
 80014e6:	69b9      	ldr	r1, [r7, #24]
 80014e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2203      	movs	r2, #3
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0203 	and.w	r2, r3, #3
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80ae 	beq.w	800168a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b5d      	ldr	r3, [pc, #372]	@ (80016a8 <HAL_GPIO_Init+0x300>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001536:	4a5c      	ldr	r2, [pc, #368]	@ (80016a8 <HAL_GPIO_Init+0x300>)
 8001538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800153c:	6453      	str	r3, [r2, #68]	@ 0x44
 800153e:	4b5a      	ldr	r3, [pc, #360]	@ (80016a8 <HAL_GPIO_Init+0x300>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800154a:	4a58      	ldr	r2, [pc, #352]	@ (80016ac <HAL_GPIO_Init+0x304>)
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	220f      	movs	r2, #15
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4f      	ldr	r2, [pc, #316]	@ (80016b0 <HAL_GPIO_Init+0x308>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d025      	beq.n	80015c2 <HAL_GPIO_Init+0x21a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4e      	ldr	r2, [pc, #312]	@ (80016b4 <HAL_GPIO_Init+0x30c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d01f      	beq.n	80015be <HAL_GPIO_Init+0x216>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4d      	ldr	r2, [pc, #308]	@ (80016b8 <HAL_GPIO_Init+0x310>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d019      	beq.n	80015ba <HAL_GPIO_Init+0x212>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4c      	ldr	r2, [pc, #304]	@ (80016bc <HAL_GPIO_Init+0x314>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0x20e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4b      	ldr	r2, [pc, #300]	@ (80016c0 <HAL_GPIO_Init+0x318>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d00d      	beq.n	80015b2 <HAL_GPIO_Init+0x20a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4a      	ldr	r2, [pc, #296]	@ (80016c4 <HAL_GPIO_Init+0x31c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d007      	beq.n	80015ae <HAL_GPIO_Init+0x206>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a49      	ldr	r2, [pc, #292]	@ (80016c8 <HAL_GPIO_Init+0x320>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d101      	bne.n	80015aa <HAL_GPIO_Init+0x202>
 80015a6:	2306      	movs	r3, #6
 80015a8:	e00c      	b.n	80015c4 <HAL_GPIO_Init+0x21c>
 80015aa:	2307      	movs	r3, #7
 80015ac:	e00a      	b.n	80015c4 <HAL_GPIO_Init+0x21c>
 80015ae:	2305      	movs	r3, #5
 80015b0:	e008      	b.n	80015c4 <HAL_GPIO_Init+0x21c>
 80015b2:	2304      	movs	r3, #4
 80015b4:	e006      	b.n	80015c4 <HAL_GPIO_Init+0x21c>
 80015b6:	2303      	movs	r3, #3
 80015b8:	e004      	b.n	80015c4 <HAL_GPIO_Init+0x21c>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e002      	b.n	80015c4 <HAL_GPIO_Init+0x21c>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <HAL_GPIO_Init+0x21c>
 80015c2:	2300      	movs	r3, #0
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	f002 0203 	and.w	r2, r2, #3
 80015ca:	0092      	lsls	r2, r2, #2
 80015cc:	4093      	lsls	r3, r2
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d4:	4935      	ldr	r1, [pc, #212]	@ (80016ac <HAL_GPIO_Init+0x304>)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	089b      	lsrs	r3, r3, #2
 80015da:	3302      	adds	r3, #2
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015e2:	4b3a      	ldr	r3, [pc, #232]	@ (80016cc <HAL_GPIO_Init+0x324>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001606:	4a31      	ldr	r2, [pc, #196]	@ (80016cc <HAL_GPIO_Init+0x324>)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800160c:	4b2f      	ldr	r3, [pc, #188]	@ (80016cc <HAL_GPIO_Init+0x324>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001630:	4a26      	ldr	r2, [pc, #152]	@ (80016cc <HAL_GPIO_Init+0x324>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001636:	4b25      	ldr	r3, [pc, #148]	@ (80016cc <HAL_GPIO_Init+0x324>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800165a:	4a1c      	ldr	r2, [pc, #112]	@ (80016cc <HAL_GPIO_Init+0x324>)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001660:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <HAL_GPIO_Init+0x324>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001684:	4a11      	ldr	r2, [pc, #68]	@ (80016cc <HAL_GPIO_Init+0x324>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3301      	adds	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	2b0f      	cmp	r3, #15
 8001694:	f67f ae96 	bls.w	80013c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3724      	adds	r7, #36	@ 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40013800 	.word	0x40013800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020400 	.word	0x40020400
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40020c00 	.word	0x40020c00
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40021400 	.word	0x40021400
 80016c8:	40021800 	.word	0x40021800
 80016cc:	40013c00 	.word	0x40013c00

080016d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	887b      	ldrh	r3, [r7, #2]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e001      	b.n	80016f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
 800170c:	4613      	mov	r3, r2
 800170e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001710:	787b      	ldrb	r3, [r7, #1]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800171c:	e003      	b.n	8001726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800171e:	887b      	ldrh	r3, [r7, #2]
 8001720:	041a      	lsls	r2, r3, #16
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	619a      	str	r2, [r3, #24]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af02      	add	r7, sp, #8
 8001738:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e108      	b.n	8001956 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d106      	bne.n	8001764 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f006 f9ce 	bl	8007b00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2203      	movs	r2, #3
 8001768:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001772:	d102      	bne.n	800177a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f002 fdc1 	bl	8004306 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7c1a      	ldrb	r2, [r3, #16]
 800178c:	f88d 2000 	strb.w	r2, [sp]
 8001790:	3304      	adds	r3, #4
 8001792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001794:	f002 fca0 	bl	80040d8 <USB_CoreInit>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2202      	movs	r2, #2
 80017a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0d5      	b.n	8001956 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 fdb9 	bl	8004328 <USB_SetCurrentMode>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2202      	movs	r2, #2
 80017c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0c6      	b.n	8001956 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e04a      	b.n	8001864 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	3315      	adds	r3, #21
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	3314      	adds	r3, #20
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	b298      	uxth	r0, r3
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	332e      	adds	r3, #46	@ 0x2e
 800180a:	4602      	mov	r2, r0
 800180c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	3318      	adds	r3, #24
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	331c      	adds	r3, #28
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001836:	7bfa      	ldrb	r2, [r7, #15]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	3320      	adds	r3, #32
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	3324      	adds	r3, #36	@ 0x24
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	3301      	adds	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	791b      	ldrb	r3, [r3, #4]
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	429a      	cmp	r2, r3
 800186c:	d3af      	bcc.n	80017ce <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800186e:	2300      	movs	r3, #0
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	e044      	b.n	80018fe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4413      	add	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	3301      	adds	r3, #1
 80018fc:	73fb      	strb	r3, [r7, #15]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	791b      	ldrb	r3, [r3, #4]
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	429a      	cmp	r2, r3
 8001906:	d3b5      	bcc.n	8001874 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7c1a      	ldrb	r2, [r3, #16]
 8001910:	f88d 2000 	strb.w	r2, [sp]
 8001914:	3304      	adds	r3, #4
 8001916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001918:	f002 fd52 	bl	80043c0 <USB_DevInit>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2202      	movs	r2, #2
 8001926:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e013      	b.n	8001956 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7b1b      	ldrb	r3, [r3, #12]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d102      	bne.n	800194a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f001 f955 	bl	8002bf4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f003 fd89 	bl	8005466 <USB_DevDisconnect>

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_PCD_Start+0x1c>
 8001976:	2302      	movs	r3, #2
 8001978:	e022      	b.n	80019c0 <HAL_PCD_Start+0x62>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800198a:	2b00      	cmp	r3, #0
 800198c:	d009      	beq.n	80019a2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001992:	2b01      	cmp	r3, #1
 8001994:	d105      	bne.n	80019a2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800199a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 fc9c 	bl	80042e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 fd37 	bl	8005424 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b08d      	sub	sp, #52	@ 0x34
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 fdf5 	bl	80055ce <USB_GetMode>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f040 84b9 	bne.w	800235e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f003 fd59 	bl	80054a8 <USB_ReadInterrupts>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 84af 	beq.w	800235c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 fd46 	bl	80054a8 <USB_ReadInterrupts>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d107      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695a      	ldr	r2, [r3, #20]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f002 0202 	and.w	r2, r2, #2
 8001a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 fd34 	bl	80054a8 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d161      	bne.n	8001b0e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699a      	ldr	r2, [r3, #24]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0210 	bic.w	r2, r2, #16
 8001a58:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f003 020f 	and.w	r2, r3, #15
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	3304      	adds	r3, #4
 8001a78:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	0c5b      	lsrs	r3, r3, #17
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d124      	bne.n	8001ad0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d035      	beq.n	8001afe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	6a38      	ldr	r0, [r7, #32]
 8001aa6:	f003 fb6b 	bl	8005180 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ab6:	441a      	add	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ac8:	441a      	add	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	615a      	str	r2, [r3, #20]
 8001ace:	e016      	b.n	8001afe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	0c5b      	lsrs	r3, r3, #17
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	2b06      	cmp	r3, #6
 8001ada:	d110      	bne.n	8001afe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	6a38      	ldr	r0, [r7, #32]
 8001ae8:	f003 fb4a 	bl	8005180 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	091b      	lsrs	r3, r3, #4
 8001af4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001af8:	441a      	add	r2, r3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699a      	ldr	r2, [r3, #24]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 0210 	orr.w	r2, r2, #16
 8001b0c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 fcc8 	bl	80054a8 <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b1e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001b22:	f040 80a7 	bne.w	8001c74 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 fccd 	bl	80054ce <USB_ReadDevAllOutEpInterrupt>
 8001b34:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001b36:	e099      	b.n	8001c6c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 808e 	beq.w	8001c60 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fcf1 	bl	8005536 <USB_ReadDevOutEPInterrupt>
 8001b54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00c      	beq.n	8001b7a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	015a      	lsls	r2, r3, #5
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	4413      	add	r3, r2
 8001b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2301      	movs	r3, #1
 8001b70:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 feb7 	bl	80028e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00c      	beq.n	8001b9e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b90:	461a      	mov	r2, r3
 8001b92:	2308      	movs	r3, #8
 8001b94:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 ff8d 	bl	8002ab8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	015a      	lsls	r2, r3, #5
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	4413      	add	r3, r2
 8001bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	2310      	movs	r3, #16
 8001bb8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d030      	beq.n	8001c26 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bcc:	2b80      	cmp	r3, #128	@ 0x80
 8001bce:	d109      	bne.n	8001be4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001be2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001be6:	4613      	mov	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4413      	add	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	78db      	ldrb	r3, [r3, #3]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d108      	bne.n	8001c14 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2200      	movs	r2, #0
 8001c06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f006 f892 	bl	8007d38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	015a      	lsls	r2, r3, #5
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c20:	461a      	mov	r2, r3
 8001c22:	2302      	movs	r3, #2
 8001c24:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	015a      	lsls	r2, r3, #5
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	2320      	movs	r3, #32
 8001c40:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d009      	beq.n	8001c60 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4e:	015a      	lsls	r2, r3, #5
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	4413      	add	r3, r2
 8001c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c58:	461a      	mov	r2, r3
 8001c5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c5e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	3301      	adds	r3, #1
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c68:	085b      	lsrs	r3, r3, #1
 8001c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f47f af62 	bne.w	8001b38 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f003 fc15 	bl	80054a8 <USB_ReadInterrupts>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001c88:	f040 80db 	bne.w	8001e42 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 fc36 	bl	8005502 <USB_ReadDevAllInEpInterrupt>
 8001c96:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001c9c:	e0cd      	b.n	8001e3a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80c2 	beq.w	8001e2e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f003 fc5c 	bl	8005572 <USB_ReadDevInEPInterrupt>
 8001cba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d057      	beq.n	8001d76 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	2201      	movs	r2, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69f9      	ldr	r1, [r7, #28]
 8001ce2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	799b      	ldrb	r3, [r3, #6]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d132      	bne.n	8001d6a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	3320      	adds	r3, #32
 8001d14:	6819      	ldr	r1, [r3, #0]
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4403      	add	r3, r0
 8001d24:	331c      	adds	r3, #28
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4419      	add	r1, r3
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4403      	add	r3, r0
 8001d38:	3320      	adds	r3, #32
 8001d3a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d113      	bne.n	8001d6a <HAL_PCD_IRQHandler+0x3a2>
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	440b      	add	r3, r1
 8001d50:	3324      	adds	r3, #36	@ 0x24
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d108      	bne.n	8001d6a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d62:	461a      	mov	r2, r3
 8001d64:	2101      	movs	r1, #1
 8001d66:	f003 fc63 	bl	8005630 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	4619      	mov	r1, r3
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f005 ff5c 	bl	8007c2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2308      	movs	r3, #8
 8001d90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	015a      	lsls	r2, r3, #5
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001da8:	461a      	mov	r2, r3
 8001daa:	2310      	movs	r3, #16
 8001dac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d008      	beq.n	8001dca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2340      	movs	r3, #64	@ 0x40
 8001dc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d023      	beq.n	8001e1c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001dd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dd6:	6a38      	ldr	r0, [r7, #32]
 8001dd8:	f002 fc50 	bl	800467c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dde:	4613      	mov	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4413      	add	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	3310      	adds	r3, #16
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	3304      	adds	r3, #4
 8001dee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	78db      	ldrb	r3, [r3, #3]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d108      	bne.n	8001e0a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	4619      	mov	r1, r3
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f005 ffa9 	bl	8007d5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	015a      	lsls	r2, r3, #5
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e16:	461a      	mov	r2, r3
 8001e18:	2302      	movs	r3, #2
 8001e1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 fcd0 	bl	80027ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	3301      	adds	r3, #1
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e36:	085b      	lsrs	r3, r3, #1
 8001e38:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f47f af2e 	bne.w	8001c9e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f003 fb2e 	bl	80054a8 <USB_ReadInterrupts>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001e52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e56:	d122      	bne.n	8001e9e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e66:	f023 0301 	bic.w	r3, r3, #1
 8001e6a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d108      	bne.n	8001e88 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e7e:	2100      	movs	r1, #0
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f006 f911 	bl	80080a8 <HAL_PCDEx_LPM_Callback>
 8001e86:	e002      	b.n	8001e8e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f005 ff47 	bl	8007d1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001e9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 fb00 	bl	80054a8 <USB_ReadInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001eb2:	d112      	bne.n	8001eda <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d102      	bne.n	8001eca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f005 ff03 	bl	8007cd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695a      	ldr	r2, [r3, #20]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001ed8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f003 fae2 	bl	80054a8 <USB_ReadInterrupts>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001eea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001eee:	d121      	bne.n	8001f34 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	695a      	ldr	r2, [r3, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001efe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d111      	bne.n	8001f2e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	f003 020f 	and.w	r2, r3, #15
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f24:	2101      	movs	r1, #1
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f006 f8be 	bl	80080a8 <HAL_PCDEx_LPM_Callback>
 8001f2c:	e002      	b.n	8001f34 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f005 fece 	bl	8007cd0 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f003 fab5 	bl	80054a8 <USB_ReadInterrupts>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f48:	f040 80b7 	bne.w	80020ba <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	69fa      	ldr	r2, [r7, #28]
 8001f56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2110      	movs	r1, #16
 8001f66:	4618      	mov	r0, r3
 8001f68:	f002 fb88 	bl	800467c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f70:	e046      	b.n	8002000 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001f84:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f96:	0151      	lsls	r1, r2, #5
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	440a      	add	r2, r1
 8001f9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001fa0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001fa4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001fb8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fca:	0151      	lsls	r1, r2, #5
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	440a      	add	r2, r1
 8001fd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001fd4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001fd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fea:	0151      	lsls	r1, r2, #5
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	440a      	add	r2, r1
 8001ff0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001ff4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ff8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	791b      	ldrb	r3, [r3, #4]
 8002004:	461a      	mov	r2, r3
 8002006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002008:	4293      	cmp	r3, r2
 800200a:	d3b2      	bcc.n	8001f72 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800201a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800201e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7bdb      	ldrb	r3, [r3, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d016      	beq.n	8002056 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800202e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002038:	f043 030b 	orr.w	r3, r3, #11
 800203c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800204e:	f043 030b 	orr.w	r3, r3, #11
 8002052:	6453      	str	r3, [r2, #68]	@ 0x44
 8002054:	e015      	b.n	8002082 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002064:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002068:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800206c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800207c:	f043 030b 	orr.w	r3, r3, #11
 8002080:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002090:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002094:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020a4:	461a      	mov	r2, r3
 80020a6:	f003 fac3 	bl	8005630 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695a      	ldr	r2, [r3, #20]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80020b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 f9f2 	bl	80054a8 <USB_ReadInterrupts>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020ce:	d123      	bne.n	8002118 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 fa88 	bl	80055ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f002 fb45 	bl	800476e <USB_GetDevSpeed>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681c      	ldr	r4, [r3, #0]
 80020f0:	f000 fe8a 	bl	8002e08 <HAL_RCC_GetHCLKFreq>
 80020f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020fa:	461a      	mov	r2, r3
 80020fc:	4620      	mov	r0, r4
 80020fe:	f002 f84f 	bl	80041a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f005 fdbb 	bl	8007c7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002116:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f003 f9c3 	bl	80054a8 <USB_ReadInterrupts>
 8002122:	4603      	mov	r3, r0
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b08      	cmp	r3, #8
 800212a:	d10a      	bne.n	8002142 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f005 fd98 	bl	8007c62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f002 0208 	and.w	r2, r2, #8
 8002140:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f003 f9ae 	bl	80054a8 <USB_ReadInterrupts>
 800214c:	4603      	mov	r3, r0
 800214e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002152:	2b80      	cmp	r3, #128	@ 0x80
 8002154:	d123      	bne.n	800219e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002162:	2301      	movs	r3, #1
 8002164:	627b      	str	r3, [r7, #36]	@ 0x24
 8002166:	e014      	b.n	8002192 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d105      	bne.n	800218c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	b2db      	uxtb	r3, r3
 8002184:	4619      	mov	r1, r3
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 faf0 	bl	800276c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218e:	3301      	adds	r3, #1
 8002190:	627b      	str	r3, [r7, #36]	@ 0x24
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	791b      	ldrb	r3, [r3, #4]
 8002196:	461a      	mov	r2, r3
 8002198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219a:	4293      	cmp	r3, r2
 800219c:	d3e4      	bcc.n	8002168 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 f980 	bl	80054a8 <USB_ReadInterrupts>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021b2:	d13c      	bne.n	800222e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021b4:	2301      	movs	r3, #1
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b8:	e02b      	b.n	8002212 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	3318      	adds	r3, #24
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d115      	bne.n	800220c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80021e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	da12      	bge.n	800220c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	3317      	adds	r3, #23
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002202:	b2db      	uxtb	r3, r3
 8002204:	4619      	mov	r1, r3
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fab0 	bl	800276c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	3301      	adds	r3, #1
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	791b      	ldrb	r3, [r3, #4]
 8002216:	461a      	mov	r2, r3
 8002218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221a:	4293      	cmp	r3, r2
 800221c:	d3cd      	bcc.n	80021ba <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800222c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f003 f938 	bl	80054a8 <USB_ReadInterrupts>
 8002238:	4603      	mov	r3, r0
 800223a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800223e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002242:	d156      	bne.n	80022f2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002244:	2301      	movs	r3, #1
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24
 8002248:	e045      	b.n	80022d6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d12e      	bne.n	80022d0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002272:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002274:	2b00      	cmp	r3, #0
 8002276:	da2b      	bge.n	80022d0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002284:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002288:	429a      	cmp	r2, r3
 800228a:	d121      	bne.n	80022d0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10a      	bne.n	80022d0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022cc:	6053      	str	r3, [r2, #4]
            break;
 80022ce:	e008      	b.n	80022e2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	3301      	adds	r3, #1
 80022d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	791b      	ldrb	r3, [r3, #4]
 80022da:	461a      	mov	r2, r3
 80022dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022de:	4293      	cmp	r3, r2
 80022e0:	d3b3      	bcc.n	800224a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80022f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 f8d6 	bl	80054a8 <USB_ReadInterrupts>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002306:	d10a      	bne.n	800231e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f005 fd39 	bl	8007d80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695a      	ldr	r2, [r3, #20]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800231c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f003 f8c0 	bl	80054a8 <USB_ReadInterrupts>
 8002328:	4603      	mov	r3, r0
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b04      	cmp	r3, #4
 8002330:	d115      	bne.n	800235e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f005 fd29 	bl	8007d9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	430a      	orrs	r2, r1
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	e000      	b.n	800235e <HAL_PCD_IRQHandler+0x996>
      return;
 800235c:	bf00      	nop
    }
  }
}
 800235e:	3734      	adds	r7, #52	@ 0x34
 8002360:	46bd      	mov	sp, r7
 8002362:	bd90      	pop	{r4, r7, pc}

08002364 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_PCD_SetAddress+0x1a>
 800237a:	2302      	movs	r3, #2
 800237c:	e012      	b.n	80023a4 <HAL_PCD_SetAddress+0x40>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f003 f81f 	bl	80053d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	4608      	mov	r0, r1
 80023b6:	4611      	mov	r1, r2
 80023b8:	461a      	mov	r2, r3
 80023ba:	4603      	mov	r3, r0
 80023bc:	70fb      	strb	r3, [r7, #3]
 80023be:	460b      	mov	r3, r1
 80023c0:	803b      	strh	r3, [r7, #0]
 80023c2:	4613      	mov	r3, r2
 80023c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	da0f      	bge.n	80023f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	f003 020f 	and.w	r2, r3, #15
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	3310      	adds	r3, #16
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	3304      	adds	r3, #4
 80023e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2201      	movs	r2, #1
 80023ee:	705a      	strb	r2, [r3, #1]
 80023f0:	e00f      	b.n	8002412 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	f003 020f 	and.w	r2, r3, #15
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4413      	add	r3, r2
 8002408:	3304      	adds	r3, #4
 800240a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	b2da      	uxtb	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800241e:	883a      	ldrh	r2, [r7, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	78ba      	ldrb	r2, [r7, #2]
 8002428:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	785b      	ldrb	r3, [r3, #1]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d004      	beq.n	800243c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800243c:	78bb      	ldrb	r3, [r7, #2]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d102      	bne.n	8002448 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_PCD_EP_Open+0xaa>
 8002452:	2302      	movs	r3, #2
 8002454:	e00e      	b.n	8002474 <HAL_PCD_EP_Open+0xc8>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68f9      	ldr	r1, [r7, #12]
 8002464:	4618      	mov	r0, r3
 8002466:	f002 f9a7 	bl	80047b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002472:	7afb      	ldrb	r3, [r7, #11]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800248c:	2b00      	cmp	r3, #0
 800248e:	da0f      	bge.n	80024b0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	f003 020f 	and.w	r2, r3, #15
 8002496:	4613      	mov	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	3310      	adds	r3, #16
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	4413      	add	r3, r2
 80024a4:	3304      	adds	r3, #4
 80024a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	705a      	strb	r2, [r3, #1]
 80024ae:	e00f      	b.n	80024d0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	f003 020f 	and.w	r2, r3, #15
 80024b6:	4613      	mov	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	3304      	adds	r3, #4
 80024c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_PCD_EP_Close+0x6e>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e00e      	b.n	8002508 <HAL_PCD_EP_Close+0x8c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68f9      	ldr	r1, [r7, #12]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f002 f9e5 	bl	80048c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	460b      	mov	r3, r1
 800251e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002520:	7afb      	ldrb	r3, [r7, #11]
 8002522:	f003 020f 	and.w	r2, r3, #15
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4413      	add	r3, r2
 8002536:	3304      	adds	r3, #4
 8002538:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2200      	movs	r2, #0
 800254a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2200      	movs	r2, #0
 8002550:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002552:	7afb      	ldrb	r3, [r7, #11]
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	b2da      	uxtb	r2, r3
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	799b      	ldrb	r3, [r3, #6]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d102      	bne.n	800256c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	799b      	ldrb	r3, [r3, #6]
 8002574:	461a      	mov	r2, r3
 8002576:	6979      	ldr	r1, [r7, #20]
 8002578:	f002 fa82 	bl	8004a80 <USB_EPStartXfer>

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	607a      	str	r2, [r7, #4]
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	460b      	mov	r3, r1
 8002594:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002596:	7afb      	ldrb	r3, [r7, #11]
 8002598:	f003 020f 	and.w	r2, r3, #15
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	3310      	adds	r3, #16
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4413      	add	r3, r2
 80025aa:	3304      	adds	r3, #4
 80025ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2201      	movs	r2, #1
 80025c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025c6:	7afb      	ldrb	r3, [r7, #11]
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	799b      	ldrb	r3, [r3, #6]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d102      	bne.n	80025e0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	799b      	ldrb	r3, [r3, #6]
 80025e8:	461a      	mov	r2, r3
 80025ea:	6979      	ldr	r1, [r7, #20]
 80025ec:	f002 fa48 	bl	8004a80 <USB_EPStartXfer>

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b084      	sub	sp, #16
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	7912      	ldrb	r2, [r2, #4]
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e04f      	b.n	80026b8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800261c:	2b00      	cmp	r3, #0
 800261e:	da0f      	bge.n	8002640 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	f003 020f 	and.w	r2, r3, #15
 8002626:	4613      	mov	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	3310      	adds	r3, #16
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	3304      	adds	r3, #4
 8002636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2201      	movs	r2, #1
 800263c:	705a      	strb	r2, [r3, #1]
 800263e:	e00d      	b.n	800265c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	3304      	adds	r3, #4
 8002654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	b2da      	uxtb	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_PCD_EP_SetStall+0x82>
 8002678:	2302      	movs	r3, #2
 800267a:	e01d      	b.n	80026b8 <HAL_PCD_EP_SetStall+0xbe>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68f9      	ldr	r1, [r7, #12]
 800268a:	4618      	mov	r0, r3
 800268c:	f002 fdd0 	bl	8005230 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7999      	ldrb	r1, [r3, #6]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026a8:	461a      	mov	r2, r3
 80026aa:	f002 ffc1 	bl	8005630 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	7912      	ldrb	r2, [r2, #4]
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e042      	b.n	8002764 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	da0f      	bge.n	8002706 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	f003 020f 	and.w	r2, r3, #15
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	3310      	adds	r3, #16
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	3304      	adds	r3, #4
 80026fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	705a      	strb	r2, [r3, #1]
 8002704:	e00f      	b.n	8002726 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002706:	78fb      	ldrb	r3, [r7, #3]
 8002708:	f003 020f 	and.w	r2, r3, #15
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	4413      	add	r3, r2
 800271c:	3304      	adds	r3, #4
 800271e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	b2da      	uxtb	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_PCD_EP_ClrStall+0x86>
 8002742:	2302      	movs	r3, #2
 8002744:	e00e      	b.n	8002764 <HAL_PCD_EP_ClrStall+0xa4>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68f9      	ldr	r1, [r7, #12]
 8002754:	4618      	mov	r0, r3
 8002756:	f002 fdd9 	bl	800530c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800277c:	2b00      	cmp	r3, #0
 800277e:	da0c      	bge.n	800279a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	f003 020f 	and.w	r2, r3, #15
 8002786:	4613      	mov	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	3310      	adds	r3, #16
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	3304      	adds	r3, #4
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e00c      	b.n	80027b4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	f003 020f 	and.w	r2, r3, #15
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4413      	add	r3, r2
 80027b0:	3304      	adds	r3, #4
 80027b2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68f9      	ldr	r1, [r7, #12]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f002 fbf8 	bl	8004fb0 <USB_EPStopXfer>
 80027c0:	4603      	mov	r3, r0
 80027c2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80027c4:	7afb      	ldrb	r3, [r7, #11]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b08a      	sub	sp, #40	@ 0x28
 80027d2:	af02      	add	r7, sp, #8
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	3310      	adds	r3, #16
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	3304      	adds	r3, #4
 80027f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d901      	bls.n	8002806 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e06b      	b.n	80028de <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	429a      	cmp	r2, r3
 800281a:	d902      	bls.n	8002822 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3303      	adds	r3, #3
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800282a:	e02a      	b.n	8002882 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	429a      	cmp	r2, r3
 8002840:	d902      	bls.n	8002848 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	3303      	adds	r3, #3
 800284c:	089b      	lsrs	r3, r3, #2
 800284e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	68d9      	ldr	r1, [r3, #12]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	4603      	mov	r3, r0
 8002864:	6978      	ldr	r0, [r7, #20]
 8002866:	f002 fc4d 	bl	8005104 <USB_WritePacket>

    ep->xfer_buff  += len;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	441a      	add	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	441a      	add	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4413      	add	r3, r2
 800288a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	429a      	cmp	r2, r3
 8002896:	d809      	bhi.n	80028ac <PCD_WriteEmptyTxFifo+0xde>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d203      	bcs.n	80028ac <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1bf      	bne.n	800282c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d811      	bhi.n	80028dc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	2201      	movs	r2, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	6939      	ldr	r1, [r7, #16]
 80028d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80028d8:	4013      	ands	r3, r2
 80028da:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3720      	adds	r7, #32
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b088      	sub	sp, #32
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	333c      	adds	r3, #60	@ 0x3c
 8002900:	3304      	adds	r3, #4
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4413      	add	r3, r2
 800290e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	799b      	ldrb	r3, [r3, #6]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d17b      	bne.n	8002a16 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d015      	beq.n	8002954 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	4a61      	ldr	r2, [pc, #388]	@ (8002ab0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	f240 80b9 	bls.w	8002aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80b3 	beq.w	8002aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	4413      	add	r3, r2
 8002946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800294a:	461a      	mov	r2, r3
 800294c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002950:	6093      	str	r3, [r2, #8]
 8002952:	e0a7      	b.n	8002aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	4413      	add	r3, r2
 8002966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800296a:	461a      	mov	r2, r3
 800296c:	2320      	movs	r3, #32
 800296e:	6093      	str	r3, [r2, #8]
 8002970:	e098      	b.n	8002aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002978:	2b00      	cmp	r3, #0
 800297a:	f040 8093 	bne.w	8002aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	4a4b      	ldr	r2, [pc, #300]	@ (8002ab0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d90f      	bls.n	80029a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800299c:	461a      	mov	r2, r3
 800299e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029a2:	6093      	str	r3, [r2, #8]
 80029a4:	e07e      	b.n	8002aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	4413      	add	r3, r2
 80029b8:	3304      	adds	r3, #4
 80029ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a1a      	ldr	r2, [r3, #32]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	0159      	lsls	r1, r3, #5
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	440b      	add	r3, r1
 80029c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d2:	1ad2      	subs	r2, r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d114      	bne.n	8002a08 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029f0:	461a      	mov	r2, r3
 80029f2:	2101      	movs	r1, #1
 80029f4:	f002 fe1c 	bl	8005630 <USB_EP0_OutStart>
 80029f8:	e006      	b.n	8002a08 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	441a      	add	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f005 f8f2 	bl	8007bf8 <HAL_PCD_DataOutStageCallback>
 8002a14:	e046      	b.n	8002aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	4a26      	ldr	r2, [pc, #152]	@ (8002ab4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d124      	bne.n	8002a68 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a34:	461a      	mov	r2, r3
 8002a36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a3a:	6093      	str	r3, [r2, #8]
 8002a3c:	e032      	b.n	8002aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f003 0320 	and.w	r3, r3, #32
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a54:	461a      	mov	r2, r3
 8002a56:	2320      	movs	r3, #32
 8002a58:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	4619      	mov	r1, r3
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f005 f8c9 	bl	8007bf8 <HAL_PCD_DataOutStageCallback>
 8002a66:	e01d      	b.n	8002aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d114      	bne.n	8002a98 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d108      	bne.n	8002a98 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a90:	461a      	mov	r2, r3
 8002a92:	2100      	movs	r1, #0
 8002a94:	f002 fdcc 	bl	8005630 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f005 f8aa 	bl	8007bf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3720      	adds	r7, #32
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	4f54300a 	.word	0x4f54300a
 8002ab4:	4f54310a 	.word	0x4f54310a

08002ab8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	333c      	adds	r3, #60	@ 0x3c
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a15      	ldr	r2, [pc, #84]	@ (8002b40 <PCD_EP_OutSetupPacket_int+0x88>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d90e      	bls.n	8002b0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d009      	beq.n	8002b0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b04:	461a      	mov	r2, r3
 8002b06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f005 f861 	bl	8007bd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4a0a      	ldr	r2, [pc, #40]	@ (8002b40 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d90c      	bls.n	8002b34 <PCD_EP_OutSetupPacket_int+0x7c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	799b      	ldrb	r3, [r3, #6]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d108      	bne.n	8002b34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2101      	movs	r1, #1
 8002b30:	f002 fd7e 	bl	8005630 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	4f54300a 	.word	0x4f54300a

08002b44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	70fb      	strb	r3, [r7, #3]
 8002b50:	4613      	mov	r3, r2
 8002b52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d107      	bne.n	8002b72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b62:	883b      	ldrh	r3, [r7, #0]
 8002b64:	0419      	lsls	r1, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b70:	e028      	b.n	8002bc4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b78:	0c1b      	lsrs	r3, r3, #16
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b80:	2300      	movs	r3, #0
 8002b82:	73fb      	strb	r3, [r7, #15]
 8002b84:	e00d      	b.n	8002ba2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	3340      	adds	r3, #64	@ 0x40
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	4413      	add	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d3ec      	bcc.n	8002b86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002bac:	883b      	ldrh	r3, [r7, #0]
 8002bae:	0418      	lsls	r0, r3, #16
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6819      	ldr	r1, [r3, #0]
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	4302      	orrs	r2, r0
 8002bbc:	3340      	adds	r3, #64	@ 0x40
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	887a      	ldrh	r2, [r7, #2]
 8002be4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	f043 0303 	orr.w	r3, r3, #3
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0cc      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c50:	4b68      	ldr	r3, [pc, #416]	@ (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d90c      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b65      	ldr	r3, [pc, #404]	@ (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b63      	ldr	r3, [pc, #396]	@ (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0b8      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d020      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c90:	4b59      	ldr	r3, [pc, #356]	@ (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4a58      	ldr	r2, [pc, #352]	@ (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ca8:	4b53      	ldr	r3, [pc, #332]	@ (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a52      	ldr	r2, [pc, #328]	@ (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb4:	4b50      	ldr	r3, [pc, #320]	@ (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	494d      	ldr	r1, [pc, #308]	@ (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d044      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b47      	ldr	r3, [pc, #284]	@ (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d119      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e07f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d003      	beq.n	8002cfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfa:	4b3f      	ldr	r3, [pc, #252]	@ (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e06f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e067      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d1a:	4b37      	ldr	r3, [pc, #220]	@ (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f023 0203 	bic.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4934      	ldr	r1, [pc, #208]	@ (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d2c:	f7fd ff88 	bl	8000c40 <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d34:	f7fd ff84 	bl	8000c40 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e04f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 020c 	and.w	r2, r3, #12
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d1eb      	bne.n	8002d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b25      	ldr	r3, [pc, #148]	@ (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d20c      	bcs.n	8002d84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b22      	ldr	r3, [pc, #136]	@ (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b20      	ldr	r3, [pc, #128]	@ (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e032      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d90:	4b19      	ldr	r3, [pc, #100]	@ (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4916      	ldr	r1, [pc, #88]	@ (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dae:	4b12      	ldr	r3, [pc, #72]	@ (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	490e      	ldr	r1, [pc, #56]	@ (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dc2:	f000 fb57 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	490a      	ldr	r1, [pc, #40]	@ (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002dd4:	5ccb      	ldrb	r3, [r1, r3]
 8002dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dda:	4a09      	ldr	r2, [pc, #36]	@ (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dde:	4b09      	ldr	r3, [pc, #36]	@ (8002e04 <HAL_RCC_ClockConfig+0x1c8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fee8 	bl	8000bb8 <HAL_InitTick>

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023c00 	.word	0x40023c00
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	0800829c 	.word	0x0800829c
 8002e00:	20000000 	.word	0x20000000
 8002e04:	20000004 	.word	0x20000004

08002e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e0c:	4b03      	ldr	r3, [pc, #12]	@ (8002e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20000000 	.word	0x20000000

08002e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08c      	sub	sp, #48	@ 0x30
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002e58:	4b6f      	ldr	r3, [pc, #444]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e5e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e66:	496c      	ldr	r1, [pc, #432]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002e76:	2301      	movs	r3, #1
 8002e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d010      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002e86:	4b64      	ldr	r3, [pc, #400]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e8c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e94:	4960      	ldr	r1, [pc, #384]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d017      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eb4:	4b58      	ldr	r3, [pc, #352]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002eba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	4955      	ldr	r1, [pc, #340]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d017      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ef0:	4b49      	ldr	r3, [pc, #292]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ef6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002efe:	4946      	ldr	r1, [pc, #280]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002f10:	2301      	movs	r3, #1
 8002f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 808a 	beq.w	8003042 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	4b39      	ldr	r3, [pc, #228]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	4a38      	ldr	r2, [pc, #224]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f3e:	4b36      	ldr	r3, [pc, #216]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f4a:	4b34      	ldr	r3, [pc, #208]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a33      	ldr	r2, [pc, #204]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f56:	f7fd fe73 	bl	8000c40 <HAL_GetTick>
 8002f5a:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fd fe6f 	bl	8000c40 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e278      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f70:	4b2a      	ldr	r3, [pc, #168]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f7c:	4b26      	ldr	r3, [pc, #152]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f84:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d02f      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f94:	6a3a      	ldr	r2, [r7, #32]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d028      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fa2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8003020 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002faa:	4b1d      	ldr	r3, [pc, #116]	@ (8003020 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002fb0:	4a19      	ldr	r2, [pc, #100]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fb6:	4b18      	ldr	r3, [pc, #96]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d114      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fd fe3d 	bl	8000c40 <HAL_GetTick>
 8002fc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fd fe39 	bl	8000c40 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e240      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0ee      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ff4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ff8:	d114      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002ffa:	4b07      	ldr	r3, [pc, #28]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800300a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800300e:	4902      	ldr	r1, [pc, #8]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003010:	4313      	orrs	r3, r2
 8003012:	608b      	str	r3, [r1, #8]
 8003014:	e00c      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	40007000 	.word	0x40007000
 8003020:	42470e40 	.word	0x42470e40
 8003024:	4b4a      	ldr	r3, [pc, #296]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4a49      	ldr	r2, [pc, #292]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800302a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800302e:	6093      	str	r3, [r2, #8]
 8003030:	4b47      	ldr	r3, [pc, #284]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003032:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303c:	4944      	ldr	r1, [pc, #272]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800303e:	4313      	orrs	r3, r2
 8003040:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b00      	cmp	r3, #0
 800304c:	d004      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003054:	4b3f      	ldr	r3, [pc, #252]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003056:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003064:	4b3a      	ldr	r3, [pc, #232]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800306a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003072:	4937      	ldr	r1, [pc, #220]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003086:	4b32      	ldr	r3, [pc, #200]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003088:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800308c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003094:	492e      	ldr	r1, [pc, #184]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d011      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030a8:	4b29      	ldr	r3, [pc, #164]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ae:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b6:	4926      	ldr	r1, [pc, #152]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030c6:	d101      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80030c8:	2301      	movs	r3, #1
 80030ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80030d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030de:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e6:	491a      	ldr	r1, [pc, #104]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d011      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80030fa:	4b15      	ldr	r3, [pc, #84]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003100:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003108:	4911      	ldr	r1, [pc, #68]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003118:	d101      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800311a:	2301      	movs	r3, #1
 800311c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800311e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003120:	2b01      	cmp	r3, #1
 8003122:	d005      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800312c:	f040 80ff 	bne.w	800332e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003130:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003136:	f7fd fd83 	bl	8000c40 <HAL_GetTick>
 800313a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800313c:	e00e      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800313e:	f7fd fd7f 	bl	8000c40 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d907      	bls.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e188      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003150:	40023800 	.word	0x40023800
 8003154:	424711e0 	.word	0x424711e0
 8003158:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800315c:	4b7e      	ldr	r3, [pc, #504]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1ea      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003184:	2b00      	cmp	r3, #0
 8003186:	d028      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d124      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003190:	4b71      	ldr	r3, [pc, #452]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	3301      	adds	r3, #1
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031a8:	0e1b      	lsrs	r3, r3, #24
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	019b      	lsls	r3, r3, #6
 80031ba:	431a      	orrs	r2, r3
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	3b01      	subs	r3, #1
 80031c2:	041b      	lsls	r3, r3, #16
 80031c4:	431a      	orrs	r2, r3
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	071b      	lsls	r3, r3, #28
 80031d2:	4961      	ldr	r1, [pc, #388]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d035      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003200:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003204:	d130      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003206:	4b54      	ldr	r3, [pc, #336]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003208:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	3301      	adds	r3, #1
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003218:	4b4f      	ldr	r3, [pc, #316]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800321a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800321e:	0f1b      	lsrs	r3, r3, #28
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	019b      	lsls	r3, r3, #6
 8003230:	431a      	orrs	r2, r3
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	085b      	lsrs	r3, r3, #1
 8003236:	3b01      	subs	r3, #1
 8003238:	041b      	lsls	r3, r3, #16
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	061b      	lsls	r3, r3, #24
 8003242:	431a      	orrs	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	071b      	lsls	r3, r3, #28
 8003248:	4943      	ldr	r1, [pc, #268]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003250:	4b41      	ldr	r3, [pc, #260]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003252:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003256:	f023 021f 	bic.w	r2, r3, #31
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325e:	3b01      	subs	r3, #1
 8003260:	493d      	ldr	r1, [pc, #244]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003270:	2b00      	cmp	r3, #0
 8003272:	d029      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003278:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800327c:	d124      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800327e:	4b36      	ldr	r3, [pc, #216]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003280:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	3301      	adds	r3, #1
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003290:	4b31      	ldr	r3, [pc, #196]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003296:	0f1b      	lsrs	r3, r3, #28
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	019b      	lsls	r3, r3, #6
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	085b      	lsrs	r3, r3, #1
 80032b0:	3b01      	subs	r3, #1
 80032b2:	041b      	lsls	r3, r3, #16
 80032b4:	431a      	orrs	r2, r3
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	061b      	lsls	r3, r3, #24
 80032ba:	431a      	orrs	r2, r3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	071b      	lsls	r3, r3, #28
 80032c0:	4925      	ldr	r1, [pc, #148]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d016      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	019b      	lsls	r3, r3, #6
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	3b01      	subs	r3, #1
 80032e8:	041b      	lsls	r3, r3, #16
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	061b      	lsls	r3, r3, #24
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	071b      	lsls	r3, r3, #28
 80032fa:	4917      	ldr	r1, [pc, #92]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003302:	4b16      	ldr	r3, [pc, #88]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003308:	f7fd fc9a 	bl	8000c40 <HAL_GetTick>
 800330c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003310:	f7fd fc96 	bl	8000c40 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e09f      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003322:	4b0d      	ldr	r3, [pc, #52]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800332e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003330:	2b01      	cmp	r3, #1
 8003332:	f040 8095 	bne.w	8003460 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003336:	4b0a      	ldr	r3, [pc, #40]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800333c:	f7fd fc80 	bl	8000c40 <HAL_GetTick>
 8003340:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003342:	e00f      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003344:	f7fd fc7c 	bl	8000c40 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d908      	bls.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e085      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800
 800335c:	42470068 	.word	0x42470068
 8003360:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003364:	4b41      	ldr	r3, [pc, #260]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800336c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003370:	d0e8      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800338e:	2b00      	cmp	r3, #0
 8003390:	d02b      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003396:	2b00      	cmp	r3, #0
 8003398:	d127      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800339a:	4b34      	ldr	r3, [pc, #208]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	3301      	adds	r3, #1
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	019b      	lsls	r3, r3, #6
 80033b6:	431a      	orrs	r2, r3
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	085b      	lsrs	r3, r3, #1
 80033bc:	3b01      	subs	r3, #1
 80033be:	041b      	lsls	r3, r3, #16
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c6:	061b      	lsls	r3, r3, #24
 80033c8:	4928      	ldr	r1, [pc, #160]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80033d0:	4b26      	ldr	r3, [pc, #152]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033d6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033de:	3b01      	subs	r3, #1
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	4922      	ldr	r1, [pc, #136]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d01d      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033fe:	d118      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003400:	4b1a      	ldr	r3, [pc, #104]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003406:	0e1b      	lsrs	r3, r3, #24
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	019b      	lsls	r3, r3, #6
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	085b      	lsrs	r3, r3, #1
 8003420:	3b01      	subs	r3, #1
 8003422:	041b      	lsls	r3, r3, #16
 8003424:	431a      	orrs	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	061b      	lsls	r3, r3, #24
 800342a:	4910      	ldr	r1, [pc, #64]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003432:	4b0f      	ldr	r3, [pc, #60]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003434:	2201      	movs	r2, #1
 8003436:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003438:	f7fd fc02 	bl	8000c40 <HAL_GetTick>
 800343c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003440:	f7fd fbfe 	bl	8000c40 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e007      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003452:	4b06      	ldr	r3, [pc, #24]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800345a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800345e:	d1ef      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3730      	adds	r7, #48	@ 0x30
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	42470070 	.word	0x42470070

08003474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003478:	b0ae      	sub	sp, #184	@ 0xb8
 800347a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800349a:	4bcb      	ldr	r3, [pc, #812]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b0c      	cmp	r3, #12
 80034a4:	f200 8206 	bhi.w	80038b4 <HAL_RCC_GetSysClockFreq+0x440>
 80034a8:	a201      	add	r2, pc, #4	@ (adr r2, 80034b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80034aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ae:	bf00      	nop
 80034b0:	080034e5 	.word	0x080034e5
 80034b4:	080038b5 	.word	0x080038b5
 80034b8:	080038b5 	.word	0x080038b5
 80034bc:	080038b5 	.word	0x080038b5
 80034c0:	080034ed 	.word	0x080034ed
 80034c4:	080038b5 	.word	0x080038b5
 80034c8:	080038b5 	.word	0x080038b5
 80034cc:	080038b5 	.word	0x080038b5
 80034d0:	080034f5 	.word	0x080034f5
 80034d4:	080038b5 	.word	0x080038b5
 80034d8:	080038b5 	.word	0x080038b5
 80034dc:	080038b5 	.word	0x080038b5
 80034e0:	080036e5 	.word	0x080036e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034e4:	4bb9      	ldr	r3, [pc, #740]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x358>)
 80034e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80034ea:	e1e7      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ec:	4bb8      	ldr	r3, [pc, #736]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80034ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034f2:	e1e3      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034f4:	4bb4      	ldr	r3, [pc, #720]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003500:	4bb1      	ldr	r3, [pc, #708]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d071      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350c:	4bae      	ldr	r3, [pc, #696]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	099b      	lsrs	r3, r3, #6
 8003512:	2200      	movs	r2, #0
 8003514:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003518:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800351c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003524:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003528:	2300      	movs	r3, #0
 800352a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800352e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003532:	4622      	mov	r2, r4
 8003534:	462b      	mov	r3, r5
 8003536:	f04f 0000 	mov.w	r0, #0
 800353a:	f04f 0100 	mov.w	r1, #0
 800353e:	0159      	lsls	r1, r3, #5
 8003540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003544:	0150      	lsls	r0, r2, #5
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4621      	mov	r1, r4
 800354c:	1a51      	subs	r1, r2, r1
 800354e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003550:	4629      	mov	r1, r5
 8003552:	eb63 0301 	sbc.w	r3, r3, r1
 8003556:	647b      	str	r3, [r7, #68]	@ 0x44
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003564:	4649      	mov	r1, r9
 8003566:	018b      	lsls	r3, r1, #6
 8003568:	4641      	mov	r1, r8
 800356a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800356e:	4641      	mov	r1, r8
 8003570:	018a      	lsls	r2, r1, #6
 8003572:	4641      	mov	r1, r8
 8003574:	1a51      	subs	r1, r2, r1
 8003576:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003578:	4649      	mov	r1, r9
 800357a:	eb63 0301 	sbc.w	r3, r3, r1
 800357e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800358c:	4649      	mov	r1, r9
 800358e:	00cb      	lsls	r3, r1, #3
 8003590:	4641      	mov	r1, r8
 8003592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003596:	4641      	mov	r1, r8
 8003598:	00ca      	lsls	r2, r1, #3
 800359a:	4610      	mov	r0, r2
 800359c:	4619      	mov	r1, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	4622      	mov	r2, r4
 80035a2:	189b      	adds	r3, r3, r2
 80035a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80035a6:	462b      	mov	r3, r5
 80035a8:	460a      	mov	r2, r1
 80035aa:	eb42 0303 	adc.w	r3, r2, r3
 80035ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035bc:	4629      	mov	r1, r5
 80035be:	024b      	lsls	r3, r1, #9
 80035c0:	4621      	mov	r1, r4
 80035c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035c6:	4621      	mov	r1, r4
 80035c8:	024a      	lsls	r2, r1, #9
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035d2:	2200      	movs	r2, #0
 80035d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80035e0:	f7fc fe10 	bl	8000204 <__aeabi_uldivmod>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4613      	mov	r3, r2
 80035ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035ee:	e067      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f0:	4b75      	ldr	r3, [pc, #468]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	099b      	lsrs	r3, r3, #6
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003600:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003608:	67bb      	str	r3, [r7, #120]	@ 0x78
 800360a:	2300      	movs	r3, #0
 800360c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800360e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003612:	4622      	mov	r2, r4
 8003614:	462b      	mov	r3, r5
 8003616:	f04f 0000 	mov.w	r0, #0
 800361a:	f04f 0100 	mov.w	r1, #0
 800361e:	0159      	lsls	r1, r3, #5
 8003620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003624:	0150      	lsls	r0, r2, #5
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4621      	mov	r1, r4
 800362c:	1a51      	subs	r1, r2, r1
 800362e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003630:	4629      	mov	r1, r5
 8003632:	eb63 0301 	sbc.w	r3, r3, r1
 8003636:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003644:	4649      	mov	r1, r9
 8003646:	018b      	lsls	r3, r1, #6
 8003648:	4641      	mov	r1, r8
 800364a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800364e:	4641      	mov	r1, r8
 8003650:	018a      	lsls	r2, r1, #6
 8003652:	4641      	mov	r1, r8
 8003654:	ebb2 0a01 	subs.w	sl, r2, r1
 8003658:	4649      	mov	r1, r9
 800365a:	eb63 0b01 	sbc.w	fp, r3, r1
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800366a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800366e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003672:	4692      	mov	sl, r2
 8003674:	469b      	mov	fp, r3
 8003676:	4623      	mov	r3, r4
 8003678:	eb1a 0303 	adds.w	r3, sl, r3
 800367c:	623b      	str	r3, [r7, #32]
 800367e:	462b      	mov	r3, r5
 8003680:	eb4b 0303 	adc.w	r3, fp, r3
 8003684:	627b      	str	r3, [r7, #36]	@ 0x24
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003692:	4629      	mov	r1, r5
 8003694:	028b      	lsls	r3, r1, #10
 8003696:	4621      	mov	r1, r4
 8003698:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800369c:	4621      	mov	r1, r4
 800369e:	028a      	lsls	r2, r1, #10
 80036a0:	4610      	mov	r0, r2
 80036a2:	4619      	mov	r1, r3
 80036a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036a8:	2200      	movs	r2, #0
 80036aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80036ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80036ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80036b2:	f7fc fda7 	bl	8000204 <__aeabi_uldivmod>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4613      	mov	r3, r2
 80036bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036c0:	4b41      	ldr	r3, [pc, #260]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	3301      	adds	r3, #1
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80036d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036da:	fbb2 f3f3 	udiv	r3, r2, r3
 80036de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80036e2:	e0eb      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036e4:	4b38      	ldr	r3, [pc, #224]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036f0:	4b35      	ldr	r3, [pc, #212]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d06b      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fc:	4b32      	ldr	r3, [pc, #200]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	099b      	lsrs	r3, r3, #6
 8003702:	2200      	movs	r2, #0
 8003704:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003706:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003708:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800370a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003710:	2300      	movs	r3, #0
 8003712:	667b      	str	r3, [r7, #100]	@ 0x64
 8003714:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003718:	4622      	mov	r2, r4
 800371a:	462b      	mov	r3, r5
 800371c:	f04f 0000 	mov.w	r0, #0
 8003720:	f04f 0100 	mov.w	r1, #0
 8003724:	0159      	lsls	r1, r3, #5
 8003726:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800372a:	0150      	lsls	r0, r2, #5
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4621      	mov	r1, r4
 8003732:	1a51      	subs	r1, r2, r1
 8003734:	61b9      	str	r1, [r7, #24]
 8003736:	4629      	mov	r1, r5
 8003738:	eb63 0301 	sbc.w	r3, r3, r1
 800373c:	61fb      	str	r3, [r7, #28]
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800374a:	4659      	mov	r1, fp
 800374c:	018b      	lsls	r3, r1, #6
 800374e:	4651      	mov	r1, sl
 8003750:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003754:	4651      	mov	r1, sl
 8003756:	018a      	lsls	r2, r1, #6
 8003758:	4651      	mov	r1, sl
 800375a:	ebb2 0801 	subs.w	r8, r2, r1
 800375e:	4659      	mov	r1, fp
 8003760:	eb63 0901 	sbc.w	r9, r3, r1
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003770:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003774:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003778:	4690      	mov	r8, r2
 800377a:	4699      	mov	r9, r3
 800377c:	4623      	mov	r3, r4
 800377e:	eb18 0303 	adds.w	r3, r8, r3
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	462b      	mov	r3, r5
 8003786:	eb49 0303 	adc.w	r3, r9, r3
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003798:	4629      	mov	r1, r5
 800379a:	024b      	lsls	r3, r1, #9
 800379c:	4621      	mov	r1, r4
 800379e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037a2:	4621      	mov	r1, r4
 80037a4:	024a      	lsls	r2, r1, #9
 80037a6:	4610      	mov	r0, r2
 80037a8:	4619      	mov	r1, r3
 80037aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037ae:	2200      	movs	r2, #0
 80037b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037b2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80037b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80037b8:	f7fc fd24 	bl	8000204 <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4613      	mov	r3, r2
 80037c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037c6:	e065      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x420>
 80037c8:	40023800 	.word	0x40023800
 80037cc:	00f42400 	.word	0x00f42400
 80037d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d4:	4b3d      	ldr	r3, [pc, #244]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x458>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	099b      	lsrs	r3, r3, #6
 80037da:	2200      	movs	r2, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	4611      	mov	r1, r2
 80037e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80037e6:	2300      	movs	r3, #0
 80037e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80037ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80037ee:	4642      	mov	r2, r8
 80037f0:	464b      	mov	r3, r9
 80037f2:	f04f 0000 	mov.w	r0, #0
 80037f6:	f04f 0100 	mov.w	r1, #0
 80037fa:	0159      	lsls	r1, r3, #5
 80037fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003800:	0150      	lsls	r0, r2, #5
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4641      	mov	r1, r8
 8003808:	1a51      	subs	r1, r2, r1
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	4649      	mov	r1, r9
 800380e:	eb63 0301 	sbc.w	r3, r3, r1
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003820:	4659      	mov	r1, fp
 8003822:	018b      	lsls	r3, r1, #6
 8003824:	4651      	mov	r1, sl
 8003826:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800382a:	4651      	mov	r1, sl
 800382c:	018a      	lsls	r2, r1, #6
 800382e:	4651      	mov	r1, sl
 8003830:	1a54      	subs	r4, r2, r1
 8003832:	4659      	mov	r1, fp
 8003834:	eb63 0501 	sbc.w	r5, r3, r1
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	00eb      	lsls	r3, r5, #3
 8003842:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003846:	00e2      	lsls	r2, r4, #3
 8003848:	4614      	mov	r4, r2
 800384a:	461d      	mov	r5, r3
 800384c:	4643      	mov	r3, r8
 800384e:	18e3      	adds	r3, r4, r3
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	464b      	mov	r3, r9
 8003854:	eb45 0303 	adc.w	r3, r5, r3
 8003858:	607b      	str	r3, [r7, #4]
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003866:	4629      	mov	r1, r5
 8003868:	028b      	lsls	r3, r1, #10
 800386a:	4621      	mov	r1, r4
 800386c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003870:	4621      	mov	r1, r4
 8003872:	028a      	lsls	r2, r1, #10
 8003874:	4610      	mov	r0, r2
 8003876:	4619      	mov	r1, r3
 8003878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800387c:	2200      	movs	r2, #0
 800387e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003880:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003882:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003886:	f7fc fcbd 	bl	8000204 <__aeabi_uldivmod>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4613      	mov	r3, r2
 8003890:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003894:	4b0d      	ldr	r3, [pc, #52]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x458>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	0f1b      	lsrs	r3, r3, #28
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80038a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038b2:	e003      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038b4:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80038b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	37b8      	adds	r7, #184	@ 0xb8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ca:	bf00      	nop
 80038cc:	40023800 	.word	0x40023800
 80038d0:	00f42400 	.word	0x00f42400

080038d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e28d      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8083 	beq.w	80039fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038f4:	4b94      	ldr	r3, [pc, #592]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 030c 	and.w	r3, r3, #12
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d019      	beq.n	8003934 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003900:	4b91      	ldr	r3, [pc, #580]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003908:	2b08      	cmp	r3, #8
 800390a:	d106      	bne.n	800391a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800390c:	4b8e      	ldr	r3, [pc, #568]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003914:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003918:	d00c      	beq.n	8003934 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391a:	4b8b      	ldr	r3, [pc, #556]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003922:	2b0c      	cmp	r3, #12
 8003924:	d112      	bne.n	800394c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003926:	4b88      	ldr	r3, [pc, #544]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800392e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003932:	d10b      	bne.n	800394c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	4b84      	ldr	r3, [pc, #528]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d05b      	beq.n	80039f8 <HAL_RCC_OscConfig+0x124>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d157      	bne.n	80039f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e25a      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003954:	d106      	bne.n	8003964 <HAL_RCC_OscConfig+0x90>
 8003956:	4b7c      	ldr	r3, [pc, #496]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a7b      	ldr	r2, [pc, #492]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e01d      	b.n	80039a0 <HAL_RCC_OscConfig+0xcc>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800396c:	d10c      	bne.n	8003988 <HAL_RCC_OscConfig+0xb4>
 800396e:	4b76      	ldr	r3, [pc, #472]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a75      	ldr	r2, [pc, #468]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003974:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	4b73      	ldr	r3, [pc, #460]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a72      	ldr	r2, [pc, #456]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e00b      	b.n	80039a0 <HAL_RCC_OscConfig+0xcc>
 8003988:	4b6f      	ldr	r3, [pc, #444]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a6e      	ldr	r2, [pc, #440]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 800398e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	4b6c      	ldr	r3, [pc, #432]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a6b      	ldr	r2, [pc, #428]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 800399a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800399e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d013      	beq.n	80039d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fd f94a 	bl	8000c40 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b0:	f7fd f946 	bl	8000c40 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	@ 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e21f      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c2:	4b61      	ldr	r3, [pc, #388]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0xdc>
 80039ce:	e014      	b.n	80039fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fd f936 	bl	8000c40 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d8:	f7fd f932 	bl	8000c40 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	@ 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e20b      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ea:	4b57      	ldr	r3, [pc, #348]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x104>
 80039f6:	e000      	b.n	80039fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d06f      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a06:	4b50      	ldr	r3, [pc, #320]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d017      	beq.n	8003a42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a12:	4b4d      	ldr	r3, [pc, #308]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d105      	bne.n	8003a2a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2a:	4b47      	ldr	r3, [pc, #284]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d11c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a36:	4b44      	ldr	r3, [pc, #272]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d116      	bne.n	8003a70 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a42:	4b41      	ldr	r3, [pc, #260]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_RCC_OscConfig+0x186>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d001      	beq.n	8003a5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e1d3      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4937      	ldr	r1, [pc, #220]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6e:	e03a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d020      	beq.n	8003aba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a78:	4b34      	ldr	r3, [pc, #208]	@ (8003b4c <HAL_RCC_OscConfig+0x278>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7e:	f7fd f8df 	bl	8000c40 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a86:	f7fd f8db 	bl	8000c40 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e1b4      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a98:	4b2b      	ldr	r3, [pc, #172]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa4:	4b28      	ldr	r3, [pc, #160]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4925      	ldr	r1, [pc, #148]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	600b      	str	r3, [r1, #0]
 8003ab8:	e015      	b.n	8003ae6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aba:	4b24      	ldr	r3, [pc, #144]	@ (8003b4c <HAL_RCC_OscConfig+0x278>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fd f8be 	bl	8000c40 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac8:	f7fd f8ba 	bl	8000c40 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e193      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ada:	4b1b      	ldr	r3, [pc, #108]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d036      	beq.n	8003b60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afa:	4b15      	ldr	r3, [pc, #84]	@ (8003b50 <HAL_RCC_OscConfig+0x27c>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fd f89e 	bl	8000c40 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b08:	f7fd f89a 	bl	8000c40 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e173      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0x234>
 8003b26:	e01b      	b.n	8003b60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b28:	4b09      	ldr	r3, [pc, #36]	@ (8003b50 <HAL_RCC_OscConfig+0x27c>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2e:	f7fd f887 	bl	8000c40 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b34:	e00e      	b.n	8003b54 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b36:	f7fd f883 	bl	8000c40 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d907      	bls.n	8003b54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e15c      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	42470000 	.word	0x42470000
 8003b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b54:	4b8a      	ldr	r3, [pc, #552]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1ea      	bne.n	8003b36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8097 	beq.w	8003c9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b72:	4b83      	ldr	r3, [pc, #524]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10f      	bne.n	8003b9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	4b7f      	ldr	r3, [pc, #508]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	4a7e      	ldr	r2, [pc, #504]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9e:	4b79      	ldr	r3, [pc, #484]	@ (8003d84 <HAL_RCC_OscConfig+0x4b0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d118      	bne.n	8003bdc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003baa:	4b76      	ldr	r3, [pc, #472]	@ (8003d84 <HAL_RCC_OscConfig+0x4b0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a75      	ldr	r2, [pc, #468]	@ (8003d84 <HAL_RCC_OscConfig+0x4b0>)
 8003bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb6:	f7fd f843 	bl	8000c40 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bbe:	f7fd f83f 	bl	8000c40 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e118      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd0:	4b6c      	ldr	r3, [pc, #432]	@ (8003d84 <HAL_RCC_OscConfig+0x4b0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d106      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x31e>
 8003be4:	4b66      	ldr	r3, [pc, #408]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be8:	4a65      	ldr	r2, [pc, #404]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf0:	e01c      	b.n	8003c2c <HAL_RCC_OscConfig+0x358>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b05      	cmp	r3, #5
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x340>
 8003bfa:	4b61      	ldr	r3, [pc, #388]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfe:	4a60      	ldr	r2, [pc, #384]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c06:	4b5e      	ldr	r3, [pc, #376]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0a:	4a5d      	ldr	r2, [pc, #372]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0x358>
 8003c14:	4b5a      	ldr	r3, [pc, #360]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c18:	4a59      	ldr	r2, [pc, #356]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c20:	4b57      	ldr	r3, [pc, #348]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c24:	4a56      	ldr	r2, [pc, #344]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c26:	f023 0304 	bic.w	r3, r3, #4
 8003c2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d015      	beq.n	8003c60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7fd f804 	bl	8000c40 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3c:	f7fd f800 	bl	8000c40 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e0d7      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c52:	4b4b      	ldr	r3, [pc, #300]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0ee      	beq.n	8003c3c <HAL_RCC_OscConfig+0x368>
 8003c5e:	e014      	b.n	8003c8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c60:	f7fc ffee 	bl	8000c40 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c68:	f7fc ffea 	bl	8000c40 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e0c1      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7e:	4b40      	ldr	r3, [pc, #256]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1ee      	bne.n	8003c68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d105      	bne.n	8003c9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c90:	4b3b      	ldr	r3, [pc, #236]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	4a3a      	ldr	r2, [pc, #232]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80ad 	beq.w	8003e00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ca6:	4b36      	ldr	r3, [pc, #216]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d060      	beq.n	8003d74 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d145      	bne.n	8003d46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cba:	4b33      	ldr	r3, [pc, #204]	@ (8003d88 <HAL_RCC_OscConfig+0x4b4>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fc ffbe 	bl	8000c40 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fc ffba 	bl	8000c40 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e093      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	4b29      	ldr	r3, [pc, #164]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf4:	019b      	lsls	r3, r3, #6
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	041b      	lsls	r3, r3, #16
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d08:	061b      	lsls	r3, r3, #24
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d10:	071b      	lsls	r3, r3, #28
 8003d12:	491b      	ldr	r1, [pc, #108]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d18:	4b1b      	ldr	r3, [pc, #108]	@ (8003d88 <HAL_RCC_OscConfig+0x4b4>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1e:	f7fc ff8f 	bl	8000c40 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d26:	f7fc ff8b 	bl	8000c40 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e064      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d38:	4b11      	ldr	r3, [pc, #68]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x452>
 8003d44:	e05c      	b.n	8003e00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	4b10      	ldr	r3, [pc, #64]	@ (8003d88 <HAL_RCC_OscConfig+0x4b4>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fc ff78 	bl	8000c40 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fc ff74 	bl	8000c40 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e04d      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x480>
 8003d72:	e045      	b.n	8003e00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d107      	bne.n	8003d8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e040      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40007000 	.word	0x40007000
 8003d88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003e0c <HAL_RCC_OscConfig+0x538>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d030      	beq.n	8003dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d129      	bne.n	8003dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d122      	bne.n	8003dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d119      	bne.n	8003dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd2:	085b      	lsrs	r3, r3, #1
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d10f      	bne.n	8003dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d107      	bne.n	8003dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800

08003e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e041      	b.n	8003ea6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fc fe04 	bl	8000a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4610      	mov	r0, r2
 8003e50:	f000 f896 	bl	8003f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d001      	beq.n	8003ec8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e046      	b.n	8003f56 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a23      	ldr	r2, [pc, #140]	@ (8003f64 <HAL_TIM_Base_Start+0xb4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d022      	beq.n	8003f20 <HAL_TIM_Base_Start+0x70>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee2:	d01d      	beq.n	8003f20 <HAL_TIM_Base_Start+0x70>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f68 <HAL_TIM_Base_Start+0xb8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d018      	beq.n	8003f20 <HAL_TIM_Base_Start+0x70>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f6c <HAL_TIM_Base_Start+0xbc>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d013      	beq.n	8003f20 <HAL_TIM_Base_Start+0x70>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1c      	ldr	r2, [pc, #112]	@ (8003f70 <HAL_TIM_Base_Start+0xc0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00e      	beq.n	8003f20 <HAL_TIM_Base_Start+0x70>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1b      	ldr	r2, [pc, #108]	@ (8003f74 <HAL_TIM_Base_Start+0xc4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d009      	beq.n	8003f20 <HAL_TIM_Base_Start+0x70>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a19      	ldr	r2, [pc, #100]	@ (8003f78 <HAL_TIM_Base_Start+0xc8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d004      	beq.n	8003f20 <HAL_TIM_Base_Start+0x70>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a18      	ldr	r2, [pc, #96]	@ (8003f7c <HAL_TIM_Base_Start+0xcc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d111      	bne.n	8003f44 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b06      	cmp	r3, #6
 8003f30:	d010      	beq.n	8003f54 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f42:	e007      	b.n	8003f54 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40010000 	.word	0x40010000
 8003f68:	40000400 	.word	0x40000400
 8003f6c:	40000800 	.word	0x40000800
 8003f70:	40000c00 	.word	0x40000c00
 8003f74:	40010400 	.word	0x40010400
 8003f78:	40014000 	.word	0x40014000
 8003f7c:	40001800 	.word	0x40001800

08003f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a46      	ldr	r2, [pc, #280]	@ (80040ac <TIM_Base_SetConfig+0x12c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d013      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f9e:	d00f      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a43      	ldr	r2, [pc, #268]	@ (80040b0 <TIM_Base_SetConfig+0x130>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00b      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a42      	ldr	r2, [pc, #264]	@ (80040b4 <TIM_Base_SetConfig+0x134>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d007      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a41      	ldr	r2, [pc, #260]	@ (80040b8 <TIM_Base_SetConfig+0x138>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d003      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a40      	ldr	r2, [pc, #256]	@ (80040bc <TIM_Base_SetConfig+0x13c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d108      	bne.n	8003fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a35      	ldr	r2, [pc, #212]	@ (80040ac <TIM_Base_SetConfig+0x12c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d02b      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe0:	d027      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a32      	ldr	r2, [pc, #200]	@ (80040b0 <TIM_Base_SetConfig+0x130>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d023      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a31      	ldr	r2, [pc, #196]	@ (80040b4 <TIM_Base_SetConfig+0x134>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01f      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a30      	ldr	r2, [pc, #192]	@ (80040b8 <TIM_Base_SetConfig+0x138>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01b      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a2f      	ldr	r2, [pc, #188]	@ (80040bc <TIM_Base_SetConfig+0x13c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d017      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a2e      	ldr	r2, [pc, #184]	@ (80040c0 <TIM_Base_SetConfig+0x140>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a2d      	ldr	r2, [pc, #180]	@ (80040c4 <TIM_Base_SetConfig+0x144>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00f      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a2c      	ldr	r2, [pc, #176]	@ (80040c8 <TIM_Base_SetConfig+0x148>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00b      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2b      	ldr	r2, [pc, #172]	@ (80040cc <TIM_Base_SetConfig+0x14c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d007      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2a      	ldr	r2, [pc, #168]	@ (80040d0 <TIM_Base_SetConfig+0x150>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d003      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a29      	ldr	r2, [pc, #164]	@ (80040d4 <TIM_Base_SetConfig+0x154>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d108      	bne.n	8004044 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a10      	ldr	r2, [pc, #64]	@ (80040ac <TIM_Base_SetConfig+0x12c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d003      	beq.n	8004078 <TIM_Base_SetConfig+0xf8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a12      	ldr	r2, [pc, #72]	@ (80040bc <TIM_Base_SetConfig+0x13c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d103      	bne.n	8004080 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b01      	cmp	r3, #1
 8004090:	d105      	bne.n	800409e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f023 0201 	bic.w	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	611a      	str	r2, [r3, #16]
  }
}
 800409e:	bf00      	nop
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40010000 	.word	0x40010000
 80040b0:	40000400 	.word	0x40000400
 80040b4:	40000800 	.word	0x40000800
 80040b8:	40000c00 	.word	0x40000c00
 80040bc:	40010400 	.word	0x40010400
 80040c0:	40014000 	.word	0x40014000
 80040c4:	40014400 	.word	0x40014400
 80040c8:	40014800 	.word	0x40014800
 80040cc:	40001800 	.word	0x40001800
 80040d0:	40001c00 	.word	0x40001c00
 80040d4:	40002000 	.word	0x40002000

080040d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040d8:	b084      	sub	sp, #16
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	f107 001c 	add.w	r0, r7, #28
 80040e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d123      	bne.n	800413a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004106:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800411a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800411e:	2b01      	cmp	r3, #1
 8004120:	d105      	bne.n	800412e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f001 fadc 	bl	80056ec <USB_CoreReset>
 8004134:	4603      	mov	r3, r0
 8004136:	73fb      	strb	r3, [r7, #15]
 8004138:	e01b      	b.n	8004172 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f001 fad0 	bl	80056ec <USB_CoreReset>
 800414c:	4603      	mov	r3, r0
 800414e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004150:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004154:	2b00      	cmp	r3, #0
 8004156:	d106      	bne.n	8004166 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	639a      	str	r2, [r3, #56]	@ 0x38
 8004164:	e005      	b.n	8004172 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004172:	7fbb      	ldrb	r3, [r7, #30]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d10b      	bne.n	8004190 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f043 0206 	orr.w	r2, r3, #6
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f043 0220 	orr.w	r2, r3, #32
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004190:	7bfb      	ldrb	r3, [r7, #15]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800419c:	b004      	add	sp, #16
 800419e:	4770      	bx	lr

080041a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	4613      	mov	r3, r2
 80041ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d165      	bne.n	8004280 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4a41      	ldr	r2, [pc, #260]	@ (80042bc <USB_SetTurnaroundTime+0x11c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d906      	bls.n	80041ca <USB_SetTurnaroundTime+0x2a>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4a40      	ldr	r2, [pc, #256]	@ (80042c0 <USB_SetTurnaroundTime+0x120>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d202      	bcs.n	80041ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80041c4:	230f      	movs	r3, #15
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	e062      	b.n	8004290 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	4a3c      	ldr	r2, [pc, #240]	@ (80042c0 <USB_SetTurnaroundTime+0x120>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d306      	bcc.n	80041e0 <USB_SetTurnaroundTime+0x40>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	4a3b      	ldr	r2, [pc, #236]	@ (80042c4 <USB_SetTurnaroundTime+0x124>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d202      	bcs.n	80041e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80041da:	230e      	movs	r3, #14
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	e057      	b.n	8004290 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4a38      	ldr	r2, [pc, #224]	@ (80042c4 <USB_SetTurnaroundTime+0x124>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d306      	bcc.n	80041f6 <USB_SetTurnaroundTime+0x56>
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4a37      	ldr	r2, [pc, #220]	@ (80042c8 <USB_SetTurnaroundTime+0x128>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d202      	bcs.n	80041f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80041f0:	230d      	movs	r3, #13
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	e04c      	b.n	8004290 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4a33      	ldr	r2, [pc, #204]	@ (80042c8 <USB_SetTurnaroundTime+0x128>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d306      	bcc.n	800420c <USB_SetTurnaroundTime+0x6c>
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4a32      	ldr	r2, [pc, #200]	@ (80042cc <USB_SetTurnaroundTime+0x12c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d802      	bhi.n	800420c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004206:	230c      	movs	r3, #12
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	e041      	b.n	8004290 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4a2f      	ldr	r2, [pc, #188]	@ (80042cc <USB_SetTurnaroundTime+0x12c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d906      	bls.n	8004222 <USB_SetTurnaroundTime+0x82>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4a2e      	ldr	r2, [pc, #184]	@ (80042d0 <USB_SetTurnaroundTime+0x130>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d802      	bhi.n	8004222 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800421c:	230b      	movs	r3, #11
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	e036      	b.n	8004290 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4a2a      	ldr	r2, [pc, #168]	@ (80042d0 <USB_SetTurnaroundTime+0x130>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d906      	bls.n	8004238 <USB_SetTurnaroundTime+0x98>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4a29      	ldr	r2, [pc, #164]	@ (80042d4 <USB_SetTurnaroundTime+0x134>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d802      	bhi.n	8004238 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004232:	230a      	movs	r3, #10
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	e02b      	b.n	8004290 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4a26      	ldr	r2, [pc, #152]	@ (80042d4 <USB_SetTurnaroundTime+0x134>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d906      	bls.n	800424e <USB_SetTurnaroundTime+0xae>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4a25      	ldr	r2, [pc, #148]	@ (80042d8 <USB_SetTurnaroundTime+0x138>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d202      	bcs.n	800424e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004248:	2309      	movs	r3, #9
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	e020      	b.n	8004290 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4a21      	ldr	r2, [pc, #132]	@ (80042d8 <USB_SetTurnaroundTime+0x138>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d306      	bcc.n	8004264 <USB_SetTurnaroundTime+0xc4>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4a20      	ldr	r2, [pc, #128]	@ (80042dc <USB_SetTurnaroundTime+0x13c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d802      	bhi.n	8004264 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800425e:	2308      	movs	r3, #8
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e015      	b.n	8004290 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4a1d      	ldr	r2, [pc, #116]	@ (80042dc <USB_SetTurnaroundTime+0x13c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d906      	bls.n	800427a <USB_SetTurnaroundTime+0xda>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a1c      	ldr	r2, [pc, #112]	@ (80042e0 <USB_SetTurnaroundTime+0x140>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d202      	bcs.n	800427a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004274:	2307      	movs	r3, #7
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	e00a      	b.n	8004290 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800427a:	2306      	movs	r3, #6
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	e007      	b.n	8004290 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d102      	bne.n	800428c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004286:	2309      	movs	r3, #9
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	e001      	b.n	8004290 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800428c:	2309      	movs	r3, #9
 800428e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	029b      	lsls	r3, r3, #10
 80042a4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	371c      	adds	r7, #28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	00d8acbf 	.word	0x00d8acbf
 80042c0:	00e4e1c0 	.word	0x00e4e1c0
 80042c4:	00f42400 	.word	0x00f42400
 80042c8:	01067380 	.word	0x01067380
 80042cc:	011a499f 	.word	0x011a499f
 80042d0:	01312cff 	.word	0x01312cff
 80042d4:	014ca43f 	.word	0x014ca43f
 80042d8:	016e3600 	.word	0x016e3600
 80042dc:	01a6ab1f 	.word	0x01a6ab1f
 80042e0:	01e84800 	.word	0x01e84800

080042e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f043 0201 	orr.w	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f023 0201 	bic.w	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d115      	bne.n	8004376 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004356:	200a      	movs	r0, #10
 8004358:	f7fc fc7e 	bl	8000c58 <HAL_Delay>
      ms += 10U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	330a      	adds	r3, #10
 8004360:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f001 f933 	bl	80055ce <USB_GetMode>
 8004368:	4603      	mov	r3, r0
 800436a:	2b01      	cmp	r3, #1
 800436c:	d01e      	beq.n	80043ac <USB_SetCurrentMode+0x84>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2bc7      	cmp	r3, #199	@ 0xc7
 8004372:	d9f0      	bls.n	8004356 <USB_SetCurrentMode+0x2e>
 8004374:	e01a      	b.n	80043ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d115      	bne.n	80043a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004388:	200a      	movs	r0, #10
 800438a:	f7fc fc65 	bl	8000c58 <HAL_Delay>
      ms += 10U;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	330a      	adds	r3, #10
 8004392:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f001 f91a 	bl	80055ce <USB_GetMode>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <USB_SetCurrentMode+0x84>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80043a4:	d9f0      	bls.n	8004388 <USB_SetCurrentMode+0x60>
 80043a6:	e001      	b.n	80043ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e005      	b.n	80043b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2bc8      	cmp	r3, #200	@ 0xc8
 80043b0:	d101      	bne.n	80043b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043c0:	b084      	sub	sp, #16
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b086      	sub	sp, #24
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80043ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043da:	2300      	movs	r3, #0
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	e009      	b.n	80043f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	3340      	adds	r3, #64	@ 0x40
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	2200      	movs	r2, #0
 80043ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	3301      	adds	r3, #1
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	2b0e      	cmp	r3, #14
 80043f8:	d9f2      	bls.n	80043e0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80043fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d11c      	bne.n	800443c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004410:	f043 0302 	orr.w	r3, r3, #2
 8004414:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	e005      	b.n	8004448 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004440:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800444e:	461a      	mov	r2, r3
 8004450:	2300      	movs	r3, #0
 8004452:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004454:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004458:	2b01      	cmp	r3, #1
 800445a:	d10d      	bne.n	8004478 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800445c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004460:	2b00      	cmp	r3, #0
 8004462:	d104      	bne.n	800446e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004464:	2100      	movs	r1, #0
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f968 	bl	800473c <USB_SetDevSpeed>
 800446c:	e008      	b.n	8004480 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800446e:	2101      	movs	r1, #1
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f963 	bl	800473c <USB_SetDevSpeed>
 8004476:	e003      	b.n	8004480 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004478:	2103      	movs	r1, #3
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f95e 	bl	800473c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004480:	2110      	movs	r1, #16
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f8fa 	bl	800467c <USB_FlushTxFifo>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f924 	bl	80046e0 <USB_FlushRxFifo>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044a8:	461a      	mov	r2, r3
 80044aa:	2300      	movs	r3, #0
 80044ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044b4:	461a      	mov	r2, r3
 80044b6:	2300      	movs	r3, #0
 80044b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044c0:	461a      	mov	r2, r3
 80044c2:	2300      	movs	r3, #0
 80044c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044c6:	2300      	movs	r3, #0
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	e043      	b.n	8004554 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044e2:	d118      	bne.n	8004516 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10a      	bne.n	8004500 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044f6:	461a      	mov	r2, r3
 80044f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e013      	b.n	8004528 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800450c:	461a      	mov	r2, r3
 800450e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	e008      	b.n	8004528 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004522:	461a      	mov	r2, r3
 8004524:	2300      	movs	r3, #0
 8004526:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004534:	461a      	mov	r2, r3
 8004536:	2300      	movs	r3, #0
 8004538:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004546:	461a      	mov	r2, r3
 8004548:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800454c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	3301      	adds	r3, #1
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004558:	461a      	mov	r2, r3
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4293      	cmp	r3, r2
 800455e:	d3b5      	bcc.n	80044cc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004560:	2300      	movs	r3, #0
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	e043      	b.n	80045ee <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004578:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800457c:	d118      	bne.n	80045b0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10a      	bne.n	800459a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004590:	461a      	mov	r2, r3
 8004592:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	e013      	b.n	80045c2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a6:	461a      	mov	r2, r3
 80045a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	e008      	b.n	80045c2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045bc:	461a      	mov	r2, r3
 80045be:	2300      	movs	r3, #0
 80045c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ce:	461a      	mov	r2, r3
 80045d0:	2300      	movs	r3, #0
 80045d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e0:	461a      	mov	r2, r3
 80045e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80045e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	3301      	adds	r3, #1
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045f2:	461a      	mov	r2, r3
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d3b5      	bcc.n	8004566 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800460c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800461a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800461c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004620:	2b00      	cmp	r3, #0
 8004622:	d105      	bne.n	8004630 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f043 0210 	orr.w	r2, r3, #16
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699a      	ldr	r2, [r3, #24]
 8004634:	4b10      	ldr	r3, [pc, #64]	@ (8004678 <USB_DevInit+0x2b8>)
 8004636:	4313      	orrs	r3, r2
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800463c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f043 0208 	orr.w	r2, r3, #8
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004650:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004654:	2b01      	cmp	r3, #1
 8004656:	d107      	bne.n	8004668 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004660:	f043 0304 	orr.w	r3, r3, #4
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004668:	7dfb      	ldrb	r3, [r7, #23]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004674:	b004      	add	sp, #16
 8004676:	4770      	bx	lr
 8004678:	803c3800 	.word	0x803c3800

0800467c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3301      	adds	r3, #1
 800468e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004696:	d901      	bls.n	800469c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e01b      	b.n	80046d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	daf2      	bge.n	800468a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	019b      	lsls	r3, r3, #6
 80046ac:	f043 0220 	orr.w	r2, r3, #32
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3301      	adds	r3, #1
 80046b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046c0:	d901      	bls.n	80046c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e006      	b.n	80046d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d0f0      	beq.n	80046b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3301      	adds	r3, #1
 80046f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046f8:	d901      	bls.n	80046fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e018      	b.n	8004730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	daf2      	bge.n	80046ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2210      	movs	r2, #16
 800470e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3301      	adds	r3, #1
 8004714:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800471c:	d901      	bls.n	8004722 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e006      	b.n	8004730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0310 	and.w	r3, r3, #16
 800472a:	2b10      	cmp	r3, #16
 800472c:	d0f0      	beq.n	8004710 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	68f9      	ldr	r1, [r7, #12]
 8004758:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800475c:	4313      	orrs	r3, r2
 800475e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800476e:	b480      	push	{r7}
 8004770:	b087      	sub	sp, #28
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 0306 	and.w	r3, r3, #6
 8004786:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800478e:	2300      	movs	r3, #0
 8004790:	75fb      	strb	r3, [r7, #23]
 8004792:	e00a      	b.n	80047aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d002      	beq.n	80047a0 <USB_GetDevSpeed+0x32>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b06      	cmp	r3, #6
 800479e:	d102      	bne.n	80047a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80047a0:	2302      	movs	r3, #2
 80047a2:	75fb      	strb	r3, [r7, #23]
 80047a4:	e001      	b.n	80047aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80047a6:	230f      	movs	r3, #15
 80047a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	785b      	ldrb	r3, [r3, #1]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d13a      	bne.n	800484a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	f003 030f 	and.w	r3, r3, #15
 80047e4:	2101      	movs	r1, #1
 80047e6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	68f9      	ldr	r1, [r7, #12]
 80047ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d155      	bne.n	80048b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	791b      	ldrb	r3, [r3, #4]
 8004826:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004828:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	059b      	lsls	r3, r3, #22
 800482e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004830:	4313      	orrs	r3, r2
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	0151      	lsls	r1, r2, #5
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	440a      	add	r2, r1
 800483a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800483e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	e036      	b.n	80048b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004850:	69da      	ldr	r2, [r3, #28]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	2101      	movs	r1, #1
 800485c:	fa01 f303 	lsl.w	r3, r1, r3
 8004860:	041b      	lsls	r3, r3, #16
 8004862:	68f9      	ldr	r1, [r7, #12]
 8004864:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004868:	4313      	orrs	r3, r2
 800486a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d11a      	bne.n	80048b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	791b      	ldrb	r3, [r3, #4]
 800489c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800489e:	430b      	orrs	r3, r1
 80048a0:	4313      	orrs	r3, r2
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	0151      	lsls	r1, r2, #5
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	440a      	add	r2, r1
 80048aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	785b      	ldrb	r3, [r3, #1]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d161      	bne.n	80049a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048fa:	d11f      	bne.n	800493c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	0151      	lsls	r1, r2, #5
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	440a      	add	r2, r1
 8004912:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004916:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800491a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	0151      	lsls	r1, r2, #5
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	440a      	add	r2, r1
 8004932:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004936:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800493a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004942:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	2101      	movs	r1, #1
 800494e:	fa01 f303 	lsl.w	r3, r1, r3
 8004952:	b29b      	uxth	r3, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	68f9      	ldr	r1, [r7, #12]
 8004958:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800495c:	4013      	ands	r3, r2
 800495e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	2101      	movs	r1, #1
 8004972:	fa01 f303 	lsl.w	r3, r1, r3
 8004976:	b29b      	uxth	r3, r3
 8004978:	43db      	mvns	r3, r3
 800497a:	68f9      	ldr	r1, [r7, #12]
 800497c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004980:	4013      	ands	r3, r2
 8004982:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	0159      	lsls	r1, r3, #5
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	440b      	add	r3, r1
 800499a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800499e:	4619      	mov	r1, r3
 80049a0:	4b35      	ldr	r3, [pc, #212]	@ (8004a78 <USB_DeactivateEndpoint+0x1b0>)
 80049a2:	4013      	ands	r3, r2
 80049a4:	600b      	str	r3, [r1, #0]
 80049a6:	e060      	b.n	8004a6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049be:	d11f      	bne.n	8004a00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	0151      	lsls	r1, r2, #5
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	440a      	add	r2, r1
 80049d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80049de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	0151      	lsls	r1, r2, #5
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	440a      	add	r2, r1
 80049f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	2101      	movs	r1, #1
 8004a12:	fa01 f303 	lsl.w	r3, r1, r3
 8004a16:	041b      	lsls	r3, r3, #16
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	68f9      	ldr	r1, [r7, #12]
 8004a1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a20:	4013      	ands	r3, r2
 8004a22:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	2101      	movs	r1, #1
 8004a36:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3a:	041b      	lsls	r3, r3, #16
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	68f9      	ldr	r1, [r7, #12]
 8004a40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a44:	4013      	ands	r3, r2
 8004a46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	0159      	lsls	r1, r3, #5
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	440b      	add	r3, r1
 8004a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a62:	4619      	mov	r1, r3
 8004a64:	4b05      	ldr	r3, [pc, #20]	@ (8004a7c <USB_DeactivateEndpoint+0x1b4>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	ec337800 	.word	0xec337800
 8004a7c:	eff37800 	.word	0xeff37800

08004a80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08a      	sub	sp, #40	@ 0x28
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	f040 817a 	bne.w	8004d96 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d132      	bne.n	8004b10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	0151      	lsls	r1, r2, #5
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	440a      	add	r2, r1
 8004ac0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ac4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004ac8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004acc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ae8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004aec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	0151      	lsls	r1, r2, #5
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	440a      	add	r2, r1
 8004b04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b08:	0cdb      	lsrs	r3, r3, #19
 8004b0a:	04db      	lsls	r3, r3, #19
 8004b0c:	6113      	str	r3, [r2, #16]
 8004b0e:	e092      	b.n	8004c36 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	0151      	lsls	r1, r2, #5
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	440a      	add	r2, r1
 8004b26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b2a:	0cdb      	lsrs	r3, r3, #19
 8004b2c:	04db      	lsls	r3, r3, #19
 8004b2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	0151      	lsls	r1, r2, #5
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	440a      	add	r2, r1
 8004b46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b4a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004b4e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004b52:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d11a      	bne.n	8004b90 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d903      	bls.n	8004b6e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	0151      	lsls	r1, r2, #5
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	440a      	add	r2, r1
 8004b84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b8c:	6113      	str	r3, [r2, #16]
 8004b8e:	e01b      	b.n	8004bc8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b9c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	6919      	ldr	r1, [r3, #16]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	440b      	add	r3, r1
 8004ba8:	1e59      	subs	r1, r3, #1
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bb2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004bb4:	4ba2      	ldr	r3, [pc, #648]	@ (8004e40 <USB_EPStartXfer+0x3c0>)
 8004bb6:	400b      	ands	r3, r1
 8004bb8:	69b9      	ldr	r1, [r7, #24]
 8004bba:	0148      	lsls	r0, r1, #5
 8004bbc:	69f9      	ldr	r1, [r7, #28]
 8004bbe:	4401      	add	r1, r0
 8004bc0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bde:	69b9      	ldr	r1, [r7, #24]
 8004be0:	0148      	lsls	r0, r1, #5
 8004be2:	69f9      	ldr	r1, [r7, #28]
 8004be4:	4401      	add	r1, r0
 8004be6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004bea:	4313      	orrs	r3, r2
 8004bec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	791b      	ldrb	r3, [r3, #4]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d11f      	bne.n	8004c36 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	0151      	lsls	r1, r2, #5
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	440a      	add	r2, r1
 8004c0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c10:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004c14:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	0151      	lsls	r1, r2, #5
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	440a      	add	r2, r1
 8004c2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c34:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d14b      	bne.n	8004cd4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d009      	beq.n	8004c58 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c50:	461a      	mov	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	791b      	ldrb	r3, [r3, #4]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d128      	bne.n	8004cb2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d110      	bne.n	8004c92 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	0151      	lsls	r1, r2, #5
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	440a      	add	r2, r1
 8004c86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c8a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	e00f      	b.n	8004cb2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cb0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	0151      	lsls	r1, r2, #5
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	440a      	add	r2, r1
 8004cc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ccc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e165      	b.n	8004fa0 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	0151      	lsls	r1, r2, #5
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	440a      	add	r2, r1
 8004cea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004cf2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	791b      	ldrb	r3, [r3, #4]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d015      	beq.n	8004d28 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 814d 	beq.w	8004fa0 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	2101      	movs	r1, #1
 8004d18:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1c:	69f9      	ldr	r1, [r7, #28]
 8004d1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d22:	4313      	orrs	r3, r2
 8004d24:	634b      	str	r3, [r1, #52]	@ 0x34
 8004d26:	e13b      	b.n	8004fa0 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d110      	bne.n	8004d5a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	e00f      	b.n	8004d7a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	0151      	lsls	r1, r2, #5
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	440a      	add	r2, r1
 8004d70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d78:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	68d9      	ldr	r1, [r3, #12]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	781a      	ldrb	r2, [r3, #0]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	b298      	uxth	r0, r3
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f9b8 	bl	8005104 <USB_WritePacket>
 8004d94:	e104      	b.n	8004fa0 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	0151      	lsls	r1, r2, #5
 8004da8:	69fa      	ldr	r2, [r7, #28]
 8004daa:	440a      	add	r2, r1
 8004dac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004db0:	0cdb      	lsrs	r3, r3, #19
 8004db2:	04db      	lsls	r3, r3, #19
 8004db4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	0151      	lsls	r1, r2, #5
 8004dc8:	69fa      	ldr	r2, [r7, #28]
 8004dca:	440a      	add	r2, r1
 8004dcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dd0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004dd4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004dd8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d131      	bne.n	8004e44 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e04:	691a      	ldr	r2, [r3, #16]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e0e:	69b9      	ldr	r1, [r7, #24]
 8004e10:	0148      	lsls	r0, r1, #5
 8004e12:	69f9      	ldr	r1, [r7, #28]
 8004e14:	4401      	add	r1, r0
 8004e16:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	0151      	lsls	r1, r2, #5
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	440a      	add	r2, r1
 8004e34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e3c:	6113      	str	r3, [r2, #16]
 8004e3e:	e061      	b.n	8004f04 <USB_EPStartXfer+0x484>
 8004e40:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d123      	bne.n	8004e94 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e62:	69b9      	ldr	r1, [r7, #24]
 8004e64:	0148      	lsls	r0, r1, #5
 8004e66:	69f9      	ldr	r1, [r7, #28]
 8004e68:	4401      	add	r1, r0
 8004e6a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e90:	6113      	str	r3, [r2, #16]
 8004e92:	e037      	b.n	8004f04 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	1e5a      	subs	r2, r3, #1
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	8afa      	ldrh	r2, [r7, #22]
 8004eb0:	fb03 f202 	mul.w	r2, r3, r2
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	8afb      	ldrh	r3, [r7, #22]
 8004ec8:	04d9      	lsls	r1, r3, #19
 8004eca:	4b38      	ldr	r3, [pc, #224]	@ (8004fac <USB_EPStartXfer+0x52c>)
 8004ecc:	400b      	ands	r3, r1
 8004ece:	69b9      	ldr	r1, [r7, #24]
 8004ed0:	0148      	lsls	r0, r1, #5
 8004ed2:	69f9      	ldr	r1, [r7, #28]
 8004ed4:	4401      	add	r1, r0
 8004ed6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004eda:	4313      	orrs	r3, r2
 8004edc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ef4:	69b9      	ldr	r1, [r7, #24]
 8004ef6:	0148      	lsls	r0, r1, #5
 8004ef8:	69f9      	ldr	r1, [r7, #28]
 8004efa:	4401      	add	r1, r0
 8004efc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f00:	4313      	orrs	r3, r2
 8004f02:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004f04:	79fb      	ldrb	r3, [r7, #7]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d10d      	bne.n	8004f26 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	68d9      	ldr	r1, [r3, #12]
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f22:	460a      	mov	r2, r1
 8004f24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	791b      	ldrb	r3, [r3, #4]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d128      	bne.n	8004f80 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d110      	bne.n	8004f60 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	0151      	lsls	r1, r2, #5
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	440a      	add	r2, r1
 8004f54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	e00f      	b.n	8004f80 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	0151      	lsls	r1, r2, #5
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	440a      	add	r2, r1
 8004f96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f9a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004f9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3720      	adds	r7, #32
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	1ff80000 	.word	0x1ff80000

08004fb0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	785b      	ldrb	r3, [r3, #1]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d14a      	bne.n	8005064 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fe6:	f040 8086 	bne.w	80050f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	7812      	ldrb	r2, [r2, #0]
 8004ffe:	0151      	lsls	r1, r2, #5
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	440a      	add	r2, r1
 8005004:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005008:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800500c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	7812      	ldrb	r2, [r2, #0]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	440a      	add	r2, r1
 8005028:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800502c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005030:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	3301      	adds	r3, #1
 8005036:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800503e:	4293      	cmp	r3, r2
 8005040:	d902      	bls.n	8005048 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	75fb      	strb	r3, [r7, #23]
          break;
 8005046:	e056      	b.n	80050f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800505c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005060:	d0e7      	beq.n	8005032 <USB_EPStopXfer+0x82>
 8005062:	e048      	b.n	80050f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005078:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800507c:	d13b      	bne.n	80050f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	7812      	ldrb	r2, [r2, #0]
 8005092:	0151      	lsls	r1, r2, #5
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	440a      	add	r2, r1
 8005098:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800509c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80050a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	7812      	ldrb	r2, [r2, #0]
 80050b6:	0151      	lsls	r1, r2, #5
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	440a      	add	r2, r1
 80050bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3301      	adds	r3, #1
 80050ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d902      	bls.n	80050dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	75fb      	strb	r3, [r7, #23]
          break;
 80050da:	e00c      	b.n	80050f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050f4:	d0e7      	beq.n	80050c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005104:	b480      	push	{r7}
 8005106:	b089      	sub	sp, #36	@ 0x24
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	4611      	mov	r1, r2
 8005110:	461a      	mov	r2, r3
 8005112:	460b      	mov	r3, r1
 8005114:	71fb      	strb	r3, [r7, #7]
 8005116:	4613      	mov	r3, r2
 8005118:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005122:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005126:	2b00      	cmp	r3, #0
 8005128:	d123      	bne.n	8005172 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800512a:	88bb      	ldrh	r3, [r7, #4]
 800512c:	3303      	adds	r3, #3
 800512e:	089b      	lsrs	r3, r3, #2
 8005130:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005132:	2300      	movs	r3, #0
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	e018      	b.n	800516a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	031a      	lsls	r2, r3, #12
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	4413      	add	r3, r2
 8005140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005144:	461a      	mov	r2, r3
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	3301      	adds	r3, #1
 8005150:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	3301      	adds	r3, #1
 8005156:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	3301      	adds	r3, #1
 800515c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	3301      	adds	r3, #1
 8005162:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	3301      	adds	r3, #1
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	429a      	cmp	r2, r3
 8005170:	d3e2      	bcc.n	8005138 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3724      	adds	r7, #36	@ 0x24
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005180:	b480      	push	{r7}
 8005182:	b08b      	sub	sp, #44	@ 0x2c
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	4613      	mov	r3, r2
 800518c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005196:	88fb      	ldrh	r3, [r7, #6]
 8005198:	089b      	lsrs	r3, r3, #2
 800519a:	b29b      	uxth	r3, r3
 800519c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800519e:	88fb      	ldrh	r3, [r7, #6]
 80051a0:	f003 0303 	and.w	r3, r3, #3
 80051a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80051a6:	2300      	movs	r3, #0
 80051a8:	623b      	str	r3, [r7, #32]
 80051aa:	e014      	b.n	80051d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	3301      	adds	r3, #1
 80051bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	3301      	adds	r3, #1
 80051c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	3301      	adds	r3, #1
 80051c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80051ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051cc:	3301      	adds	r3, #1
 80051ce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	3301      	adds	r3, #1
 80051d4:	623b      	str	r3, [r7, #32]
 80051d6:	6a3a      	ldr	r2, [r7, #32]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d3e6      	bcc.n	80051ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051de:	8bfb      	ldrh	r3, [r7, #30]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01e      	beq.n	8005222 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051ee:	461a      	mov	r2, r3
 80051f0:	f107 0310 	add.w	r3, r7, #16
 80051f4:	6812      	ldr	r2, [r2, #0]
 80051f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
 8005204:	b2da      	uxtb	r2, r3
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	701a      	strb	r2, [r3, #0]
      i++;
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	3301      	adds	r3, #1
 800520e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	3301      	adds	r3, #1
 8005214:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005216:	8bfb      	ldrh	r3, [r7, #30]
 8005218:	3b01      	subs	r3, #1
 800521a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800521c:	8bfb      	ldrh	r3, [r7, #30]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1ea      	bne.n	80051f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005224:	4618      	mov	r0, r3
 8005226:	372c      	adds	r7, #44	@ 0x2c
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	785b      	ldrb	r3, [r3, #1]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d12c      	bne.n	80052a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	db12      	blt.n	8005284 <USB_EPSetStall+0x54>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00f      	beq.n	8005284 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	440a      	add	r2, r1
 800527a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800527e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005282:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	440a      	add	r2, r1
 800529a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800529e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	e02b      	b.n	80052fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	db12      	blt.n	80052de <USB_EPSetStall+0xae>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00f      	beq.n	80052de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80052dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80052fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	785b      	ldrb	r3, [r3, #1]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d128      	bne.n	800537a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	0151      	lsls	r1, r2, #5
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	440a      	add	r2, r1
 800533e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005342:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005346:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	791b      	ldrb	r3, [r3, #4]
 800534c:	2b03      	cmp	r3, #3
 800534e:	d003      	beq.n	8005358 <USB_EPClearStall+0x4c>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	791b      	ldrb	r3, [r3, #4]
 8005354:	2b02      	cmp	r3, #2
 8005356:	d138      	bne.n	80053ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	0151      	lsls	r1, r2, #5
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	440a      	add	r2, r1
 800536e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	e027      	b.n	80053ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	0151      	lsls	r1, r2, #5
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	440a      	add	r2, r1
 8005390:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005394:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005398:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	791b      	ldrb	r3, [r3, #4]
 800539e:	2b03      	cmp	r3, #3
 80053a0:	d003      	beq.n	80053aa <USB_EPClearStall+0x9e>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	791b      	ldrb	r3, [r3, #4]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d10f      	bne.n	80053ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	0151      	lsls	r1, r2, #5
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	440a      	add	r2, r1
 80053c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053f6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80053fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	78fb      	ldrb	r3, [r7, #3]
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800540c:	68f9      	ldr	r1, [r7, #12]
 800540e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005412:	4313      	orrs	r3, r2
 8005414:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800543e:	f023 0303 	bic.w	r3, r3, #3
 8005442:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005452:	f023 0302 	bic.w	r3, r3, #2
 8005456:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005466:	b480      	push	{r7}
 8005468:	b085      	sub	sp, #20
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005480:	f023 0303 	bic.w	r3, r3, #3
 8005484:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005494:	f043 0302 	orr.w	r3, r3, #2
 8005498:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4013      	ands	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054c0:	68fb      	ldr	r3, [r7, #12]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b085      	sub	sp, #20
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	4013      	ands	r3, r2
 80054f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	0c1b      	lsrs	r3, r3, #16
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005502:	b480      	push	{r7}
 8005504:	b085      	sub	sp, #20
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	4013      	ands	r3, r2
 8005524:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	b29b      	uxth	r3, r3
}
 800552a:	4618      	mov	r0, r3
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005536:	b480      	push	{r7}
 8005538:	b085      	sub	sp, #20
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	460b      	mov	r3, r1
 8005540:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	4013      	ands	r3, r2
 8005562:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005564:	68bb      	ldr	r3, [r7, #8]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005572:	b480      	push	{r7}
 8005574:	b087      	sub	sp, #28
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	460b      	mov	r3, r1
 800557c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005594:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005596:	78fb      	ldrb	r3, [r7, #3]
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	fa22 f303 	lsr.w	r3, r2, r3
 80055a2:	01db      	lsls	r3, r3, #7
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4013      	ands	r3, r2
 80055be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055c0:	68bb      	ldr	r3, [r7, #8]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f003 0301 	and.w	r3, r3, #1
}
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005604:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005608:	f023 0307 	bic.w	r3, r3, #7
 800560c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800561c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005620:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	460b      	mov	r3, r1
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	333c      	adds	r3, #60	@ 0x3c
 8005646:	3304      	adds	r3, #4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	4a26      	ldr	r2, [pc, #152]	@ (80056e8 <USB_EP0_OutStart+0xb8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d90a      	bls.n	800566a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005660:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005664:	d101      	bne.n	800566a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	e037      	b.n	80056da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005670:	461a      	mov	r2, r3
 8005672:	2300      	movs	r3, #0
 8005674:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005684:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005688:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005698:	f043 0318 	orr.w	r3, r3, #24
 800569c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056ac:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80056b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80056b2:	7afb      	ldrb	r3, [r7, #11]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d10f      	bne.n	80056d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056be:	461a      	mov	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056d2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80056d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	4f54300a 	.word	0x4f54300a

080056ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3301      	adds	r3, #1
 80056fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005704:	d901      	bls.n	800570a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e01b      	b.n	8005742 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	daf2      	bge.n	80056f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f043 0201 	orr.w	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	3301      	adds	r3, #1
 8005726:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800572e:	d901      	bls.n	8005734 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e006      	b.n	8005742 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b01      	cmp	r3, #1
 800573e:	d0f0      	beq.n	8005722 <USB_CoreReset+0x36>

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
	...

08005750 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800575c:	2018      	movs	r0, #24
 800575e:	f002 fcf1 	bl	8008144 <USBD_static_malloc>
 8005762:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d109      	bne.n	800577e <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	32b0      	adds	r2, #176	@ 0xb0
 8005774:	2100      	movs	r1, #0
 8005776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800577a:	2302      	movs	r3, #2
 800577c:	e08a      	b.n	8005894 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	32b0      	adds	r2, #176	@ 0xb0
 8005788:	68f9      	ldr	r1, [r7, #12]
 800578a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	32b0      	adds	r2, #176	@ 0xb0
 8005798:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	7c1b      	ldrb	r3, [r3, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d11b      	bne.n	80057e2 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80057aa:	4b3c      	ldr	r3, [pc, #240]	@ (800589c <USBD_CUSTOM_HID_Init+0x14c>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	f003 020f 	and.w	r2, r3, #15
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	440b      	add	r3, r1
 80057be:	3326      	adds	r3, #38	@ 0x26
 80057c0:	2205      	movs	r2, #5
 80057c2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80057c4:	4b36      	ldr	r3, [pc, #216]	@ (80058a0 <USBD_CUSTOM_HID_Init+0x150>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	f003 020f 	and.w	r2, r3, #15
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80057dc:	2205      	movs	r2, #5
 80057de:	801a      	strh	r2, [r3, #0]
 80057e0:	e01a      	b.n	8005818 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80057e2:	4b2e      	ldr	r3, [pc, #184]	@ (800589c <USBD_CUSTOM_HID_Init+0x14c>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	f003 020f 	and.w	r2, r3, #15
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	4613      	mov	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	440b      	add	r3, r1
 80057f6:	3326      	adds	r3, #38	@ 0x26
 80057f8:	2205      	movs	r2, #5
 80057fa:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80057fc:	4b28      	ldr	r3, [pc, #160]	@ (80058a0 <USBD_CUSTOM_HID_Init+0x150>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	f003 020f 	and.w	r2, r3, #15
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8005814:	2205      	movs	r2, #5
 8005816:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8005818:	4b20      	ldr	r3, [pc, #128]	@ (800589c <USBD_CUSTOM_HID_Init+0x14c>)
 800581a:	7819      	ldrb	r1, [r3, #0]
 800581c:	231e      	movs	r3, #30
 800581e:	2203      	movs	r2, #3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f002 fb30 	bl	8007e86 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8005826:	4b1d      	ldr	r3, [pc, #116]	@ (800589c <USBD_CUSTOM_HID_Init+0x14c>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	f003 020f 	and.w	r2, r3, #15
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	4613      	mov	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	440b      	add	r3, r1
 800583a:	3324      	adds	r3, #36	@ 0x24
 800583c:	2201      	movs	r2, #1
 800583e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8005840:	4b17      	ldr	r3, [pc, #92]	@ (80058a0 <USBD_CUSTOM_HID_Init+0x150>)
 8005842:	7819      	ldrb	r1, [r3, #0]
 8005844:	2302      	movs	r3, #2
 8005846:	2203      	movs	r2, #3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f002 fb1c 	bl	8007e86 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800584e:	4b14      	ldr	r3, [pc, #80]	@ (80058a0 <USBD_CUSTOM_HID_Init+0x150>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	f003 020f 	and.w	r2, r3, #15
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	4613      	mov	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005866:	2201      	movs	r2, #1
 8005868:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	33b0      	adds	r3, #176	@ 0xb0
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005884:	4b06      	ldr	r3, [pc, #24]	@ (80058a0 <USBD_CUSTOM_HID_Init+0x150>)
 8005886:	7819      	ldrb	r1, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	2302      	movs	r3, #2
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f002 fbe9 	bl	8008064 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	20000086 	.word	0x20000086
 80058a0:	20000087 	.word	0x20000087

080058a4 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80058b0:	4b37      	ldr	r3, [pc, #220]	@ (8005990 <USBD_CUSTOM_HID_DeInit+0xec>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	4619      	mov	r1, r3
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f002 fb0b 	bl	8007ed2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80058bc:	4b34      	ldr	r3, [pc, #208]	@ (8005990 <USBD_CUSTOM_HID_DeInit+0xec>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	f003 020f 	and.w	r2, r3, #15
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	440b      	add	r3, r1
 80058d0:	3324      	adds	r3, #36	@ 0x24
 80058d2:	2200      	movs	r2, #0
 80058d4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80058d6:	4b2e      	ldr	r3, [pc, #184]	@ (8005990 <USBD_CUSTOM_HID_DeInit+0xec>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	f003 020f 	and.w	r2, r3, #15
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	440b      	add	r3, r1
 80058ea:	3326      	adds	r3, #38	@ 0x26
 80058ec:	2200      	movs	r2, #0
 80058ee:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80058f0:	4b28      	ldr	r3, [pc, #160]	@ (8005994 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f002 faeb 	bl	8007ed2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80058fc:	4b25      	ldr	r3, [pc, #148]	@ (8005994 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	f003 020f 	and.w	r2, r3, #15
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	440b      	add	r3, r1
 8005910:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005914:	2200      	movs	r2, #0
 8005916:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8005918:	4b1e      	ldr	r3, [pc, #120]	@ (8005994 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	f003 020f 	and.w	r2, r3, #15
 8005920:	6879      	ldr	r1, [r7, #4]
 8005922:	4613      	mov	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	440b      	add	r3, r1
 800592c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8005930:	2200      	movs	r2, #0
 8005932:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	32b0      	adds	r2, #176	@ 0xb0
 800593e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d01f      	beq.n	8005986 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	33b0      	adds	r3, #176	@ 0xb0
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	32b0      	adds	r2, #176	@ 0xb0
 8005964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005968:	4618      	mov	r0, r3
 800596a:	f002 fbf9 	bl	8008160 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	32b0      	adds	r2, #176	@ 0xb0
 8005978:	2100      	movs	r1, #0
 800597a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20000086 	.word	0x20000086
 8005994:	20000087 	.word	0x20000087

08005998 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	32b0      	adds	r2, #176	@ 0xb0
 80059ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	83fb      	strh	r3, [r7, #30]
#warning "USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED not implemented; See original library code"
#endif
#ifdef USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED
#warning "USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED not implemented; See original library code"
#endif
  uint8_t  *pbuf = NULL;
 80059b6:	2300      	movs	r3, #0
 80059b8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e128      	b.n	8005c1e <USBD_CUSTOM_HID_Setup+0x286>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8084 	beq.w	8005ae2 <USBD_CUSTOM_HID_Setup+0x14a>
 80059da:	2b20      	cmp	r3, #32
 80059dc:	f040 8117 	bne.w	8005c0e <USBD_CUSTOM_HID_Setup+0x276>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	785b      	ldrb	r3, [r3, #1]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	2b0a      	cmp	r3, #10
 80059e8:	d872      	bhi.n	8005ad0 <USBD_CUSTOM_HID_Setup+0x138>
 80059ea:	a201      	add	r2, pc, #4	@ (adr r2, 80059f0 <USBD_CUSTOM_HID_Setup+0x58>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a7b 	.word	0x08005a7b
 80059f4:	08005a4d 	.word	0x08005a4d
 80059f8:	08005a2b 	.word	0x08005a2b
 80059fc:	08005ad1 	.word	0x08005ad1
 8005a00:	08005ad1 	.word	0x08005ad1
 8005a04:	08005ad1 	.word	0x08005ad1
 8005a08:	08005ad1 	.word	0x08005ad1
 8005a0c:	08005ad1 	.word	0x08005ad1
 8005a10:	08005a5d 	.word	0x08005a5d
 8005a14:	08005a3b 	.word	0x08005a3b
 8005a18:	08005a1d 	.word	0x08005a1d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	885b      	ldrh	r3, [r3, #2]
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	461a      	mov	r2, r3
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	605a      	str	r2, [r3, #4]
          break;
 8005a28:	e05a      	b.n	8005ae0 <USBD_CUSTOM_HID_Setup+0x148>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	2201      	movs	r2, #1
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f001 fd24 	bl	8007480 <USBD_CtlSendData>
          break;
 8005a38:	e052      	b.n	8005ae0 <USBD_CUSTOM_HID_Setup+0x148>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	885b      	ldrh	r3, [r3, #2]
 8005a3e:	0a1b      	lsrs	r3, r3, #8
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	461a      	mov	r2, r3
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	609a      	str	r2, [r3, #8]
          break;
 8005a4a:	e049      	b.n	8005ae0 <USBD_CUSTOM_HID_Setup+0x148>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	3308      	adds	r3, #8
 8005a50:	2201      	movs	r2, #1
 8005a52:	4619      	mov	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f001 fd13 	bl	8007480 <USBD_CtlSendData>
          break;
 8005a5a:	e041      	b.n	8005ae0 <USBD_CUSTOM_HID_Setup+0x148>

        case CUSTOM_HID_REQ_SET_REPORT:
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005a62:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	88db      	ldrh	r3, [r3, #6]
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	bf28      	it	cs
 8005a6c:	2302      	movcs	r3, #2
 8005a6e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005a70:	461a      	mov	r2, r3
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f001 fd30 	bl	80074d8 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8005a78:	e032      	b.n	8005ae0 <USBD_CUSTOM_HID_Setup+0x148>

        /*
         * Send feature reports to host
         */
        case CUSTOM_HID_REQ_GET_REPORT:
        int FEATURE_REPORT_WVALUE_OFFSET = 0x300;		// High Byte of wValue is report type, Low Byte is report ID (HID 1.11, Section 7.2)
 8005a7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005a7e:	60fb      	str	r3, [r7, #12]
        	if (req->wValue == (FEATURE_REPORT_WVALUE_OFFSET + REPORTID_CAPABILITIES))
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	885b      	ldrh	r3, [r3, #2]
 8005a84:	461a      	mov	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	3302      	adds	r3, #2
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d112      	bne.n	8005ab4 <USBD_CUSTOM_HID_Setup+0x11c>
        	{
        		CapabilitiesReport capabilitiesReport;
        		capabilitiesReport.report_ID = REPORTID_CAPABILITIES;
 8005a8e:	2302      	movs	r3, #2
 8005a90:	723b      	strb	r3, [r7, #8]
        		capabilitiesReport.contact_count_maximum = TP_MAX_CONTACTS;
 8005a92:	7a7b      	ldrb	r3, [r7, #9]
 8005a94:	2205      	movs	r2, #5
 8005a96:	f362 0303 	bfi	r3, r2, #0, #4
 8005a9a:	727b      	strb	r3, [r7, #9]
        		capabilitiesReport.pad_type = TP_PAD_TYPE;
 8005a9c:	7a7b      	ldrb	r3, [r7, #9]
 8005a9e:	f36f 1307 	bfc	r3, #4, #4
 8005aa2:	727b      	strb	r3, [r7, #9]
        		USBD_CtlSendData(pdev, (uint8_t*)&capabilitiesReport, sizeof (CapabilitiesReport));
 8005aa4:	f107 0308 	add.w	r3, r7, #8
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f001 fce7 	bl	8007480 <USBD_CtlSendData>
        	}
        	else if (req->wValue == (FEATURE_REPORT_WVALUE_OFFSET + REPORTID_CERTIFICATION_STATUS)){
        		USBD_CtlSendData(pdev, (uint8_t*)&certification_status_report, sizeof (certification_status_report));
        	}
        	break;
 8005ab2:	e014      	b.n	8005ade <USBD_CUSTOM_HID_Setup+0x146>
        	else if (req->wValue == (FEATURE_REPORT_WVALUE_OFFSET + REPORTID_CERTIFICATION_STATUS)){
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	885b      	ldrh	r3, [r3, #2]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3303      	adds	r3, #3
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d10d      	bne.n	8005ade <USBD_CUSTOM_HID_Setup+0x146>
        		USBD_CtlSendData(pdev, (uint8_t*)&certification_status_report, sizeof (certification_status_report));
 8005ac2:	f240 1201 	movw	r2, #257	@ 0x101
 8005ac6:	4958      	ldr	r1, [pc, #352]	@ (8005c28 <USBD_CUSTOM_HID_Setup+0x290>)
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f001 fcd9 	bl	8007480 <USBD_CtlSendData>
        	break;
 8005ace:	e006      	b.n	8005ade <USBD_CUSTOM_HID_Setup+0x146>
        default:
          USBD_CtlError(pdev, req);
 8005ad0:	6839      	ldr	r1, [r7, #0]
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f001 fc63 	bl	800739e <USBD_CtlError>
          ret = USBD_FAIL;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	75fb      	strb	r3, [r7, #23]
          break;
 8005adc:	e000      	b.n	8005ae0 <USBD_CUSTOM_HID_Setup+0x148>
        	break;
 8005ade:	bf00      	nop
      }
      break;
 8005ae0:	e09c      	b.n	8005c1c <USBD_CUSTOM_HID_Setup+0x284>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	2b0b      	cmp	r3, #11
 8005ae8:	f200 8088 	bhi.w	8005bfc <USBD_CUSTOM_HID_Setup+0x264>
 8005aec:	a201      	add	r2, pc, #4	@ (adr r2, 8005af4 <USBD_CUSTOM_HID_Setup+0x15c>)
 8005aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af2:	bf00      	nop
 8005af4:	08005b25 	.word	0x08005b25
 8005af8:	08005c0b 	.word	0x08005c0b
 8005afc:	08005bfd 	.word	0x08005bfd
 8005b00:	08005bfd 	.word	0x08005bfd
 8005b04:	08005bfd 	.word	0x08005bfd
 8005b08:	08005bfd 	.word	0x08005bfd
 8005b0c:	08005b4f 	.word	0x08005b4f
 8005b10:	08005bfd 	.word	0x08005bfd
 8005b14:	08005bfd 	.word	0x08005bfd
 8005b18:	08005bfd 	.word	0x08005bfd
 8005b1c:	08005bab 	.word	0x08005bab
 8005b20:	08005bd5 	.word	0x08005bd5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d107      	bne.n	8005b40 <USBD_CUSTOM_HID_Setup+0x1a8>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b30:	f107 030a 	add.w	r3, r7, #10
 8005b34:	2202      	movs	r2, #2
 8005b36:	4619      	mov	r1, r3
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f001 fca1 	bl	8007480 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b3e:	e065      	b.n	8005c0c <USBD_CUSTOM_HID_Setup+0x274>
            USBD_CtlError(pdev, req);
 8005b40:	6839      	ldr	r1, [r7, #0]
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f001 fc2b 	bl	800739e <USBD_CtlError>
            ret = USBD_FAIL;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	75fb      	strb	r3, [r7, #23]
          break;
 8005b4c:	e05e      	b.n	8005c0c <USBD_CUSTOM_HID_Setup+0x274>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	885b      	ldrh	r3, [r3, #2]
 8005b52:	0a1b      	lsrs	r3, r3, #8
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	2b22      	cmp	r3, #34	@ 0x22
 8005b58:	d112      	bne.n	8005b80 <USBD_CUSTOM_HID_Setup+0x1e8>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	88db      	ldrh	r3, [r3, #6]
 8005b5e:	f240 2216 	movw	r2, #534	@ 0x216
 8005b62:	4293      	cmp	r3, r2
 8005b64:	bf28      	it	cs
 8005b66:	4613      	movcs	r3, r2
 8005b68:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	33b0      	adds	r3, #176	@ 0xb0
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	e00d      	b.n	8005b9c <USBD_CUSTOM_HID_Setup+0x204>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	885b      	ldrh	r3, [r3, #2]
 8005b84:	0a1b      	lsrs	r3, r3, #8
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	2b21      	cmp	r3, #33	@ 0x21
 8005b8a:	d107      	bne.n	8005b9c <USBD_CUSTOM_HID_Setup+0x204>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005b8c:	4b27      	ldr	r3, [pc, #156]	@ (8005c2c <USBD_CUSTOM_HID_Setup+0x294>)
 8005b8e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	88db      	ldrh	r3, [r3, #6]
 8005b94:	2b09      	cmp	r3, #9
 8005b96:	bf28      	it	cs
 8005b98:	2309      	movcs	r3, #9
 8005b9a:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b9c:	8bfb      	ldrh	r3, [r7, #30]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	69b9      	ldr	r1, [r7, #24]
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f001 fc6c 	bl	8007480 <USBD_CtlSendData>
          break;
 8005ba8:	e030      	b.n	8005c0c <USBD_CUSTOM_HID_Setup+0x274>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d107      	bne.n	8005bc6 <USBD_CUSTOM_HID_Setup+0x22e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	330c      	adds	r3, #12
 8005bba:	2201      	movs	r2, #1
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f001 fc5e 	bl	8007480 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bc4:	e022      	b.n	8005c0c <USBD_CUSTOM_HID_Setup+0x274>
            USBD_CtlError(pdev, req);
 8005bc6:	6839      	ldr	r1, [r7, #0]
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f001 fbe8 	bl	800739e <USBD_CtlError>
            ret = USBD_FAIL;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	75fb      	strb	r3, [r7, #23]
          break;
 8005bd2:	e01b      	b.n	8005c0c <USBD_CUSTOM_HID_Setup+0x274>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d106      	bne.n	8005bee <USBD_CUSTOM_HID_Setup+0x256>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	885b      	ldrh	r3, [r3, #2]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	461a      	mov	r2, r3
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bec:	e00e      	b.n	8005c0c <USBD_CUSTOM_HID_Setup+0x274>
            USBD_CtlError(pdev, req);
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f001 fbd4 	bl	800739e <USBD_CtlError>
            ret = USBD_FAIL;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	75fb      	strb	r3, [r7, #23]
          break;
 8005bfa:	e007      	b.n	8005c0c <USBD_CUSTOM_HID_Setup+0x274>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f001 fbcd 	bl	800739e <USBD_CtlError>
          ret = USBD_FAIL;
 8005c04:	2303      	movs	r3, #3
 8005c06:	75fb      	strb	r3, [r7, #23]
          break;
 8005c08:	e000      	b.n	8005c0c <USBD_CUSTOM_HID_Setup+0x274>
          break;
 8005c0a:	bf00      	nop
      }
      break;
 8005c0c:	e006      	b.n	8005c1c <USBD_CUSTOM_HID_Setup+0x284>

    default:
      USBD_CtlError(pdev, req);
 8005c0e:	6839      	ldr	r1, [r7, #0]
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f001 fbc4 	bl	800739e <USBD_CtlError>
      ret = USBD_FAIL;
 8005c16:	2303      	movs	r3, #3
 8005c18:	75fb      	strb	r3, [r7, #23]
      break;
 8005c1a:	bf00      	nop
  }
  return (uint8_t)ret;
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3720      	adds	r7, #32
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	080082ac 	.word	0x080082ac
 8005c2c:	20000070 	.word	0x20000070

08005c30 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	32b0      	adds	r2, #176	@ 0xb0
 8005c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e017      	b.n	8005c88 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d110      	bne.n	8005c86 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	7d1b      	ldrb	r3, [r3, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8005c72:	4b07      	ldr	r3, [pc, #28]	@ (8005c90 <USBD_CUSTOM_HID_SendReport+0x60>)
 8005c74:	7819      	ldrb	r1, [r3, #0]
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f002 f9d1 	bl	8008022 <USBD_LL_Transmit>
 8005c80:	e001      	b.n	8005c86 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20000086 	.word	0x20000086

08005c94 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005c9c:	2181      	movs	r1, #129	@ 0x81
 8005c9e:	4815      	ldr	r0, [pc, #84]	@ (8005cf4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005ca0:	f000 fd1d 	bl	80066de <USBD_GetEpDesc>
 8005ca4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	4812      	ldr	r0, [pc, #72]	@ (8005cf4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005caa:	f000 fd18 	bl	80066de <USBD_GetEpDesc>
 8005cae:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d009      	beq.n	8005cca <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f042 021e 	orr.w	r2, r2, #30
 8005cbe:	711a      	strb	r2, [r3, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2205      	movs	r2, #5
 8005cc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d009      	beq.n	8005ce4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f042 0202 	orr.w	r2, r2, #2
 8005cd8:	711a      	strb	r2, [r3, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2205      	movs	r2, #5
 8005ce2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2229      	movs	r2, #41	@ 0x29
 8005ce8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005cea:	4b02      	ldr	r3, [pc, #8]	@ (8005cf4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	20000044 	.word	0x20000044

08005cf8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005d00:	2181      	movs	r1, #129	@ 0x81
 8005d02:	4815      	ldr	r0, [pc, #84]	@ (8005d58 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005d04:	f000 fceb 	bl	80066de <USBD_GetEpDesc>
 8005d08:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	4812      	ldr	r0, [pc, #72]	@ (8005d58 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005d0e:	f000 fce6 	bl	80066de <USBD_GetEpDesc>
 8005d12:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d009      	beq.n	8005d2e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f042 021e 	orr.w	r2, r2, #30
 8005d22:	711a      	strb	r2, [r3, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2205      	movs	r2, #5
 8005d2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d009      	beq.n	8005d48 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f042 0202 	orr.w	r2, r2, #2
 8005d3c:	711a      	strb	r2, [r3, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2205      	movs	r2, #5
 8005d46:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2229      	movs	r2, #41	@ 0x29
 8005d4c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005d4e:	4b02      	ldr	r3, [pc, #8]	@ (8005d58 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20000044 	.word	0x20000044

08005d5c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005d64:	2181      	movs	r1, #129	@ 0x81
 8005d66:	4815      	ldr	r0, [pc, #84]	@ (8005dbc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005d68:	f000 fcb9 	bl	80066de <USBD_GetEpDesc>
 8005d6c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005d6e:	2101      	movs	r1, #1
 8005d70:	4812      	ldr	r0, [pc, #72]	@ (8005dbc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005d72:	f000 fcb4 	bl	80066de <USBD_GetEpDesc>
 8005d76:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f042 021e 	orr.w	r2, r2, #30
 8005d86:	711a      	strb	r2, [r3, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2205      	movs	r2, #5
 8005d90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d009      	beq.n	8005dac <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f042 0202 	orr.w	r2, r2, #2
 8005da0:	711a      	strb	r2, [r3, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2205      	movs	r2, #5
 8005daa:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2229      	movs	r2, #41	@ 0x29
 8005db0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005db2:	4b02      	ldr	r3, [pc, #8]	@ (8005dbc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20000044 	.word	0x20000044

08005dc0 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	32b0      	adds	r2, #176	@ 0xb0
 8005dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	32b0      	adds	r2, #176	@ 0xb0
 8005e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e017      	b.n	8005e3e <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	32b0      	adds	r2, #176	@ 0xb0
 8005e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	33b0      	adds	r3, #176	@ 0xb0
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	7810      	ldrb	r0, [r2, #0]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	7852      	ldrb	r2, [r2, #1]
 8005e38:	4611      	mov	r1, r2
 8005e3a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	32b0      	adds	r2, #176	@ 0xb0
 8005e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e00f      	b.n	8005e86 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	32b0      	adds	r2, #176	@ 0xb0
 8005e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e74:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005e76:	4b06      	ldr	r3, [pc, #24]	@ (8005e90 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8005e78:	7819      	ldrb	r1, [r3, #0]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f002 f8f0 	bl	8008064 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000087 	.word	0x20000087

08005e94 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	32b0      	adds	r2, #176	@ 0xb0
 8005ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eaa:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e016      	b.n	8005ee4 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d111      	bne.n	8005ee2 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	33b0      	adds	r3, #176	@ 0xb0
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	7810      	ldrb	r0, [r2, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	7852      	ldrb	r2, [r2, #1]
 8005ed8:	4611      	mov	r1, r2
 8005eda:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	220a      	movs	r2, #10
 8005ef8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005efa:	4b03      	ldr	r3, [pc, #12]	@ (8005f08 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	2000007c 	.word	0x2000007c

08005f0c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e009      	b.n	8005f34 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	33b0      	adds	r3, #176	@ 0xb0
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e01f      	b.n	8005f98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	79fa      	ldrb	r2, [r7, #7]
 8005f8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f001 ff13 	bl	8007db8 <USBD_LL_Init>
 8005f92:	4603      	mov	r3, r0
 8005f94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3718      	adds	r7, #24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e025      	b.n	8006004 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	32ae      	adds	r2, #174	@ 0xae
 8005fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00f      	beq.n	8005ff4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	32ae      	adds	r2, #174	@ 0xae
 8005fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe4:	f107 020e 	add.w	r2, r7, #14
 8005fe8:	4610      	mov	r0, r2
 8005fea:	4798      	blx	r3
 8005fec:	4602      	mov	r2, r0
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f001 ff1b 	bl	8007e50 <USBD_LL_Start>
 800601a:	4603      	mov	r3, r0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800602c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800602e:	4618      	mov	r0, r3
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	460b      	mov	r3, r1
 8006044:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006050:	2b00      	cmp	r3, #0
 8006052:	d009      	beq.n	8006068 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	78fa      	ldrb	r2, [r7, #3]
 800605e:	4611      	mov	r1, r2
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	4798      	blx	r3
 8006064:	4603      	mov	r3, r0
 8006066:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006068:	7bfb      	ldrb	r3, [r7, #15]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	460b      	mov	r3, r1
 800607c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	78fa      	ldrb	r2, [r7, #3]
 800608c:	4611      	mov	r1, r2
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006098:	2303      	movs	r3, #3
 800609a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800609c:	7bfb      	ldrb	r3, [r7, #15]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80060b6:	6839      	ldr	r1, [r7, #0]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f001 f936 	bl	800732a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80060cc:	461a      	mov	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80060da:	f003 031f 	and.w	r3, r3, #31
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d01a      	beq.n	8006118 <USBD_LL_SetupStage+0x72>
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d822      	bhi.n	800612c <USBD_LL_SetupStage+0x86>
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <USBD_LL_SetupStage+0x4a>
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d00a      	beq.n	8006104 <USBD_LL_SetupStage+0x5e>
 80060ee:	e01d      	b.n	800612c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fb63 	bl	80067c4 <USBD_StdDevReq>
 80060fe:	4603      	mov	r3, r0
 8006100:	73fb      	strb	r3, [r7, #15]
      break;
 8006102:	e020      	b.n	8006146 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fbcb 	bl	80068a8 <USBD_StdItfReq>
 8006112:	4603      	mov	r3, r0
 8006114:	73fb      	strb	r3, [r7, #15]
      break;
 8006116:	e016      	b.n	8006146 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fc2d 	bl	8006980 <USBD_StdEPReq>
 8006126:	4603      	mov	r3, r0
 8006128:	73fb      	strb	r3, [r7, #15]
      break;
 800612a:	e00c      	b.n	8006146 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006132:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006136:	b2db      	uxtb	r3, r3
 8006138:	4619      	mov	r1, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f001 fee8 	bl	8007f10 <USBD_LL_StallEP>
 8006140:	4603      	mov	r3, r0
 8006142:	73fb      	strb	r3, [r7, #15]
      break;
 8006144:	bf00      	nop
  }

  return ret;
 8006146:	7bfb      	ldrb	r3, [r7, #15]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	460b      	mov	r3, r1
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006162:	7afb      	ldrb	r3, [r7, #11]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d16e      	bne.n	8006246 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800616e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006176:	2b03      	cmp	r3, #3
 8006178:	f040 8098 	bne.w	80062ac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	429a      	cmp	r2, r3
 8006186:	d913      	bls.n	80061b0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	1ad2      	subs	r2, r2, r3
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	4293      	cmp	r3, r2
 80061a0:	bf28      	it	cs
 80061a2:	4613      	movcs	r3, r2
 80061a4:	461a      	mov	r2, r3
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f001 f9b2 	bl	8007512 <USBD_CtlContinueRx>
 80061ae:	e07d      	b.n	80062ac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80061b6:	f003 031f 	and.w	r3, r3, #31
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d014      	beq.n	80061e8 <USBD_LL_DataOutStage+0x98>
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d81d      	bhi.n	80061fe <USBD_LL_DataOutStage+0xae>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <USBD_LL_DataOutStage+0x7c>
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d003      	beq.n	80061d2 <USBD_LL_DataOutStage+0x82>
 80061ca:	e018      	b.n	80061fe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	75bb      	strb	r3, [r7, #22]
            break;
 80061d0:	e018      	b.n	8006204 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	4619      	mov	r1, r3
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fa64 	bl	80066aa <USBD_CoreFindIF>
 80061e2:	4603      	mov	r3, r0
 80061e4:	75bb      	strb	r3, [r7, #22]
            break;
 80061e6:	e00d      	b.n	8006204 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	4619      	mov	r1, r3
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 fa66 	bl	80066c4 <USBD_CoreFindEP>
 80061f8:	4603      	mov	r3, r0
 80061fa:	75bb      	strb	r3, [r7, #22]
            break;
 80061fc:	e002      	b.n	8006204 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	75bb      	strb	r3, [r7, #22]
            break;
 8006202:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006204:	7dbb      	ldrb	r3, [r7, #22]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d119      	bne.n	800623e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b03      	cmp	r3, #3
 8006214:	d113      	bne.n	800623e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006216:	7dba      	ldrb	r2, [r7, #22]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	32ae      	adds	r2, #174	@ 0xae
 800621c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00b      	beq.n	800623e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006226:	7dba      	ldrb	r2, [r7, #22]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800622e:	7dba      	ldrb	r2, [r7, #22]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	32ae      	adds	r2, #174	@ 0xae
 8006234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f001 f978 	bl	8007534 <USBD_CtlSendStatus>
 8006244:	e032      	b.n	80062ac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006246:	7afb      	ldrb	r3, [r7, #11]
 8006248:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800624c:	b2db      	uxtb	r3, r3
 800624e:	4619      	mov	r1, r3
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 fa37 	bl	80066c4 <USBD_CoreFindEP>
 8006256:	4603      	mov	r3, r0
 8006258:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800625a:	7dbb      	ldrb	r3, [r7, #22]
 800625c:	2bff      	cmp	r3, #255	@ 0xff
 800625e:	d025      	beq.n	80062ac <USBD_LL_DataOutStage+0x15c>
 8006260:	7dbb      	ldrb	r3, [r7, #22]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d122      	bne.n	80062ac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b03      	cmp	r3, #3
 8006270:	d117      	bne.n	80062a2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006272:	7dba      	ldrb	r2, [r7, #22]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	32ae      	adds	r2, #174	@ 0xae
 8006278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00f      	beq.n	80062a2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006282:	7dba      	ldrb	r2, [r7, #22]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800628a:	7dba      	ldrb	r2, [r7, #22]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	32ae      	adds	r2, #174	@ 0xae
 8006290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	7afa      	ldrb	r2, [r7, #11]
 8006298:	4611      	mov	r1, r2
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	4798      	blx	r3
 800629e:	4603      	mov	r3, r0
 80062a0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80062a2:	7dfb      	ldrb	r3, [r7, #23]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80062a8:	7dfb      	ldrb	r3, [r7, #23]
 80062aa:	e000      	b.n	80062ae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b086      	sub	sp, #24
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	460b      	mov	r3, r1
 80062c0:	607a      	str	r2, [r7, #4]
 80062c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80062c4:	7afb      	ldrb	r3, [r7, #11]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d16f      	bne.n	80063aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3314      	adds	r3, #20
 80062ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d15a      	bne.n	8006390 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d914      	bls.n	8006310 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	689a      	ldr	r2, [r3, #8]
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	1ad2      	subs	r2, r2, r3
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	461a      	mov	r2, r3
 80062fa:	6879      	ldr	r1, [r7, #4]
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f001 f8da 	bl	80074b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006302:	2300      	movs	r3, #0
 8006304:	2200      	movs	r2, #0
 8006306:	2100      	movs	r1, #0
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f001 feab 	bl	8008064 <USBD_LL_PrepareReceive>
 800630e:	e03f      	b.n	8006390 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	429a      	cmp	r2, r3
 800631a:	d11c      	bne.n	8006356 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006324:	429a      	cmp	r2, r3
 8006326:	d316      	bcc.n	8006356 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006332:	429a      	cmp	r2, r3
 8006334:	d20f      	bcs.n	8006356 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006336:	2200      	movs	r2, #0
 8006338:	2100      	movs	r1, #0
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f001 f8bb 	bl	80074b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006348:	2300      	movs	r3, #0
 800634a:	2200      	movs	r2, #0
 800634c:	2100      	movs	r1, #0
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f001 fe88 	bl	8008064 <USBD_LL_PrepareReceive>
 8006354:	e01c      	b.n	8006390 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b03      	cmp	r3, #3
 8006360:	d10f      	bne.n	8006382 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006382:	2180      	movs	r1, #128	@ 0x80
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f001 fdc3 	bl	8007f10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f001 f8e5 	bl	800755a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d03a      	beq.n	8006410 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f7ff fe42 	bl	8006024 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80063a8:	e032      	b.n	8006410 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80063aa:	7afb      	ldrb	r3, [r7, #11]
 80063ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	4619      	mov	r1, r3
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 f985 	bl	80066c4 <USBD_CoreFindEP>
 80063ba:	4603      	mov	r3, r0
 80063bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063be:	7dfb      	ldrb	r3, [r7, #23]
 80063c0:	2bff      	cmp	r3, #255	@ 0xff
 80063c2:	d025      	beq.n	8006410 <USBD_LL_DataInStage+0x15a>
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d122      	bne.n	8006410 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d11c      	bne.n	8006410 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80063d6:	7dfa      	ldrb	r2, [r7, #23]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	32ae      	adds	r2, #174	@ 0xae
 80063dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d014      	beq.n	8006410 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80063e6:	7dfa      	ldrb	r2, [r7, #23]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80063ee:	7dfa      	ldrb	r2, [r7, #23]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	32ae      	adds	r2, #174	@ 0xae
 80063f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	7afa      	ldrb	r2, [r7, #11]
 80063fc:	4611      	mov	r1, r2
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	4798      	blx	r3
 8006402:	4603      	mov	r3, r0
 8006404:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006406:	7dbb      	ldrb	r3, [r7, #22]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800640c:	7dbb      	ldrb	r3, [r7, #22]
 800640e:	e000      	b.n	8006412 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b084      	sub	sp, #16
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d014      	beq.n	8006480 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00e      	beq.n	8006480 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6852      	ldr	r2, [r2, #4]
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	4611      	mov	r1, r2
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	4798      	blx	r3
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800647c:	2303      	movs	r3, #3
 800647e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006480:	2340      	movs	r3, #64	@ 0x40
 8006482:	2200      	movs	r2, #0
 8006484:	2100      	movs	r1, #0
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f001 fcfd 	bl	8007e86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2240      	movs	r2, #64	@ 0x40
 8006498:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800649c:	2340      	movs	r3, #64	@ 0x40
 800649e:	2200      	movs	r2, #0
 80064a0:	2180      	movs	r1, #128	@ 0x80
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f001 fcef 	bl	8007e86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2240      	movs	r2, #64	@ 0x40
 80064b2:	621a      	str	r2, [r3, #32]

  return ret;
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	78fa      	ldrb	r2, [r7, #3]
 80064ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d006      	beq.n	8006500 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2204      	movs	r2, #4
 8006504:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b04      	cmp	r3, #4
 8006528:	d106      	bne.n	8006538 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006530:	b2da      	uxtb	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b03      	cmp	r3, #3
 8006558:	d110      	bne.n	800657c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00b      	beq.n	800657c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d005      	beq.n	800657c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b082      	sub	sp, #8
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	460b      	mov	r3, r1
 8006590:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	32ae      	adds	r2, #174	@ 0xae
 800659c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e01c      	b.n	80065e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d115      	bne.n	80065e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	32ae      	adds	r2, #174	@ 0xae
 80065be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00b      	beq.n	80065e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	32ae      	adds	r2, #174	@ 0xae
 80065d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	78fa      	ldrb	r2, [r7, #3]
 80065da:	4611      	mov	r1, r2
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b082      	sub	sp, #8
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	460b      	mov	r3, r1
 80065f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	32ae      	adds	r2, #174	@ 0xae
 8006600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006608:	2303      	movs	r3, #3
 800660a:	e01c      	b.n	8006646 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b03      	cmp	r3, #3
 8006616:	d115      	bne.n	8006644 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	32ae      	adds	r2, #174	@ 0xae
 8006622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00b      	beq.n	8006644 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	32ae      	adds	r2, #174	@ 0xae
 8006636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663c:	78fa      	ldrb	r2, [r7, #3]
 800663e:	4611      	mov	r1, r2
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00e      	beq.n	80066a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6852      	ldr	r2, [r2, #4]
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	4611      	mov	r1, r2
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	4798      	blx	r3
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800669c:	2303      	movs	r3, #3
 800669e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	460b      	mov	r3, r1
 80066b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80066b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80066d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b086      	sub	sp, #24
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	460b      	mov	r3, r1
 80066e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	885b      	ldrh	r3, [r3, #2]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	7812      	ldrb	r2, [r2, #0]
 8006700:	4293      	cmp	r3, r2
 8006702:	d91f      	bls.n	8006744 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800670a:	e013      	b.n	8006734 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800670c:	f107 030a 	add.w	r3, r7, #10
 8006710:	4619      	mov	r1, r3
 8006712:	6978      	ldr	r0, [r7, #20]
 8006714:	f000 f81b 	bl	800674e <USBD_GetNextDesc>
 8006718:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	785b      	ldrb	r3, [r3, #1]
 800671e:	2b05      	cmp	r3, #5
 8006720:	d108      	bne.n	8006734 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	789b      	ldrb	r3, [r3, #2]
 800672a:	78fa      	ldrb	r2, [r7, #3]
 800672c:	429a      	cmp	r2, r3
 800672e:	d008      	beq.n	8006742 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006730:	2300      	movs	r3, #0
 8006732:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	885b      	ldrh	r3, [r3, #2]
 8006738:	b29a      	uxth	r2, r3
 800673a:	897b      	ldrh	r3, [r7, #10]
 800673c:	429a      	cmp	r2, r3
 800673e:	d8e5      	bhi.n	800670c <USBD_GetEpDesc+0x2e>
 8006740:	e000      	b.n	8006744 <USBD_GetEpDesc+0x66>
          break;
 8006742:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006744:	693b      	ldr	r3, [r7, #16]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800674e:	b480      	push	{r7}
 8006750:	b085      	sub	sp, #20
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	7812      	ldrb	r2, [r2, #0]
 8006764:	4413      	add	r3, r2
 8006766:	b29a      	uxth	r2, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	461a      	mov	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4413      	add	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006778:	68fb      	ldr	r3, [r7, #12]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006786:	b480      	push	{r7}
 8006788:	b087      	sub	sp, #28
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	3301      	adds	r3, #1
 800679c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80067a4:	8a3b      	ldrh	r3, [r7, #16]
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	b21a      	sxth	r2, r3
 80067aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	b21b      	sxth	r3, r3
 80067b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80067b4:	89fb      	ldrh	r3, [r7, #14]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
	...

080067c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80067da:	2b40      	cmp	r3, #64	@ 0x40
 80067dc:	d005      	beq.n	80067ea <USBD_StdDevReq+0x26>
 80067de:	2b40      	cmp	r3, #64	@ 0x40
 80067e0:	d857      	bhi.n	8006892 <USBD_StdDevReq+0xce>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00f      	beq.n	8006806 <USBD_StdDevReq+0x42>
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	d153      	bne.n	8006892 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	32ae      	adds	r2, #174	@ 0xae
 80067f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	4798      	blx	r3
 8006800:	4603      	mov	r3, r0
 8006802:	73fb      	strb	r3, [r7, #15]
      break;
 8006804:	e04a      	b.n	800689c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	785b      	ldrb	r3, [r3, #1]
 800680a:	2b09      	cmp	r3, #9
 800680c:	d83b      	bhi.n	8006886 <USBD_StdDevReq+0xc2>
 800680e:	a201      	add	r2, pc, #4	@ (adr r2, 8006814 <USBD_StdDevReq+0x50>)
 8006810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006814:	08006869 	.word	0x08006869
 8006818:	0800687d 	.word	0x0800687d
 800681c:	08006887 	.word	0x08006887
 8006820:	08006873 	.word	0x08006873
 8006824:	08006887 	.word	0x08006887
 8006828:	08006847 	.word	0x08006847
 800682c:	0800683d 	.word	0x0800683d
 8006830:	08006887 	.word	0x08006887
 8006834:	0800685f 	.word	0x0800685f
 8006838:	08006851 	.word	0x08006851
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fa3c 	bl	8006cbc <USBD_GetDescriptor>
          break;
 8006844:	e024      	b.n	8006890 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fbcb 	bl	8006fe4 <USBD_SetAddress>
          break;
 800684e:	e01f      	b.n	8006890 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fc0a 	bl	800706c <USBD_SetConfig>
 8006858:	4603      	mov	r3, r0
 800685a:	73fb      	strb	r3, [r7, #15]
          break;
 800685c:	e018      	b.n	8006890 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fcad 	bl	80071c0 <USBD_GetConfig>
          break;
 8006866:	e013      	b.n	8006890 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fcde 	bl	800722c <USBD_GetStatus>
          break;
 8006870:	e00e      	b.n	8006890 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fd0d 	bl	8007294 <USBD_SetFeature>
          break;
 800687a:	e009      	b.n	8006890 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fd31 	bl	80072e6 <USBD_ClrFeature>
          break;
 8006884:	e004      	b.n	8006890 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fd88 	bl	800739e <USBD_CtlError>
          break;
 800688e:	bf00      	nop
      }
      break;
 8006890:	e004      	b.n	800689c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fd82 	bl	800739e <USBD_CtlError>
      break;
 800689a:	bf00      	nop
  }

  return ret;
 800689c:	7bfb      	ldrb	r3, [r7, #15]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop

080068a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068be:	2b40      	cmp	r3, #64	@ 0x40
 80068c0:	d005      	beq.n	80068ce <USBD_StdItfReq+0x26>
 80068c2:	2b40      	cmp	r3, #64	@ 0x40
 80068c4:	d852      	bhi.n	800696c <USBD_StdItfReq+0xc4>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <USBD_StdItfReq+0x26>
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	d14e      	bne.n	800696c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d840      	bhi.n	800695e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	889b      	ldrh	r3, [r3, #4]
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d836      	bhi.n	8006954 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	889b      	ldrh	r3, [r3, #4]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7ff fedb 	bl	80066aa <USBD_CoreFindIF>
 80068f4:	4603      	mov	r3, r0
 80068f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
 80068fa:	2bff      	cmp	r3, #255	@ 0xff
 80068fc:	d01d      	beq.n	800693a <USBD_StdItfReq+0x92>
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d11a      	bne.n	800693a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006904:	7bba      	ldrb	r2, [r7, #14]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	32ae      	adds	r2, #174	@ 0xae
 800690a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00f      	beq.n	8006934 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006914:	7bba      	ldrb	r2, [r7, #14]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800691c:	7bba      	ldrb	r2, [r7, #14]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	32ae      	adds	r2, #174	@ 0xae
 8006922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	4798      	blx	r3
 800692e:	4603      	mov	r3, r0
 8006930:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006932:	e004      	b.n	800693e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006934:	2303      	movs	r3, #3
 8006936:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006938:	e001      	b.n	800693e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800693a:	2303      	movs	r3, #3
 800693c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	88db      	ldrh	r3, [r3, #6]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d110      	bne.n	8006968 <USBD_StdItfReq+0xc0>
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10d      	bne.n	8006968 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fdf1 	bl	8007534 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006952:	e009      	b.n	8006968 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fd21 	bl	800739e <USBD_CtlError>
          break;
 800695c:	e004      	b.n	8006968 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fd1c 	bl	800739e <USBD_CtlError>
          break;
 8006966:	e000      	b.n	800696a <USBD_StdItfReq+0xc2>
          break;
 8006968:	bf00      	nop
      }
      break;
 800696a:	e004      	b.n	8006976 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fd15 	bl	800739e <USBD_CtlError>
      break;
 8006974:	bf00      	nop
  }

  return ret;
 8006976:	7bfb      	ldrb	r3, [r7, #15]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	889b      	ldrh	r3, [r3, #4]
 8006992:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800699c:	2b40      	cmp	r3, #64	@ 0x40
 800699e:	d007      	beq.n	80069b0 <USBD_StdEPReq+0x30>
 80069a0:	2b40      	cmp	r3, #64	@ 0x40
 80069a2:	f200 817f 	bhi.w	8006ca4 <USBD_StdEPReq+0x324>
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d02a      	beq.n	8006a00 <USBD_StdEPReq+0x80>
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	f040 817a 	bne.w	8006ca4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff fe85 	bl	80066c4 <USBD_CoreFindEP>
 80069ba:	4603      	mov	r3, r0
 80069bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069be:	7b7b      	ldrb	r3, [r7, #13]
 80069c0:	2bff      	cmp	r3, #255	@ 0xff
 80069c2:	f000 8174 	beq.w	8006cae <USBD_StdEPReq+0x32e>
 80069c6:	7b7b      	ldrb	r3, [r7, #13]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f040 8170 	bne.w	8006cae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80069ce:	7b7a      	ldrb	r2, [r7, #13]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80069d6:	7b7a      	ldrb	r2, [r7, #13]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	32ae      	adds	r2, #174	@ 0xae
 80069dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 8163 	beq.w	8006cae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80069e8:	7b7a      	ldrb	r2, [r7, #13]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	32ae      	adds	r2, #174	@ 0xae
 80069ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	4798      	blx	r3
 80069fa:	4603      	mov	r3, r0
 80069fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069fe:	e156      	b.n	8006cae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d008      	beq.n	8006a1a <USBD_StdEPReq+0x9a>
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	f300 8145 	bgt.w	8006c98 <USBD_StdEPReq+0x318>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 809b 	beq.w	8006b4a <USBD_StdEPReq+0x1ca>
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d03c      	beq.n	8006a92 <USBD_StdEPReq+0x112>
 8006a18:	e13e      	b.n	8006c98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d002      	beq.n	8006a2c <USBD_StdEPReq+0xac>
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d016      	beq.n	8006a58 <USBD_StdEPReq+0xd8>
 8006a2a:	e02c      	b.n	8006a86 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a2c:	7bbb      	ldrb	r3, [r7, #14]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00d      	beq.n	8006a4e <USBD_StdEPReq+0xce>
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	2b80      	cmp	r3, #128	@ 0x80
 8006a36:	d00a      	beq.n	8006a4e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 fa67 	bl	8007f10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a42:	2180      	movs	r1, #128	@ 0x80
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f001 fa63 	bl	8007f10 <USBD_LL_StallEP>
 8006a4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a4c:	e020      	b.n	8006a90 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fca4 	bl	800739e <USBD_CtlError>
              break;
 8006a56:	e01b      	b.n	8006a90 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	885b      	ldrh	r3, [r3, #2]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10e      	bne.n	8006a7e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a60:	7bbb      	ldrb	r3, [r7, #14]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00b      	beq.n	8006a7e <USBD_StdEPReq+0xfe>
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	2b80      	cmp	r3, #128	@ 0x80
 8006a6a:	d008      	beq.n	8006a7e <USBD_StdEPReq+0xfe>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	88db      	ldrh	r3, [r3, #6]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d104      	bne.n	8006a7e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a74:	7bbb      	ldrb	r3, [r7, #14]
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 fa49 	bl	8007f10 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fd58 	bl	8007534 <USBD_CtlSendStatus>

              break;
 8006a84:	e004      	b.n	8006a90 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fc88 	bl	800739e <USBD_CtlError>
              break;
 8006a8e:	bf00      	nop
          }
          break;
 8006a90:	e107      	b.n	8006ca2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d002      	beq.n	8006aa4 <USBD_StdEPReq+0x124>
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d016      	beq.n	8006ad0 <USBD_StdEPReq+0x150>
 8006aa2:	e04b      	b.n	8006b3c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aa4:	7bbb      	ldrb	r3, [r7, #14]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00d      	beq.n	8006ac6 <USBD_StdEPReq+0x146>
 8006aaa:	7bbb      	ldrb	r3, [r7, #14]
 8006aac:	2b80      	cmp	r3, #128	@ 0x80
 8006aae:	d00a      	beq.n	8006ac6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ab0:	7bbb      	ldrb	r3, [r7, #14]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 fa2b 	bl	8007f10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006aba:	2180      	movs	r1, #128	@ 0x80
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 fa27 	bl	8007f10 <USBD_LL_StallEP>
 8006ac2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ac4:	e040      	b.n	8006b48 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fc68 	bl	800739e <USBD_CtlError>
              break;
 8006ace:	e03b      	b.n	8006b48 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	885b      	ldrh	r3, [r3, #2]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d136      	bne.n	8006b46 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ad8:	7bbb      	ldrb	r3, [r7, #14]
 8006ada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d004      	beq.n	8006aec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 fa31 	bl	8007f4e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fd21 	bl	8007534 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006af2:	7bbb      	ldrb	r3, [r7, #14]
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff fde4 	bl	80066c4 <USBD_CoreFindEP>
 8006afc:	4603      	mov	r3, r0
 8006afe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b00:	7b7b      	ldrb	r3, [r7, #13]
 8006b02:	2bff      	cmp	r3, #255	@ 0xff
 8006b04:	d01f      	beq.n	8006b46 <USBD_StdEPReq+0x1c6>
 8006b06:	7b7b      	ldrb	r3, [r7, #13]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d11c      	bne.n	8006b46 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006b0c:	7b7a      	ldrb	r2, [r7, #13]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006b14:	7b7a      	ldrb	r2, [r7, #13]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	32ae      	adds	r2, #174	@ 0xae
 8006b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d010      	beq.n	8006b46 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b24:	7b7a      	ldrb	r2, [r7, #13]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	32ae      	adds	r2, #174	@ 0xae
 8006b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	4798      	blx	r3
 8006b36:	4603      	mov	r3, r0
 8006b38:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006b3a:	e004      	b.n	8006b46 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fc2d 	bl	800739e <USBD_CtlError>
              break;
 8006b44:	e000      	b.n	8006b48 <USBD_StdEPReq+0x1c8>
              break;
 8006b46:	bf00      	nop
          }
          break;
 8006b48:	e0ab      	b.n	8006ca2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d002      	beq.n	8006b5c <USBD_StdEPReq+0x1dc>
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d032      	beq.n	8006bc0 <USBD_StdEPReq+0x240>
 8006b5a:	e097      	b.n	8006c8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d007      	beq.n	8006b72 <USBD_StdEPReq+0x1f2>
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	2b80      	cmp	r3, #128	@ 0x80
 8006b66:	d004      	beq.n	8006b72 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fc17 	bl	800739e <USBD_CtlError>
                break;
 8006b70:	e091      	b.n	8006c96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	da0b      	bge.n	8006b92 <USBD_StdEPReq+0x212>
 8006b7a:	7bbb      	ldrb	r3, [r7, #14]
 8006b7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	3310      	adds	r3, #16
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	3304      	adds	r3, #4
 8006b90:	e00b      	b.n	8006baa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b92:	7bbb      	ldrb	r3, [r7, #14]
 8006b94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	3304      	adds	r3, #4
 8006baa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fc61 	bl	8007480 <USBD_CtlSendData>
              break;
 8006bbe:	e06a      	b.n	8006c96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006bc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	da11      	bge.n	8006bec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006bc8:	7bbb      	ldrb	r3, [r7, #14]
 8006bca:	f003 020f 	and.w	r2, r3, #15
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	440b      	add	r3, r1
 8006bda:	3324      	adds	r3, #36	@ 0x24
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d117      	bne.n	8006c12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fbda 	bl	800739e <USBD_CtlError>
                  break;
 8006bea:	e054      	b.n	8006c96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
 8006bee:	f003 020f 	and.w	r2, r3, #15
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	440b      	add	r3, r1
 8006bfe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fbc7 	bl	800739e <USBD_CtlError>
                  break;
 8006c10:	e041      	b.n	8006c96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	da0b      	bge.n	8006c32 <USBD_StdEPReq+0x2b2>
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	3310      	adds	r3, #16
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	3304      	adds	r3, #4
 8006c30:	e00b      	b.n	8006c4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c32:	7bbb      	ldrb	r3, [r7, #14]
 8006c34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	4413      	add	r3, r2
 8006c48:	3304      	adds	r3, #4
 8006c4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c4c:	7bbb      	ldrb	r3, [r7, #14]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d002      	beq.n	8006c58 <USBD_StdEPReq+0x2d8>
 8006c52:	7bbb      	ldrb	r3, [r7, #14]
 8006c54:	2b80      	cmp	r3, #128	@ 0x80
 8006c56:	d103      	bne.n	8006c60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	e00e      	b.n	8006c7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 f991 	bl	8007f8c <USBD_LL_IsStallEP>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2201      	movs	r2, #1
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	e002      	b.n	8006c7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2202      	movs	r2, #2
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fbfb 	bl	8007480 <USBD_CtlSendData>
              break;
 8006c8a:	e004      	b.n	8006c96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fb85 	bl	800739e <USBD_CtlError>
              break;
 8006c94:	bf00      	nop
          }
          break;
 8006c96:	e004      	b.n	8006ca2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fb7f 	bl	800739e <USBD_CtlError>
          break;
 8006ca0:	bf00      	nop
      }
      break;
 8006ca2:	e005      	b.n	8006cb0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fb79 	bl	800739e <USBD_CtlError>
      break;
 8006cac:	e000      	b.n	8006cb0 <USBD_StdEPReq+0x330>
      break;
 8006cae:	bf00      	nop
  }

  return ret;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	885b      	ldrh	r3, [r3, #2]
 8006cd6:	0a1b      	lsrs	r3, r3, #8
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	2b0e      	cmp	r3, #14
 8006cde:	f200 8152 	bhi.w	8006f86 <USBD_GetDescriptor+0x2ca>
 8006ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce8 <USBD_GetDescriptor+0x2c>)
 8006ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce8:	08006d59 	.word	0x08006d59
 8006cec:	08006d71 	.word	0x08006d71
 8006cf0:	08006db1 	.word	0x08006db1
 8006cf4:	08006f87 	.word	0x08006f87
 8006cf8:	08006f87 	.word	0x08006f87
 8006cfc:	08006f27 	.word	0x08006f27
 8006d00:	08006f53 	.word	0x08006f53
 8006d04:	08006f87 	.word	0x08006f87
 8006d08:	08006f87 	.word	0x08006f87
 8006d0c:	08006f87 	.word	0x08006f87
 8006d10:	08006f87 	.word	0x08006f87
 8006d14:	08006f87 	.word	0x08006f87
 8006d18:	08006f87 	.word	0x08006f87
 8006d1c:	08006f87 	.word	0x08006f87
 8006d20:	08006d25 	.word	0x08006d25
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00b      	beq.n	8006d48 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	7c12      	ldrb	r2, [r2, #16]
 8006d3c:	f107 0108 	add.w	r1, r7, #8
 8006d40:	4610      	mov	r0, r2
 8006d42:	4798      	blx	r3
 8006d44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d46:	e126      	b.n	8006f96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fb27 	bl	800739e <USBD_CtlError>
        err++;
 8006d50:	7afb      	ldrb	r3, [r7, #11]
 8006d52:	3301      	adds	r3, #1
 8006d54:	72fb      	strb	r3, [r7, #11]
      break;
 8006d56:	e11e      	b.n	8006f96 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	7c12      	ldrb	r2, [r2, #16]
 8006d64:	f107 0108 	add.w	r1, r7, #8
 8006d68:	4610      	mov	r0, r2
 8006d6a:	4798      	blx	r3
 8006d6c:	60f8      	str	r0, [r7, #12]
      break;
 8006d6e:	e112      	b.n	8006f96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	7c1b      	ldrb	r3, [r3, #16]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10d      	bne.n	8006d94 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d80:	f107 0208 	add.w	r2, r7, #8
 8006d84:	4610      	mov	r0, r2
 8006d86:	4798      	blx	r3
 8006d88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	2202      	movs	r2, #2
 8006d90:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d92:	e100      	b.n	8006f96 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9c:	f107 0208 	add.w	r2, r7, #8
 8006da0:	4610      	mov	r0, r2
 8006da2:	4798      	blx	r3
 8006da4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3301      	adds	r3, #1
 8006daa:	2202      	movs	r2, #2
 8006dac:	701a      	strb	r2, [r3, #0]
      break;
 8006dae:	e0f2      	b.n	8006f96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	885b      	ldrh	r3, [r3, #2]
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b05      	cmp	r3, #5
 8006db8:	f200 80ac 	bhi.w	8006f14 <USBD_GetDescriptor+0x258>
 8006dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc4 <USBD_GetDescriptor+0x108>)
 8006dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc2:	bf00      	nop
 8006dc4:	08006ddd 	.word	0x08006ddd
 8006dc8:	08006e11 	.word	0x08006e11
 8006dcc:	08006e45 	.word	0x08006e45
 8006dd0:	08006e79 	.word	0x08006e79
 8006dd4:	08006ead 	.word	0x08006ead
 8006dd8:	08006ee1 	.word	0x08006ee1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00b      	beq.n	8006e00 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	7c12      	ldrb	r2, [r2, #16]
 8006df4:	f107 0108 	add.w	r1, r7, #8
 8006df8:	4610      	mov	r0, r2
 8006dfa:	4798      	blx	r3
 8006dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dfe:	e091      	b.n	8006f24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 facb 	bl	800739e <USBD_CtlError>
            err++;
 8006e08:	7afb      	ldrb	r3, [r7, #11]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e0e:	e089      	b.n	8006f24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00b      	beq.n	8006e34 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	7c12      	ldrb	r2, [r2, #16]
 8006e28:	f107 0108 	add.w	r1, r7, #8
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	4798      	blx	r3
 8006e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e32:	e077      	b.n	8006f24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fab1 	bl	800739e <USBD_CtlError>
            err++;
 8006e3c:	7afb      	ldrb	r3, [r7, #11]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	72fb      	strb	r3, [r7, #11]
          break;
 8006e42:	e06f      	b.n	8006f24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00b      	beq.n	8006e68 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	7c12      	ldrb	r2, [r2, #16]
 8006e5c:	f107 0108 	add.w	r1, r7, #8
 8006e60:	4610      	mov	r0, r2
 8006e62:	4798      	blx	r3
 8006e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e66:	e05d      	b.n	8006f24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa97 	bl	800739e <USBD_CtlError>
            err++;
 8006e70:	7afb      	ldrb	r3, [r7, #11]
 8006e72:	3301      	adds	r3, #1
 8006e74:	72fb      	strb	r3, [r7, #11]
          break;
 8006e76:	e055      	b.n	8006f24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00b      	beq.n	8006e9c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	7c12      	ldrb	r2, [r2, #16]
 8006e90:	f107 0108 	add.w	r1, r7, #8
 8006e94:	4610      	mov	r0, r2
 8006e96:	4798      	blx	r3
 8006e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e9a:	e043      	b.n	8006f24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fa7d 	bl	800739e <USBD_CtlError>
            err++;
 8006ea4:	7afb      	ldrb	r3, [r7, #11]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eaa:	e03b      	b.n	8006f24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00b      	beq.n	8006ed0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	7c12      	ldrb	r2, [r2, #16]
 8006ec4:	f107 0108 	add.w	r1, r7, #8
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4798      	blx	r3
 8006ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ece:	e029      	b.n	8006f24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa63 	bl	800739e <USBD_CtlError>
            err++;
 8006ed8:	7afb      	ldrb	r3, [r7, #11]
 8006eda:	3301      	adds	r3, #1
 8006edc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ede:	e021      	b.n	8006f24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00b      	beq.n	8006f04 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	7c12      	ldrb	r2, [r2, #16]
 8006ef8:	f107 0108 	add.w	r1, r7, #8
 8006efc:	4610      	mov	r0, r2
 8006efe:	4798      	blx	r3
 8006f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f02:	e00f      	b.n	8006f24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fa49 	bl	800739e <USBD_CtlError>
            err++;
 8006f0c:	7afb      	ldrb	r3, [r7, #11]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	72fb      	strb	r3, [r7, #11]
          break;
 8006f12:	e007      	b.n	8006f24 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fa41 	bl	800739e <USBD_CtlError>
          err++;
 8006f1c:	7afb      	ldrb	r3, [r7, #11]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006f22:	bf00      	nop
      }
      break;
 8006f24:	e037      	b.n	8006f96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	7c1b      	ldrb	r3, [r3, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d109      	bne.n	8006f42 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f36:	f107 0208 	add.w	r2, r7, #8
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	4798      	blx	r3
 8006f3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f40:	e029      	b.n	8006f96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fa2a 	bl	800739e <USBD_CtlError>
        err++;
 8006f4a:	7afb      	ldrb	r3, [r7, #11]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	72fb      	strb	r3, [r7, #11]
      break;
 8006f50:	e021      	b.n	8006f96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	7c1b      	ldrb	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10d      	bne.n	8006f76 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f62:	f107 0208 	add.w	r2, r7, #8
 8006f66:	4610      	mov	r0, r2
 8006f68:	4798      	blx	r3
 8006f6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	2207      	movs	r2, #7
 8006f72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f74:	e00f      	b.n	8006f96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fa10 	bl	800739e <USBD_CtlError>
        err++;
 8006f7e:	7afb      	ldrb	r3, [r7, #11]
 8006f80:	3301      	adds	r3, #1
 8006f82:	72fb      	strb	r3, [r7, #11]
      break;
 8006f84:	e007      	b.n	8006f96 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fa08 	bl	800739e <USBD_CtlError>
      err++;
 8006f8e:	7afb      	ldrb	r3, [r7, #11]
 8006f90:	3301      	adds	r3, #1
 8006f92:	72fb      	strb	r3, [r7, #11]
      break;
 8006f94:	bf00      	nop
  }

  if (err != 0U)
 8006f96:	7afb      	ldrb	r3, [r7, #11]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d11e      	bne.n	8006fda <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	88db      	ldrh	r3, [r3, #6]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d016      	beq.n	8006fd2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006fa4:	893b      	ldrh	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00e      	beq.n	8006fc8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	88da      	ldrh	r2, [r3, #6]
 8006fae:	893b      	ldrh	r3, [r7, #8]
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	bf28      	it	cs
 8006fb4:	4613      	movcs	r3, r2
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fba:	893b      	ldrh	r3, [r7, #8]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	68f9      	ldr	r1, [r7, #12]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fa5d 	bl	8007480 <USBD_CtlSendData>
 8006fc6:	e009      	b.n	8006fdc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f9e7 	bl	800739e <USBD_CtlError>
 8006fd0:	e004      	b.n	8006fdc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 faae 	bl	8007534 <USBD_CtlSendStatus>
 8006fd8:	e000      	b.n	8006fdc <USBD_GetDescriptor+0x320>
    return;
 8006fda:	bf00      	nop
  }
}
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop

08006fe4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	889b      	ldrh	r3, [r3, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d131      	bne.n	800705a <USBD_SetAddress+0x76>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	88db      	ldrh	r3, [r3, #6]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d12d      	bne.n	800705a <USBD_SetAddress+0x76>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	885b      	ldrh	r3, [r3, #2]
 8007002:	2b7f      	cmp	r3, #127	@ 0x7f
 8007004:	d829      	bhi.n	800705a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	885b      	ldrh	r3, [r3, #2]
 800700a:	b2db      	uxtb	r3, r3
 800700c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007010:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b03      	cmp	r3, #3
 800701c:	d104      	bne.n	8007028 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f9bc 	bl	800739e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007026:	e01d      	b.n	8007064 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	7bfa      	ldrb	r2, [r7, #15]
 800702c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 ffd5 	bl	8007fe4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fa7a 	bl	8007534 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007040:	7bfb      	ldrb	r3, [r7, #15]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d004      	beq.n	8007050 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2202      	movs	r2, #2
 800704a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704e:	e009      	b.n	8007064 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007058:	e004      	b.n	8007064 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f99e 	bl	800739e <USBD_CtlError>
  }
}
 8007062:	bf00      	nop
 8007064:	bf00      	nop
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	885b      	ldrh	r3, [r3, #2]
 800707e:	b2da      	uxtb	r2, r3
 8007080:	4b4e      	ldr	r3, [pc, #312]	@ (80071bc <USBD_SetConfig+0x150>)
 8007082:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007084:	4b4d      	ldr	r3, [pc, #308]	@ (80071bc <USBD_SetConfig+0x150>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d905      	bls.n	8007098 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f985 	bl	800739e <USBD_CtlError>
    return USBD_FAIL;
 8007094:	2303      	movs	r3, #3
 8007096:	e08c      	b.n	80071b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d002      	beq.n	80070aa <USBD_SetConfig+0x3e>
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	d029      	beq.n	80070fc <USBD_SetConfig+0x90>
 80070a8:	e075      	b.n	8007196 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80070aa:	4b44      	ldr	r3, [pc, #272]	@ (80071bc <USBD_SetConfig+0x150>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d020      	beq.n	80070f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80070b2:	4b42      	ldr	r3, [pc, #264]	@ (80071bc <USBD_SetConfig+0x150>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070bc:	4b3f      	ldr	r3, [pc, #252]	@ (80071bc <USBD_SetConfig+0x150>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7fe ffb9 	bl	800603a <USBD_SetClassConfig>
 80070c8:	4603      	mov	r3, r0
 80070ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d008      	beq.n	80070e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f962 	bl	800739e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2202      	movs	r2, #2
 80070de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070e2:	e065      	b.n	80071b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fa25 	bl	8007534 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2203      	movs	r2, #3
 80070ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80070f2:	e05d      	b.n	80071b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fa1d 	bl	8007534 <USBD_CtlSendStatus>
      break;
 80070fa:	e059      	b.n	80071b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80070fc:	4b2f      	ldr	r3, [pc, #188]	@ (80071bc <USBD_SetConfig+0x150>)
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d112      	bne.n	800712a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2202      	movs	r2, #2
 8007108:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800710c:	4b2b      	ldr	r3, [pc, #172]	@ (80071bc <USBD_SetConfig+0x150>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	461a      	mov	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007116:	4b29      	ldr	r3, [pc, #164]	@ (80071bc <USBD_SetConfig+0x150>)
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7fe ffa8 	bl	8006072 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fa06 	bl	8007534 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007128:	e042      	b.n	80071b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800712a:	4b24      	ldr	r3, [pc, #144]	@ (80071bc <USBD_SetConfig+0x150>)
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	429a      	cmp	r2, r3
 8007136:	d02a      	beq.n	800718e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	b2db      	uxtb	r3, r3
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7fe ff96 	bl	8006072 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007146:	4b1d      	ldr	r3, [pc, #116]	@ (80071bc <USBD_SetConfig+0x150>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007150:	4b1a      	ldr	r3, [pc, #104]	@ (80071bc <USBD_SetConfig+0x150>)
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7fe ff6f 	bl	800603a <USBD_SetClassConfig>
 800715c:	4603      	mov	r3, r0
 800715e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00f      	beq.n	8007186 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f918 	bl	800739e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	b2db      	uxtb	r3, r3
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fe ff7b 	bl	8006072 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007184:	e014      	b.n	80071b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f9d4 	bl	8007534 <USBD_CtlSendStatus>
      break;
 800718c:	e010      	b.n	80071b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f9d0 	bl	8007534 <USBD_CtlSendStatus>
      break;
 8007194:	e00c      	b.n	80071b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f900 	bl	800739e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800719e:	4b07      	ldr	r3, [pc, #28]	@ (80071bc <USBD_SetConfig+0x150>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7fe ff64 	bl	8006072 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80071aa:	2303      	movs	r3, #3
 80071ac:	73fb      	strb	r3, [r7, #15]
      break;
 80071ae:	bf00      	nop
  }

  return ret;
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	200003c0 	.word	0x200003c0

080071c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	88db      	ldrh	r3, [r3, #6]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d004      	beq.n	80071dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f8e2 	bl	800739e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071da:	e023      	b.n	8007224 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	dc02      	bgt.n	80071ee <USBD_GetConfig+0x2e>
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	dc03      	bgt.n	80071f4 <USBD_GetConfig+0x34>
 80071ec:	e015      	b.n	800721a <USBD_GetConfig+0x5a>
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d00b      	beq.n	800720a <USBD_GetConfig+0x4a>
 80071f2:	e012      	b.n	800721a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	3308      	adds	r3, #8
 80071fe:	2201      	movs	r2, #1
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f93c 	bl	8007480 <USBD_CtlSendData>
        break;
 8007208:	e00c      	b.n	8007224 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	3304      	adds	r3, #4
 800720e:	2201      	movs	r2, #1
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f934 	bl	8007480 <USBD_CtlSendData>
        break;
 8007218:	e004      	b.n	8007224 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f8be 	bl	800739e <USBD_CtlError>
        break;
 8007222:	bf00      	nop
}
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800723c:	b2db      	uxtb	r3, r3
 800723e:	3b01      	subs	r3, #1
 8007240:	2b02      	cmp	r3, #2
 8007242:	d81e      	bhi.n	8007282 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	88db      	ldrh	r3, [r3, #6]
 8007248:	2b02      	cmp	r3, #2
 800724a:	d004      	beq.n	8007256 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f8a5 	bl	800739e <USBD_CtlError>
        break;
 8007254:	e01a      	b.n	800728c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007262:	2b00      	cmp	r3, #0
 8007264:	d005      	beq.n	8007272 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f043 0202 	orr.w	r2, r3, #2
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	330c      	adds	r3, #12
 8007276:	2202      	movs	r2, #2
 8007278:	4619      	mov	r1, r3
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f900 	bl	8007480 <USBD_CtlSendData>
      break;
 8007280:	e004      	b.n	800728c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f88a 	bl	800739e <USBD_CtlError>
      break;
 800728a:	bf00      	nop
  }
}
 800728c:	bf00      	nop
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	885b      	ldrh	r3, [r3, #2]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d107      	bne.n	80072b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f940 	bl	8007534 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80072b4:	e013      	b.n	80072de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	885b      	ldrh	r3, [r3, #2]
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d10b      	bne.n	80072d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	889b      	ldrh	r3, [r3, #4]
 80072c2:	0a1b      	lsrs	r3, r3, #8
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f930 	bl	8007534 <USBD_CtlSendStatus>
}
 80072d4:	e003      	b.n	80072de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f860 	bl	800739e <USBD_CtlError>
}
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	3b01      	subs	r3, #1
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d80b      	bhi.n	8007316 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	885b      	ldrh	r3, [r3, #2]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d10c      	bne.n	8007320 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f910 	bl	8007534 <USBD_CtlSendStatus>
      }
      break;
 8007314:	e004      	b.n	8007320 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f840 	bl	800739e <USBD_CtlError>
      break;
 800731e:	e000      	b.n	8007322 <USBD_ClrFeature+0x3c>
      break;
 8007320:	bf00      	nop
  }
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	781a      	ldrb	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	3301      	adds	r3, #1
 8007344:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	781a      	ldrb	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3301      	adds	r3, #1
 8007352:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f7ff fa16 	bl	8006786 <SWAPBYTE>
 800735a:	4603      	mov	r3, r0
 800735c:	461a      	mov	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3301      	adds	r3, #1
 8007366:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3301      	adds	r3, #1
 800736c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f7ff fa09 	bl	8006786 <SWAPBYTE>
 8007374:	4603      	mov	r3, r0
 8007376:	461a      	mov	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3301      	adds	r3, #1
 8007380:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3301      	adds	r3, #1
 8007386:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f7ff f9fc 	bl	8006786 <SWAPBYTE>
 800738e:	4603      	mov	r3, r0
 8007390:	461a      	mov	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	80da      	strh	r2, [r3, #6]
}
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b082      	sub	sp, #8
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80073a8:	2180      	movs	r1, #128	@ 0x80
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fdb0 	bl	8007f10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80073b0:	2100      	movs	r1, #0
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fdac 	bl	8007f10 <USBD_LL_StallEP>
}
 80073b8:	bf00      	nop
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d036      	beq.n	8007444 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80073da:	6938      	ldr	r0, [r7, #16]
 80073dc:	f000 f836 	bl	800744c <USBD_GetLen>
 80073e0:	4603      	mov	r3, r0
 80073e2:	3301      	adds	r3, #1
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	4413      	add	r3, r2
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	7812      	ldrb	r2, [r2, #0]
 80073f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	3301      	adds	r3, #1
 80073fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007400:	7dfb      	ldrb	r3, [r7, #23]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	4413      	add	r3, r2
 8007406:	2203      	movs	r2, #3
 8007408:	701a      	strb	r2, [r3, #0]
  idx++;
 800740a:	7dfb      	ldrb	r3, [r7, #23]
 800740c:	3301      	adds	r3, #1
 800740e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007410:	e013      	b.n	800743a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007412:	7dfb      	ldrb	r3, [r7, #23]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	4413      	add	r3, r2
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	7812      	ldrb	r2, [r2, #0]
 800741c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	3301      	adds	r3, #1
 8007422:	613b      	str	r3, [r7, #16]
    idx++;
 8007424:	7dfb      	ldrb	r3, [r7, #23]
 8007426:	3301      	adds	r3, #1
 8007428:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800742a:	7dfb      	ldrb	r3, [r7, #23]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	4413      	add	r3, r2
 8007430:	2200      	movs	r2, #0
 8007432:	701a      	strb	r2, [r3, #0]
    idx++;
 8007434:	7dfb      	ldrb	r3, [r7, #23]
 8007436:	3301      	adds	r3, #1
 8007438:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e7      	bne.n	8007412 <USBD_GetString+0x52>
 8007442:	e000      	b.n	8007446 <USBD_GetString+0x86>
    return;
 8007444:	bf00      	nop
  }
}
 8007446:	3718      	adds	r7, #24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800745c:	e005      	b.n	800746a <USBD_GetLen+0x1e>
  {
    len++;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	3301      	adds	r3, #1
 8007462:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	3301      	adds	r3, #1
 8007468:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1f5      	bne.n	800745e <USBD_GetLen+0x12>
  }

  return len;
 8007472:	7bfb      	ldrb	r3, [r7, #15]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2202      	movs	r2, #2
 8007490:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	2100      	movs	r1, #0
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 fdbb 	bl	8008022 <USBD_LL_Transmit>

  return USBD_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b084      	sub	sp, #16
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	2100      	movs	r1, #0
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 fdaa 	bl	8008022 <USBD_LL_Transmit>

  return USBD_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2203      	movs	r2, #3
 80074e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	2100      	movs	r1, #0
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 fdae 	bl	8008064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	60f8      	str	r0, [r7, #12]
 800751a:	60b9      	str	r1, [r7, #8]
 800751c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	2100      	movs	r1, #0
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 fd9d 	bl	8008064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2204      	movs	r2, #4
 8007540:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007544:	2300      	movs	r3, #0
 8007546:	2200      	movs	r2, #0
 8007548:	2100      	movs	r1, #0
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fd69 	bl	8008022 <USBD_LL_Transmit>

  return USBD_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b082      	sub	sp, #8
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2205      	movs	r2, #5
 8007566:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800756a:	2300      	movs	r3, #0
 800756c:	2200      	movs	r2, #0
 800756e:	2100      	movs	r1, #0
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fd77 	bl	8008064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <tp_clear>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void tp_clear(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
	for (int id = 0; id < TP_MAX_CONTACTS; id++)
 8007586:	2300      	movs	r3, #0
 8007588:	607b      	str	r3, [r7, #4]
 800758a:	e00d      	b.n	80075a8 <tp_clear+0x28>
	{
		memset(&contacts_by_ID[id], 0, sizeof (Contact));
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	4613      	mov	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	4a08      	ldr	r2, [pc, #32]	@ (80075b8 <tp_clear+0x38>)
 8007596:	4413      	add	r3, r2
 8007598:	2205      	movs	r2, #5
 800759a:	2100      	movs	r1, #0
 800759c:	4618      	mov	r0, r3
 800759e:	f000 fe15 	bl	80081cc <memset>
	for (int id = 0; id < TP_MAX_CONTACTS; id++)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	3301      	adds	r3, #1
 80075a6:	607b      	str	r3, [r7, #4]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	ddee      	ble.n	800758c <tp_clear+0xc>
	}
}
 80075ae:	bf00      	nop
 80075b0:	bf00      	nop
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	200003c4 	.word	0x200003c4

080075bc <tp_set_contact>:

void tp_set_contact(uint8_t contact_ID, uint16_t x, uint16_t y)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	4603      	mov	r3, r0
 80075c4:	71fb      	strb	r3, [r7, #7]
 80075c6:	460b      	mov	r3, r1
 80075c8:	80bb      	strh	r3, [r7, #4]
 80075ca:	4613      	mov	r3, r2
 80075cc:	807b      	strh	r3, [r7, #2]
	contacts_by_ID[contact_ID].confidence = 1;
 80075ce:	79fa      	ldrb	r2, [r7, #7]
 80075d0:	491c      	ldr	r1, [pc, #112]	@ (8007644 <tp_set_contact+0x88>)
 80075d2:	4613      	mov	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	18ca      	adds	r2, r1, r3
 80075da:	7813      	ldrb	r3, [r2, #0]
 80075dc:	f043 0301 	orr.w	r3, r3, #1
 80075e0:	7013      	strb	r3, [r2, #0]
	contacts_by_ID[contact_ID].tip_switch = 1;
 80075e2:	79fa      	ldrb	r2, [r7, #7]
 80075e4:	4917      	ldr	r1, [pc, #92]	@ (8007644 <tp_set_contact+0x88>)
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	18ca      	adds	r2, r1, r3
 80075ee:	7813      	ldrb	r3, [r2, #0]
 80075f0:	f043 0302 	orr.w	r3, r3, #2
 80075f4:	7013      	strb	r3, [r2, #0]
	contacts_by_ID[contact_ID].contact_ID = contact_ID;
 80075f6:	79fa      	ldrb	r2, [r7, #7]
 80075f8:	79fb      	ldrb	r3, [r7, #7]
 80075fa:	f003 030f 	and.w	r3, r3, #15
 80075fe:	b2d9      	uxtb	r1, r3
 8007600:	4810      	ldr	r0, [pc, #64]	@ (8007644 <tp_set_contact+0x88>)
 8007602:	4613      	mov	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	18c2      	adds	r2, r0, r3
 800760a:	7813      	ldrb	r3, [r2, #0]
 800760c:	f361 0385 	bfi	r3, r1, #2, #4
 8007610:	7013      	strb	r3, [r2, #0]
	contacts_by_ID[contact_ID].x = x;
 8007612:	79fa      	ldrb	r2, [r7, #7]
 8007614:	490b      	ldr	r1, [pc, #44]	@ (8007644 <tp_set_contact+0x88>)
 8007616:	4613      	mov	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	440b      	add	r3, r1
 800761e:	88ba      	ldrh	r2, [r7, #4]
 8007620:	f8a3 2001 	strh.w	r2, [r3, #1]
	contacts_by_ID[contact_ID].y = y;
 8007624:	79fa      	ldrb	r2, [r7, #7]
 8007626:	4907      	ldr	r1, [pc, #28]	@ (8007644 <tp_set_contact+0x88>)
 8007628:	4613      	mov	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4413      	add	r3, r2
 800762e:	440b      	add	r3, r1
 8007630:	887a      	ldrh	r2, [r7, #2]
 8007632:	f8a3 2003 	strh.w	r2, [r3, #3]
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	200003c4 	.word	0x200003c4

08007648 <tp_reset_contact>:

void tp_reset_contact(uint8_t contact_ID)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	71fb      	strb	r3, [r7, #7]
	contacts_by_ID[contact_ID].tip_switch = 0;
 8007652:	79fa      	ldrb	r2, [r7, #7]
 8007654:	4907      	ldr	r1, [pc, #28]	@ (8007674 <tp_reset_contact+0x2c>)
 8007656:	4613      	mov	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4413      	add	r3, r2
 800765c:	18ca      	adds	r2, r1, r3
 800765e:	7813      	ldrb	r3, [r2, #0]
 8007660:	f36f 0341 	bfc	r3, #1, #1
 8007664:	7013      	strb	r3, [r2, #0]
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	200003c4 	.word	0x200003c4

08007678 <tp_send_touchpad_report>:
	}
}

// Direct usage discouraged!
void tp_send_touchpad_report(uint16_t scan_time)	// in 100μs units
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08e      	sub	sp, #56	@ 0x38
 800767c:	af00      	add	r7, sp, #0
 800767e:	4603      	mov	r3, r0
 8007680:	80fb      	strh	r3, [r7, #6]
	TouchpadReport report;
	report.report_ID = REPORTID_TOUCHPAD;
 8007682:	2301      	movs	r3, #1
 8007684:	733b      	strb	r3, [r7, #12]
	report.scan_time = scan_time;
 8007686:	88fb      	ldrh	r3, [r7, #6]
 8007688:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int count = 0;
 800768a:	2300      	movs	r3, #0
 800768c:	637b      	str	r3, [r7, #52]	@ 0x34
	TouchpadConfiguration tc = get_touchpad_configuration();
 800768e:	f000 f8f7 	bl	8007880 <get_touchpad_configuration>
 8007692:	4603      	mov	r3, r0
 8007694:	461a      	mov	r2, r3
 8007696:	723a      	strb	r2, [r7, #8]
 8007698:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800769c:	727a      	strb	r2, [r7, #9]
 800769e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80076a2:	72bb      	strb	r3, [r7, #10]
	if (tc.surface_switch)	// Contacts are to be reported
 80076a4:	7a7b      	ldrb	r3, [r7, #9]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d040      	beq.n	800772c <tp_send_touchpad_report+0xb4>
	{
		for (int id = 0; id < TP_MAX_CONTACTS; id++)
 80076aa:	2300      	movs	r3, #0
 80076ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80076ae:	e024      	b.n	80076fa <tp_send_touchpad_report+0x82>
		{
			if (contacts_by_ID[id].tip_switch)
 80076b0:	4938      	ldr	r1, [pc, #224]	@ (8007794 <tp_send_touchpad_report+0x11c>)
 80076b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076b4:	4613      	mov	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4413      	add	r3, r2
 80076ba:	440b      	add	r3, r1
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d015      	beq.n	80076f4 <tp_send_touchpad_report+0x7c>
			{
				report.reported_contacts[count] = contacts_by_ID[id];
 80076c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076ca:	4613      	mov	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	3338      	adds	r3, #56	@ 0x38
 80076d2:	443b      	add	r3, r7
 80076d4:	f1a3 012c 	sub.w	r1, r3, #44	@ 0x2c
 80076d8:	482e      	ldr	r0, [pc, #184]	@ (8007794 <tp_send_touchpad_report+0x11c>)
 80076da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076dc:	4613      	mov	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	18c2      	adds	r2, r0, r3
 80076e4:	1c4b      	adds	r3, r1, #1
 80076e6:	6811      	ldr	r1, [r2, #0]
 80076e8:	6019      	str	r1, [r3, #0]
 80076ea:	7912      	ldrb	r2, [r2, #4]
 80076ec:	711a      	strb	r2, [r3, #4]
				count++;
 80076ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076f0:	3301      	adds	r3, #1
 80076f2:	637b      	str	r3, [r7, #52]	@ 0x34
		for (int id = 0; id < TP_MAX_CONTACTS; id++)
 80076f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f6:	3301      	adds	r3, #1
 80076f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80076fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fc:	2b04      	cmp	r3, #4
 80076fe:	ddd7      	ble.n	80076b0 <tp_send_touchpad_report+0x38>
			}
		}
		for (int j = count; j < TP_MAX_CONTACTS; j++)
 8007700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007704:	e00f      	b.n	8007726 <tp_send_touchpad_report+0xae>
		{
			memset(&report.reported_contacts[j], 0, sizeof (Contact));
 8007706:	f107 010c 	add.w	r1, r7, #12
 800770a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800770c:	4613      	mov	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	440b      	add	r3, r1
 8007714:	3301      	adds	r3, #1
 8007716:	2205      	movs	r2, #5
 8007718:	2100      	movs	r1, #0
 800771a:	4618      	mov	r0, r3
 800771c:	f000 fd56 	bl	80081cc <memset>
		for (int j = count; j < TP_MAX_CONTACTS; j++)
 8007720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007722:	3301      	adds	r3, #1
 8007724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007728:	2b04      	cmp	r3, #4
 800772a:	ddec      	ble.n	8007706 <tp_send_touchpad_report+0x8e>
		}
	}
	report.contact_count = count;
 800772c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	if (tc.button_switch)
 8007734:	7abb      	ldrb	r3, [r7, #10]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d020      	beq.n	800777c <tp_send_touchpad_report+0x104>
	{
		report.left_click = button_states[0];
 800773a:	4b17      	ldr	r3, [pc, #92]	@ (8007798 <tp_send_touchpad_report+0x120>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	b2da      	uxtb	r2, r3
 8007744:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007748:	f362 0300 	bfi	r3, r2, #0, #1
 800774c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		report.middle_click = button_states[1];
 8007750:	4b11      	ldr	r3, [pc, #68]	@ (8007798 <tp_send_touchpad_report+0x120>)
 8007752:	785b      	ldrb	r3, [r3, #1]
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	b2da      	uxtb	r2, r3
 800775a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800775e:	f362 0341 	bfi	r3, r2, #1, #1
 8007762:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		report.right_click = button_states[2];
 8007766:	4b0c      	ldr	r3, [pc, #48]	@ (8007798 <tp_send_touchpad_report+0x120>)
 8007768:	789b      	ldrb	r3, [r3, #2]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	b2da      	uxtb	r2, r3
 8007770:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007774:	f362 0382 	bfi	r3, r2, #2, #1
 8007778:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	}
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *) &report, sizeof (report));
 800777c:	f107 030c 	add.w	r3, r7, #12
 8007780:	221e      	movs	r2, #30
 8007782:	4619      	mov	r1, r3
 8007784:	4805      	ldr	r0, [pc, #20]	@ (800779c <tp_send_touchpad_report+0x124>)
 8007786:	f7fe fa53 	bl	8005c30 <USBD_CUSTOM_HID_SendReport>
}
 800778a:	bf00      	nop
 800778c:	3738      	adds	r7, #56	@ 0x38
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	200003c4 	.word	0x200003c4
 8007798:	200003e0 	.word	0x200003e0
 800779c:	200003e4 	.word	0x200003e4

080077a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80077a4:	2200      	movs	r2, #0
 80077a6:	4912      	ldr	r1, [pc, #72]	@ (80077f0 <MX_USB_DEVICE_Init+0x50>)
 80077a8:	4812      	ldr	r0, [pc, #72]	@ (80077f4 <MX_USB_DEVICE_Init+0x54>)
 80077aa:	f7fe fbc9 	bl	8005f40 <USBD_Init>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80077b4:	f7f9 f8d4 	bl	8000960 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80077b8:	490f      	ldr	r1, [pc, #60]	@ (80077f8 <MX_USB_DEVICE_Init+0x58>)
 80077ba:	480e      	ldr	r0, [pc, #56]	@ (80077f4 <MX_USB_DEVICE_Init+0x54>)
 80077bc:	f7fe fbf0 	bl	8005fa0 <USBD_RegisterClass>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80077c6:	f7f9 f8cb 	bl	8000960 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80077ca:	490c      	ldr	r1, [pc, #48]	@ (80077fc <MX_USB_DEVICE_Init+0x5c>)
 80077cc:	4809      	ldr	r0, [pc, #36]	@ (80077f4 <MX_USB_DEVICE_Init+0x54>)
 80077ce:	f7fe fb9d 	bl	8005f0c <USBD_CUSTOM_HID_RegisterInterface>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80077d8:	f7f9 f8c2 	bl	8000960 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80077dc:	4805      	ldr	r0, [pc, #20]	@ (80077f4 <MX_USB_DEVICE_Init+0x54>)
 80077de:	f7fe fc15 	bl	800600c <USBD_Start>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80077e8:	f7f9 f8ba 	bl	8000960 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077ec:	bf00      	nop
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	200002b0 	.word	0x200002b0
 80077f4:	200003e4 	.word	0x200003e4
 80077f8:	2000000c 	.word	0x2000000c
 80077fc:	200002a0 	.word	0x200002a0

08007800 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007800:	b480      	push	{r7}
 8007802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007804:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007806:	4618      	mov	r0, r3
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007810:	b480      	push	{r7}
 8007812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007814:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007816:	4618      	mov	r0, r3
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t report_ID, uint8_t data)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	4603      	mov	r3, r0
 8007828:	460a      	mov	r2, r1
 800782a:	71fb      	strb	r3, [r7, #7]
 800782c:	4613      	mov	r3, r2
 800782e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */

	/*
	 * Receive feature reports from host
	 */
	if (report_ID == REPORTID_INPUT_MODE)
 8007830:	79fb      	ldrb	r3, [r7, #7]
 8007832:	2b04      	cmp	r3, #4
 8007834:	d103      	bne.n	800783e <CUSTOM_HID_OutEvent_FS+0x1e>
	{
		touchpadConfiguration.input_mode = data;
 8007836:	4a10      	ldr	r2, [pc, #64]	@ (8007878 <CUSTOM_HID_OutEvent_FS+0x58>)
 8007838:	79bb      	ldrb	r3, [r7, #6]
 800783a:	7013      	strb	r3, [r2, #0]
 800783c:	e00d      	b.n	800785a <CUSTOM_HID_OutEvent_FS+0x3a>
	}
	else if (report_ID == REPORTID_FUNCTION_SWITCH)
 800783e:	79fb      	ldrb	r3, [r7, #7]
 8007840:	2b05      	cmp	r3, #5
 8007842:	d10a      	bne.n	800785a <CUSTOM_HID_OutEvent_FS+0x3a>
	{
		touchpadConfiguration.surface_switch = data & 0b00000001;
 8007844:	79bb      	ldrb	r3, [r7, #6]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	b2da      	uxtb	r2, r3
 800784c:	4b0a      	ldr	r3, [pc, #40]	@ (8007878 <CUSTOM_HID_OutEvent_FS+0x58>)
 800784e:	705a      	strb	r2, [r3, #1]
		touchpadConfiguration.button_switch = data >> 1;
 8007850:	79bb      	ldrb	r3, [r7, #6]
 8007852:	085b      	lsrs	r3, r3, #1
 8007854:	b2da      	uxtb	r2, r3
 8007856:	4b08      	ldr	r3, [pc, #32]	@ (8007878 <CUSTOM_HID_OutEvent_FS+0x58>)
 8007858:	709a      	strb	r2, [r3, #2]
	}

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800785a:	4808      	ldr	r0, [pc, #32]	@ (800787c <CUSTOM_HID_OutEvent_FS+0x5c>)
 800785c:	f7fe faf4 	bl	8005e48 <USBD_CUSTOM_HID_ReceivePacket>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <CUSTOM_HID_OutEvent_FS+0x4c>
  {
    return -1;
 8007866:	f04f 33ff 	mov.w	r3, #4294967295
 800786a:	e000      	b.n	800786e <CUSTOM_HID_OutEvent_FS+0x4e>
  }

  return (USBD_OK);
 800786c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	200006c0 	.word	0x200006c0
 800787c:	200003e4 	.word	0x200003e4

08007880 <get_touchpad_configuration>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */


TouchpadConfiguration get_touchpad_configuration(void)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
	return touchpadConfiguration;
 8007886:	4a0c      	ldr	r2, [pc, #48]	@ (80078b8 <get_touchpad_configuration+0x38>)
 8007888:	1d3b      	adds	r3, r7, #4
 800788a:	6812      	ldr	r2, [r2, #0]
 800788c:	4611      	mov	r1, r2
 800788e:	8019      	strh	r1, [r3, #0]
 8007890:	3302      	adds	r3, #2
 8007892:	0c12      	lsrs	r2, r2, #16
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	2300      	movs	r3, #0
 8007898:	793a      	ldrb	r2, [r7, #4]
 800789a:	f362 0307 	bfi	r3, r2, #0, #8
 800789e:	797a      	ldrb	r2, [r7, #5]
 80078a0:	f362 230f 	bfi	r3, r2, #8, #8
 80078a4:	79ba      	ldrb	r2, [r7, #6]
 80078a6:	f362 4317 	bfi	r3, r2, #16, #8
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	200006c0 	.word	0x200006c0

080078bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	4603      	mov	r3, r0
 80078c4:	6039      	str	r1, [r7, #0]
 80078c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2212      	movs	r2, #18
 80078cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80078ce:	4b03      	ldr	r3, [pc, #12]	@ (80078dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	200002d0 	.word	0x200002d0

080078e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	6039      	str	r1, [r7, #0]
 80078ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2204      	movs	r2, #4
 80078f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078f2:	4b03      	ldr	r3, [pc, #12]	@ (8007900 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	200002f0 	.word	0x200002f0

08007904 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	4603      	mov	r3, r0
 800790c:	6039      	str	r1, [r7, #0]
 800790e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007910:	79fb      	ldrb	r3, [r7, #7]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d105      	bne.n	8007922 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	4907      	ldr	r1, [pc, #28]	@ (8007938 <USBD_FS_ProductStrDescriptor+0x34>)
 800791a:	4808      	ldr	r0, [pc, #32]	@ (800793c <USBD_FS_ProductStrDescriptor+0x38>)
 800791c:	f7ff fd50 	bl	80073c0 <USBD_GetString>
 8007920:	e004      	b.n	800792c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	4904      	ldr	r1, [pc, #16]	@ (8007938 <USBD_FS_ProductStrDescriptor+0x34>)
 8007926:	4805      	ldr	r0, [pc, #20]	@ (800793c <USBD_FS_ProductStrDescriptor+0x38>)
 8007928:	f7ff fd4a 	bl	80073c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800792c:	4b02      	ldr	r3, [pc, #8]	@ (8007938 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	200006c4 	.word	0x200006c4
 800793c:	0800823c 	.word	0x0800823c

08007940 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	6039      	str	r1, [r7, #0]
 800794a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	4904      	ldr	r1, [pc, #16]	@ (8007960 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007950:	4804      	ldr	r0, [pc, #16]	@ (8007964 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007952:	f7ff fd35 	bl	80073c0 <USBD_GetString>
  return USBD_StrDesc;
 8007956:	4b02      	ldr	r3, [pc, #8]	@ (8007960 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	200006c4 	.word	0x200006c4
 8007964:	0800825c 	.word	0x0800825c

08007968 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	4603      	mov	r3, r0
 8007970:	6039      	str	r1, [r7, #0]
 8007972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	221a      	movs	r2, #26
 8007978:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800797a:	f000 f855 	bl	8007a28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800797e:	4b02      	ldr	r3, [pc, #8]	@ (8007988 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	200002f4 	.word	0x200002f4

0800798c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	6039      	str	r1, [r7, #0]
 8007996:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007998:	79fb      	ldrb	r3, [r7, #7]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d105      	bne.n	80079aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	4907      	ldr	r1, [pc, #28]	@ (80079c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80079a2:	4808      	ldr	r0, [pc, #32]	@ (80079c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80079a4:	f7ff fd0c 	bl	80073c0 <USBD_GetString>
 80079a8:	e004      	b.n	80079b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	4904      	ldr	r1, [pc, #16]	@ (80079c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80079ae:	4805      	ldr	r0, [pc, #20]	@ (80079c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80079b0:	f7ff fd06 	bl	80073c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079b4:	4b02      	ldr	r3, [pc, #8]	@ (80079c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	200006c4 	.word	0x200006c4
 80079c4:	08008270 	.word	0x08008270

080079c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	6039      	str	r1, [r7, #0]
 80079d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079d4:	79fb      	ldrb	r3, [r7, #7]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d105      	bne.n	80079e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	4907      	ldr	r1, [pc, #28]	@ (80079fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079de:	4808      	ldr	r0, [pc, #32]	@ (8007a00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079e0:	f7ff fcee 	bl	80073c0 <USBD_GetString>
 80079e4:	e004      	b.n	80079f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	4904      	ldr	r1, [pc, #16]	@ (80079fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079ea:	4805      	ldr	r0, [pc, #20]	@ (8007a00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079ec:	f7ff fce8 	bl	80073c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079f0:	4b02      	ldr	r3, [pc, #8]	@ (80079fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	200006c4 	.word	0x200006c4
 8007a00:	08008284 	.word	0x08008284

08007a04 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	6039      	str	r1, [r7, #0]
 8007a0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	220c      	movs	r2, #12
 8007a14:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007a16:	4b03      	ldr	r3, [pc, #12]	@ (8007a24 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	200002e4 	.word	0x200002e4

08007a28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8007a6c <Get_SerialNum+0x44>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a34:	4b0e      	ldr	r3, [pc, #56]	@ (8007a70 <Get_SerialNum+0x48>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007a74 <Get_SerialNum+0x4c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4413      	add	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d009      	beq.n	8007a62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a4e:	2208      	movs	r2, #8
 8007a50:	4909      	ldr	r1, [pc, #36]	@ (8007a78 <Get_SerialNum+0x50>)
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 f814 	bl	8007a80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a58:	2204      	movs	r2, #4
 8007a5a:	4908      	ldr	r1, [pc, #32]	@ (8007a7c <Get_SerialNum+0x54>)
 8007a5c:	68b8      	ldr	r0, [r7, #8]
 8007a5e:	f000 f80f 	bl	8007a80 <IntToUnicode>
  }
}
 8007a62:	bf00      	nop
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	1fff7a10 	.word	0x1fff7a10
 8007a70:	1fff7a14 	.word	0x1fff7a14
 8007a74:	1fff7a18 	.word	0x1fff7a18
 8007a78:	200002f6 	.word	0x200002f6
 8007a7c:	20000306 	.word	0x20000306

08007a80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a92:	2300      	movs	r3, #0
 8007a94:	75fb      	strb	r3, [r7, #23]
 8007a96:	e027      	b.n	8007ae8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	0f1b      	lsrs	r3, r3, #28
 8007a9c:	2b09      	cmp	r3, #9
 8007a9e:	d80b      	bhi.n	8007ab8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	0f1b      	lsrs	r3, r3, #28
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	4619      	mov	r1, r3
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	440b      	add	r3, r1
 8007ab0:	3230      	adds	r2, #48	@ 0x30
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	e00a      	b.n	8007ace <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	0f1b      	lsrs	r3, r3, #28
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	440b      	add	r3, r1
 8007ac8:	3237      	adds	r2, #55	@ 0x37
 8007aca:	b2d2      	uxtb	r2, r2
 8007acc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
 8007ad6:	005b      	lsls	r3, r3, #1
 8007ad8:	3301      	adds	r3, #1
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	4413      	add	r3, r2
 8007ade:	2200      	movs	r2, #0
 8007ae0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	75fb      	strb	r3, [r7, #23]
 8007ae8:	7dfa      	ldrb	r2, [r7, #23]
 8007aea:	79fb      	ldrb	r3, [r7, #7]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d3d3      	bcc.n	8007a98 <IntToUnicode+0x18>
  }
}
 8007af0:	bf00      	nop
 8007af2:	bf00      	nop
 8007af4:	371c      	adds	r7, #28
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
	...

08007b00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b0a0      	sub	sp, #128	@ 0x80
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b08:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	605a      	str	r2, [r3, #4]
 8007b12:	609a      	str	r2, [r3, #8]
 8007b14:	60da      	str	r2, [r3, #12]
 8007b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007b18:	f107 0310 	add.w	r3, r7, #16
 8007b1c:	225c      	movs	r2, #92	@ 0x5c
 8007b1e:	2100      	movs	r1, #0
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 fb53 	bl	80081cc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b2e:	d149      	bne.n	8007bc4 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007b30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007b36:	2300      	movs	r3, #0
 8007b38:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007b3a:	f107 0310 	add.w	r3, r7, #16
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fb f96e 	bl	8002e20 <HAL_RCCEx_PeriphCLKConfig>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8007b4a:	f7f8 ff09 	bl	8000960 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60fb      	str	r3, [r7, #12]
 8007b52:	4b1e      	ldr	r3, [pc, #120]	@ (8007bcc <HAL_PCD_MspInit+0xcc>)
 8007b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b56:	4a1d      	ldr	r2, [pc, #116]	@ (8007bcc <HAL_PCD_MspInit+0xcc>)
 8007b58:	f043 0301 	orr.w	r3, r3, #1
 8007b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8007bcc <HAL_PCD_MspInit+0xcc>)
 8007b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b6a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007b6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b70:	2302      	movs	r3, #2
 8007b72:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b7c:	230a      	movs	r3, #10
 8007b7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b80:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007b84:	4619      	mov	r1, r3
 8007b86:	4812      	ldr	r0, [pc, #72]	@ (8007bd0 <HAL_PCD_MspInit+0xd0>)
 8007b88:	f7f9 fc0e 	bl	80013a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8007bcc <HAL_PCD_MspInit+0xcc>)
 8007b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b90:	4a0e      	ldr	r2, [pc, #56]	@ (8007bcc <HAL_PCD_MspInit+0xcc>)
 8007b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b96:	6353      	str	r3, [r2, #52]	@ 0x34
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60bb      	str	r3, [r7, #8]
 8007b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007bcc <HAL_PCD_MspInit+0xcc>)
 8007b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8007bcc <HAL_PCD_MspInit+0xcc>)
 8007ba2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007ba6:	6453      	str	r3, [r2, #68]	@ 0x44
 8007ba8:	4b08      	ldr	r3, [pc, #32]	@ (8007bcc <HAL_PCD_MspInit+0xcc>)
 8007baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bb0:	60bb      	str	r3, [r7, #8]
 8007bb2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	2043      	movs	r0, #67	@ 0x43
 8007bba:	f7f9 fbbe 	bl	800133a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007bbe:	2043      	movs	r0, #67	@ 0x43
 8007bc0:	f7f9 fbd7 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007bc4:	bf00      	nop
 8007bc6:	3780      	adds	r7, #128	@ 0x80
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	40023800 	.word	0x40023800
 8007bd0:	40020000 	.word	0x40020000

08007bd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f7fe fa5b 	bl	80060a6 <USBD_LL_SetupStage>
}
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007c0a:	78fa      	ldrb	r2, [r7, #3]
 8007c0c:	6879      	ldr	r1, [r7, #4]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	00db      	lsls	r3, r3, #3
 8007c12:	4413      	add	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	440b      	add	r3, r1
 8007c18:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	78fb      	ldrb	r3, [r7, #3]
 8007c20:	4619      	mov	r1, r3
 8007c22:	f7fe fa95 	bl	8006150 <USBD_LL_DataOutStage>
}
 8007c26:	bf00      	nop
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	460b      	mov	r3, r1
 8007c38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007c40:	78fa      	ldrb	r2, [r7, #3]
 8007c42:	6879      	ldr	r1, [r7, #4]
 8007c44:	4613      	mov	r3, r2
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	4413      	add	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	440b      	add	r3, r1
 8007c4e:	3320      	adds	r3, #32
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	78fb      	ldrb	r3, [r7, #3]
 8007c54:	4619      	mov	r1, r3
 8007c56:	f7fe fb2e 	bl	80062b6 <USBD_LL_DataInStage>
}
 8007c5a:	bf00      	nop
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fe fc68 	bl	8006546 <USBD_LL_SOF>
}
 8007c76:	bf00      	nop
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c86:	2301      	movs	r3, #1
 8007c88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	79db      	ldrb	r3, [r3, #7]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d102      	bne.n	8007c98 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007c92:	2300      	movs	r3, #0
 8007c94:	73fb      	strb	r3, [r7, #15]
 8007c96:	e008      	b.n	8007caa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	79db      	ldrb	r3, [r3, #7]
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d102      	bne.n	8007ca6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	73fb      	strb	r3, [r7, #15]
 8007ca4:	e001      	b.n	8007caa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007ca6:	f7f8 fe5b 	bl	8000960 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cb0:	7bfa      	ldrb	r2, [r7, #15]
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fe fc02 	bl	80064be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe fbaa 	bl	800641a <USBD_LL_Reset>
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fe fbfd 	bl	80064de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	6812      	ldr	r2, [r2, #0]
 8007cf2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007cf6:	f043 0301 	orr.w	r3, r3, #1
 8007cfa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	7adb      	ldrb	r3, [r3, #11]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d005      	beq.n	8007d10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d04:	4b04      	ldr	r3, [pc, #16]	@ (8007d18 <HAL_PCD_SuspendCallback+0x48>)
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	4a03      	ldr	r2, [pc, #12]	@ (8007d18 <HAL_PCD_SuspendCallback+0x48>)
 8007d0a:	f043 0306 	orr.w	r3, r3, #6
 8007d0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	e000ed00 	.word	0xe000ed00

08007d1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fe fbf3 	bl	8006516 <USBD_LL_Resume>
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d4a:	78fa      	ldrb	r2, [r7, #3]
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe fc4b 	bl	80065ea <USBD_LL_IsoOUTIncomplete>
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d6e:	78fa      	ldrb	r2, [r7, #3]
 8007d70:	4611      	mov	r1, r2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fc07 	bl	8006586 <USBD_LL_IsoINIncomplete>
}
 8007d78:	bf00      	nop
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fe fc5d 	bl	800664e <USBD_LL_DevConnected>
}
 8007d94:	bf00      	nop
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fc5a 	bl	8006664 <USBD_LL_DevDisconnected>
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d13c      	bne.n	8007e42 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007dc8:	4a20      	ldr	r2, [pc, #128]	@ (8007e4c <USBD_LL_Init+0x94>)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8007e4c <USBD_LL_Init+0x94>)
 8007dd4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8007e4c <USBD_LL_Init+0x94>)
 8007dda:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007dde:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007de0:	4b1a      	ldr	r3, [pc, #104]	@ (8007e4c <USBD_LL_Init+0x94>)
 8007de2:	2206      	movs	r2, #6
 8007de4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007de6:	4b19      	ldr	r3, [pc, #100]	@ (8007e4c <USBD_LL_Init+0x94>)
 8007de8:	2202      	movs	r2, #2
 8007dea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007dec:	4b17      	ldr	r3, [pc, #92]	@ (8007e4c <USBD_LL_Init+0x94>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007df2:	4b16      	ldr	r3, [pc, #88]	@ (8007e4c <USBD_LL_Init+0x94>)
 8007df4:	2202      	movs	r2, #2
 8007df6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007df8:	4b14      	ldr	r3, [pc, #80]	@ (8007e4c <USBD_LL_Init+0x94>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007dfe:	4b13      	ldr	r3, [pc, #76]	@ (8007e4c <USBD_LL_Init+0x94>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007e04:	4b11      	ldr	r3, [pc, #68]	@ (8007e4c <USBD_LL_Init+0x94>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007e0a:	4b10      	ldr	r3, [pc, #64]	@ (8007e4c <USBD_LL_Init+0x94>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007e10:	4b0e      	ldr	r3, [pc, #56]	@ (8007e4c <USBD_LL_Init+0x94>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007e16:	480d      	ldr	r0, [pc, #52]	@ (8007e4c <USBD_LL_Init+0x94>)
 8007e18:	f7f9 fc8b 	bl	8001732 <HAL_PCD_Init>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007e22:	f7f8 fd9d 	bl	8000960 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007e26:	2180      	movs	r1, #128	@ 0x80
 8007e28:	4808      	ldr	r0, [pc, #32]	@ (8007e4c <USBD_LL_Init+0x94>)
 8007e2a:	f7fa fed2 	bl	8002bd2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e2e:	2240      	movs	r2, #64	@ 0x40
 8007e30:	2100      	movs	r1, #0
 8007e32:	4806      	ldr	r0, [pc, #24]	@ (8007e4c <USBD_LL_Init+0x94>)
 8007e34:	f7fa fe86 	bl	8002b44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e38:	2280      	movs	r2, #128	@ 0x80
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	4803      	ldr	r0, [pc, #12]	@ (8007e4c <USBD_LL_Init+0x94>)
 8007e3e:	f7fa fe81 	bl	8002b44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	200008c4 	.word	0x200008c4

08007e50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7f9 fd79 	bl	800195e <HAL_PCD_Start>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 f97e 	bl	8008174 <USBD_Get_USB_Status>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	4608      	mov	r0, r1
 8007e90:	4611      	mov	r1, r2
 8007e92:	461a      	mov	r2, r3
 8007e94:	4603      	mov	r3, r0
 8007e96:	70fb      	strb	r3, [r7, #3]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70bb      	strb	r3, [r7, #2]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007eae:	78bb      	ldrb	r3, [r7, #2]
 8007eb0:	883a      	ldrh	r2, [r7, #0]
 8007eb2:	78f9      	ldrb	r1, [r7, #3]
 8007eb4:	f7fa fa7a 	bl	80023ac <HAL_PCD_EP_Open>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 f958 	bl	8008174 <USBD_Get_USB_Status>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b084      	sub	sp, #16
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	460b      	mov	r3, r1
 8007edc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007eec:	78fa      	ldrb	r2, [r7, #3]
 8007eee:	4611      	mov	r1, r2
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fa fac3 	bl	800247c <HAL_PCD_EP_Close>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 f939 	bl	8008174 <USBD_Get_USB_Status>
 8007f02:	4603      	mov	r3, r0
 8007f04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f2a:	78fa      	ldrb	r2, [r7, #3]
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fa fb63 	bl	80025fa <HAL_PCD_EP_SetStall>
 8007f34:	4603      	mov	r3, r0
 8007f36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 f91a 	bl	8008174 <USBD_Get_USB_Status>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f68:	78fa      	ldrb	r2, [r7, #3]
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7fa fba7 	bl	80026c0 <HAL_PCD_EP_ClrStall>
 8007f72:	4603      	mov	r3, r0
 8007f74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 f8fb 	bl	8008174 <USBD_Get_USB_Status>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	da0b      	bge.n	8007fc0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fae:	68f9      	ldr	r1, [r7, #12]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	440b      	add	r3, r1
 8007fba:	3316      	adds	r3, #22
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	e00b      	b.n	8007fd8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fc6:	68f9      	ldr	r1, [r7, #12]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007fd6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ffe:	78fa      	ldrb	r2, [r7, #3]
 8008000:	4611      	mov	r1, r2
 8008002:	4618      	mov	r0, r3
 8008004:	f7fa f9ae 	bl	8002364 <HAL_PCD_SetAddress>
 8008008:	4603      	mov	r3, r0
 800800a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800800c:	7bfb      	ldrb	r3, [r7, #15]
 800800e:	4618      	mov	r0, r3
 8008010:	f000 f8b0 	bl	8008174 <USBD_Get_USB_Status>
 8008014:	4603      	mov	r3, r0
 8008016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008018:	7bbb      	ldrb	r3, [r7, #14]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b086      	sub	sp, #24
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
 800802e:	460b      	mov	r3, r1
 8008030:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008040:	7af9      	ldrb	r1, [r7, #11]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	f7fa fa9e 	bl	8002586 <HAL_PCD_EP_Transmit>
 800804a:	4603      	mov	r3, r0
 800804c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	4618      	mov	r0, r3
 8008052:	f000 f88f 	bl	8008174 <USBD_Get_USB_Status>
 8008056:	4603      	mov	r3, r0
 8008058:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800805a:	7dbb      	ldrb	r3, [r7, #22]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3718      	adds	r7, #24
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	607a      	str	r2, [r7, #4]
 800806e:	603b      	str	r3, [r7, #0]
 8008070:	460b      	mov	r3, r1
 8008072:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008082:	7af9      	ldrb	r1, [r7, #11]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	f7fa fa42 	bl	8002510 <HAL_PCD_EP_Receive>
 800808c:	4603      	mov	r3, r0
 800808e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 f86e 	bl	8008174 <USBD_Get_USB_Status>
 8008098:	4603      	mov	r3, r0
 800809a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800809c:	7dbb      	ldrb	r3, [r7, #22]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <HAL_PCDEx_LPM_Callback+0x18>
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d01f      	beq.n	80080fe <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80080be:	e03b      	b.n	8008138 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	7adb      	ldrb	r3, [r3, #11]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d007      	beq.n	80080d8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80080c8:	f7f8 fac8 	bl	800065c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008140 <HAL_PCDEx_LPM_Callback+0x98>)
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	4a1b      	ldr	r2, [pc, #108]	@ (8008140 <HAL_PCDEx_LPM_Callback+0x98>)
 80080d2:	f023 0306 	bic.w	r3, r3, #6
 80080d6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80080ea:	f023 0301 	bic.w	r3, r3, #1
 80080ee:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe fa0d 	bl	8006516 <USBD_LL_Resume>
    break;
 80080fc:	e01c      	b.n	8008138 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	6812      	ldr	r2, [r2, #0]
 800810c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008110:	f043 0301 	orr.w	r3, r3, #1
 8008114:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800811c:	4618      	mov	r0, r3
 800811e:	f7fe f9de 	bl	80064de <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	7adb      	ldrb	r3, [r3, #11]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d005      	beq.n	8008136 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800812a:	4b05      	ldr	r3, [pc, #20]	@ (8008140 <HAL_PCDEx_LPM_Callback+0x98>)
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	4a04      	ldr	r2, [pc, #16]	@ (8008140 <HAL_PCDEx_LPM_Callback+0x98>)
 8008130:	f043 0306 	orr.w	r3, r3, #6
 8008134:	6113      	str	r3, [r2, #16]
    break;
 8008136:	bf00      	nop
}
 8008138:	bf00      	nop
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	e000ed00 	.word	0xe000ed00

08008144 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800814c:	4b03      	ldr	r3, [pc, #12]	@ (800815c <USBD_static_malloc+0x18>)
}
 800814e:	4618      	mov	r0, r3
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	20000da8 	.word	0x20000da8

08008160 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]

}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	4603      	mov	r3, r0
 800817c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008182:	79fb      	ldrb	r3, [r7, #7]
 8008184:	2b03      	cmp	r3, #3
 8008186:	d817      	bhi.n	80081b8 <USBD_Get_USB_Status+0x44>
 8008188:	a201      	add	r2, pc, #4	@ (adr r2, 8008190 <USBD_Get_USB_Status+0x1c>)
 800818a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818e:	bf00      	nop
 8008190:	080081a1 	.word	0x080081a1
 8008194:	080081a7 	.word	0x080081a7
 8008198:	080081ad 	.word	0x080081ad
 800819c:	080081b3 	.word	0x080081b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081a0:	2300      	movs	r3, #0
 80081a2:	73fb      	strb	r3, [r7, #15]
    break;
 80081a4:	e00b      	b.n	80081be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081a6:	2303      	movs	r3, #3
 80081a8:	73fb      	strb	r3, [r7, #15]
    break;
 80081aa:	e008      	b.n	80081be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081ac:	2301      	movs	r3, #1
 80081ae:	73fb      	strb	r3, [r7, #15]
    break;
 80081b0:	e005      	b.n	80081be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081b2:	2303      	movs	r3, #3
 80081b4:	73fb      	strb	r3, [r7, #15]
    break;
 80081b6:	e002      	b.n	80081be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081b8:	2303      	movs	r3, #3
 80081ba:	73fb      	strb	r3, [r7, #15]
    break;
 80081bc:	bf00      	nop
  }
  return usb_status;
 80081be:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <memset>:
 80081cc:	4402      	add	r2, r0
 80081ce:	4603      	mov	r3, r0
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d100      	bne.n	80081d6 <memset+0xa>
 80081d4:	4770      	bx	lr
 80081d6:	f803 1b01 	strb.w	r1, [r3], #1
 80081da:	e7f9      	b.n	80081d0 <memset+0x4>

080081dc <__libc_init_array>:
 80081dc:	b570      	push	{r4, r5, r6, lr}
 80081de:	4d0d      	ldr	r5, [pc, #52]	@ (8008214 <__libc_init_array+0x38>)
 80081e0:	4c0d      	ldr	r4, [pc, #52]	@ (8008218 <__libc_init_array+0x3c>)
 80081e2:	1b64      	subs	r4, r4, r5
 80081e4:	10a4      	asrs	r4, r4, #2
 80081e6:	2600      	movs	r6, #0
 80081e8:	42a6      	cmp	r6, r4
 80081ea:	d109      	bne.n	8008200 <__libc_init_array+0x24>
 80081ec:	4d0b      	ldr	r5, [pc, #44]	@ (800821c <__libc_init_array+0x40>)
 80081ee:	4c0c      	ldr	r4, [pc, #48]	@ (8008220 <__libc_init_array+0x44>)
 80081f0:	f000 f818 	bl	8008224 <_init>
 80081f4:	1b64      	subs	r4, r4, r5
 80081f6:	10a4      	asrs	r4, r4, #2
 80081f8:	2600      	movs	r6, #0
 80081fa:	42a6      	cmp	r6, r4
 80081fc:	d105      	bne.n	800820a <__libc_init_array+0x2e>
 80081fe:	bd70      	pop	{r4, r5, r6, pc}
 8008200:	f855 3b04 	ldr.w	r3, [r5], #4
 8008204:	4798      	blx	r3
 8008206:	3601      	adds	r6, #1
 8008208:	e7ee      	b.n	80081e8 <__libc_init_array+0xc>
 800820a:	f855 3b04 	ldr.w	r3, [r5], #4
 800820e:	4798      	blx	r3
 8008210:	3601      	adds	r6, #1
 8008212:	e7f2      	b.n	80081fa <__libc_init_array+0x1e>
 8008214:	080083b8 	.word	0x080083b8
 8008218:	080083b8 	.word	0x080083b8
 800821c:	080083b8 	.word	0x080083b8
 8008220:	080083bc 	.word	0x080083bc

08008224 <_init>:
 8008224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008226:	bf00      	nop
 8008228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800822a:	bc08      	pop	{r3}
 800822c:	469e      	mov	lr, r3
 800822e:	4770      	bx	lr

08008230 <_fini>:
 8008230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008232:	bf00      	nop
 8008234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008236:	bc08      	pop	{r3}
 8008238:	469e      	mov	lr, r3
 800823a:	4770      	bx	lr
