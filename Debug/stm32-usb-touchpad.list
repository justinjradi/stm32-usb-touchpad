
stm32-usb-touchpad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fc4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08008188  08008188  00009188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082fc  080082fc  0000a310  2**0
                  CONTENTS
  4 .ARM          00000008  080082fc  080082fc  000092fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008304  08008304  0000a310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008304  08008304  00009304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008308  08008308  00009308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000310  20000000  0800830c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab4  20000310  0800861c  0000a310  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dc4  0800861c  0000adc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a310  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bbc  00000000  00000000  0000a340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003309  00000000  00000000  0001cefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00020208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd3  00000000  00000000  000212f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000258e8  00000000  00000000  00021fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161a0  00000000  00000000  000478ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dec6e  00000000  00000000  0005da4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c6b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000465c  00000000  00000000  0013c6fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00140d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000310 	.word	0x20000310
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008170 	.word	0x08008170

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000314 	.word	0x20000314
 8000200:	08008170 	.word	0x08008170

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fb11 	bl	8000b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f83f 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f91f 	bl	8000744 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000506:	f007 f8f1 	bl	80076ec <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800050a:	f000 f8a5 	bl	8000658 <MX_ADC1_Init>
  MX_TIM10_Init();
 800050e:	f000 f8f5 	bl	80006fc <MX_TIM10_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

			if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8000512:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000516:	4818      	ldr	r0, [pc, #96]	@ (8000578 <main+0x84>)
 8000518:	f001 f8b0 	bl	800167c <HAL_GPIO_ReadPin>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d002      	beq.n	8000528 <main+0x34>
			{
				user_button_pressed = 1;
 8000522:	2301      	movs	r3, #1
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	e7f4      	b.n	8000512 <main+0x1e>
			}
			else if (user_button_pressed)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0f1      	beq.n	8000512 <main+0x1e>
			{
				HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2101      	movs	r1, #1
 8000532:	4812      	ldr	r0, [pc, #72]	@ (800057c <main+0x88>)
 8000534:	f001 f8ba 	bl	80016ac <HAL_GPIO_WritePin>
				HAL_Delay(250);
 8000538:	20fa      	movs	r0, #250	@ 0xfa
 800053a:	f000 fb63 	bl	8000c04 <HAL_Delay>
				HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2101      	movs	r1, #1
 8000542:	480e      	ldr	r0, [pc, #56]	@ (800057c <main+0x88>)
 8000544:	f001 f8b2 	bl	80016ac <HAL_GPIO_WritePin>
				user_button_pressed = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]

				move(2000, 2000, 20, 0, 1, 100);
 800054c:	2364      	movs	r3, #100	@ 0x64
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	2301      	movs	r3, #1
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	2300      	movs	r3, #0
 8000556:	2214      	movs	r2, #20
 8000558:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800055c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000560:	f000 f95e 	bl	8000820 <move>
				HAL_Delay(200);
 8000564:	20c8      	movs	r0, #200	@ 0xc8
 8000566:	f000 fb4d 	bl	8000c04 <HAL_Delay>
				rclick();
 800056a:	f000 f9b2 	bl	80008d2 <rclick>
				HAL_Delay(200);
 800056e:	20c8      	movs	r0, #200	@ 0xc8
 8000570:	f000 fb48 	bl	8000c04 <HAL_Delay>
			if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8000574:	e7cd      	b.n	8000512 <main+0x1e>
 8000576:	bf00      	nop
 8000578:	40020800 	.word	0x40020800
 800057c:	40020400 	.word	0x40020400

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	@ 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	2234      	movs	r2, #52	@ 0x34
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f007 fdc2 	bl	8008118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b29      	ldr	r3, [pc, #164]	@ (8000650 <SystemClock_Config+0xd0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	4a28      	ldr	r2, [pc, #160]	@ (8000650 <SystemClock_Config+0xd0>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b4:	4b26      	ldr	r3, [pc, #152]	@ (8000650 <SystemClock_Config+0xd0>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	4b23      	ldr	r3, [pc, #140]	@ (8000654 <SystemClock_Config+0xd4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a22      	ldr	r2, [pc, #136]	@ (8000654 <SystemClock_Config+0xd4>)
 80005ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b20      	ldr	r3, [pc, #128]	@ (8000654 <SystemClock_Config+0xd4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f4:	23a8      	movs	r3, #168	@ 0xa8
 80005f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fc:	2307      	movs	r3, #7
 80005fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000600:	2302      	movs	r3, #2
 8000602:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4618      	mov	r0, r3
 800060a:	f003 f939 	bl	8003880 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000614:	f000 f97a 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000624:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000628:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800062e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2105      	movs	r1, #5
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fad6 	bl	8002be8 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000642:	f000 f963 	bl	800090c <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	@ 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800066a:	4b21      	ldr	r3, [pc, #132]	@ (80006f0 <MX_ADC1_Init+0x98>)
 800066c:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <MX_ADC1_Init+0x9c>)
 800066e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <MX_ADC1_Init+0x98>)
 8000672:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000676:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000678:	4b1d      	ldr	r3, [pc, #116]	@ (80006f0 <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000684:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <MX_ADC1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800068a:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <MX_ADC1_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000692:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000698:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <MX_ADC1_Init+0x98>)
 800069a:	4a17      	ldr	r2, [pc, #92]	@ (80006f8 <MX_ADC1_Init+0xa0>)
 800069c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_ADC1_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_ADC1_Init+0x98>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_ADC1_Init+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_ADC1_Init+0x98>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b8:	480d      	ldr	r0, [pc, #52]	@ (80006f0 <MX_ADC1_Init+0x98>)
 80006ba:	f000 fac7 	bl	8000c4c <HAL_ADC_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006c4:	f000 f922 	bl	800090c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d4:	463b      	mov	r3, r7
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <MX_ADC1_Init+0x98>)
 80006da:	f000 fafb 	bl	8000cd4 <HAL_ADC_ConfigChannel>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006e4:	f000 f912 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000032c 	.word	0x2000032c
 80006f4:	40012000 	.word	0x40012000
 80006f8:	0f000001 	.word	0x0f000001

080006fc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000700:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_TIM10_Init+0x40>)
 8000702:	4a0f      	ldr	r2, [pc, #60]	@ (8000740 <MX_TIM10_Init+0x44>)
 8000704:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <MX_TIM10_Init+0x40>)
 8000708:	22a7      	movs	r2, #167	@ 0xa7
 800070a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070c:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <MX_TIM10_Init+0x40>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000712:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <MX_TIM10_Init+0x40>)
 8000714:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000718:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071a:	4b08      	ldr	r3, [pc, #32]	@ (800073c <MX_TIM10_Init+0x40>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_TIM10_Init+0x40>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_TIM10_Init+0x40>)
 8000728:	f003 fb48 	bl	8003dbc <HAL_TIM_Base_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000732:	f000 f8eb 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000374 	.word	0x20000374
 8000740:	40014400 	.word	0x40014400

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	@ 0x28
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	4b2d      	ldr	r3, [pc, #180]	@ (8000814 <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a2c      	ldr	r2, [pc, #176]	@ (8000814 <MX_GPIO_Init+0xd0>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b2a      	ldr	r3, [pc, #168]	@ (8000814 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b26      	ldr	r3, [pc, #152]	@ (8000814 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a25      	ldr	r2, [pc, #148]	@ (8000814 <MX_GPIO_Init+0xd0>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a1e      	ldr	r2, [pc, #120]	@ (8000814 <MX_GPIO_Init+0xd0>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000814 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a17      	ldr	r2, [pc, #92]	@ (8000814 <MX_GPIO_Init+0xd0>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2101      	movs	r1, #1
 80007ce:	4812      	ldr	r0, [pc, #72]	@ (8000818 <MX_GPIO_Init+0xd4>)
 80007d0:	f000 ff6c 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80007d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	480c      	ldr	r0, [pc, #48]	@ (800081c <MX_GPIO_Init+0xd8>)
 80007ec:	f000 fdb2 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80007f0:	2301      	movs	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_GPIO_Init+0xd4>)
 8000808:	f000 fda4 	bl	8001354 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	@ 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020400 	.word	0x40020400
 800081c:	40020800 	.word	0x40020800

08000820 <move>:

/* USER CODE BEGIN 4 */
void move(uint16_t xi, uint16_t yi, uint16_t dx, uint16_t dy, uint16_t dt, int n_tot)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	4604      	mov	r4, r0
 8000828:	4608      	mov	r0, r1
 800082a:	4611      	mov	r1, r2
 800082c:	461a      	mov	r2, r3
 800082e:	4623      	mov	r3, r4
 8000830:	80fb      	strh	r3, [r7, #6]
 8000832:	4603      	mov	r3, r0
 8000834:	80bb      	strh	r3, [r7, #4]
 8000836:	460b      	mov	r3, r1
 8000838:	807b      	strh	r3, [r7, #2]
 800083a:	4613      	mov	r3, r2
 800083c:	803b      	strh	r3, [r7, #0]
	int yj = yi + 1000;
 800083e:	88bb      	ldrh	r3, [r7, #4]
 8000840:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000844:	60bb      	str	r3, [r7, #8]
	for (int n = 0; n <= n_tot; n++)
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	e039      	b.n	80008c0 <move+0xa0>
	{
		tp_set_contact(3, xi+dx*n, yi+dy*n);
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	b29b      	uxth	r3, r3
 8000850:	887a      	ldrh	r2, [r7, #2]
 8000852:	fb12 f303 	smulbb	r3, r2, r3
 8000856:	b29a      	uxth	r2, r3
 8000858:	88fb      	ldrh	r3, [r7, #6]
 800085a:	4413      	add	r3, r2
 800085c:	b299      	uxth	r1, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	b29b      	uxth	r3, r3
 8000862:	883a      	ldrh	r2, [r7, #0]
 8000864:	fb12 f303 	smulbb	r3, r2, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	88bb      	ldrh	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	b29b      	uxth	r3, r3
 8000870:	461a      	mov	r2, r3
 8000872:	2003      	movs	r0, #3
 8000874:	f006 fdf2 	bl	800745c <tp_set_contact>
		tp_set_contact(4, xi+dx*n, yj+dy*n);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	b29b      	uxth	r3, r3
 800087c:	887a      	ldrh	r2, [r7, #2]
 800087e:	fb12 f303 	smulbb	r3, r2, r3
 8000882:	b29a      	uxth	r2, r3
 8000884:	88fb      	ldrh	r3, [r7, #6]
 8000886:	4413      	add	r3, r2
 8000888:	b299      	uxth	r1, r3
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	b29b      	uxth	r3, r3
 800088e:	883a      	ldrh	r2, [r7, #0]
 8000890:	fb12 f303 	smulbb	r3, r2, r3
 8000894:	b29a      	uxth	r2, r3
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	b29b      	uxth	r3, r3
 800089a:	4413      	add	r3, r2
 800089c:	b29b      	uxth	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	2004      	movs	r0, #4
 80008a2:	f006 fddb 	bl	800745c <tp_set_contact>
		tp_update(HAL_GetTick());
 80008a6:	f000 f9a1 	bl	8000bec <HAL_GetTick>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f006 fe35 	bl	800751c <tp_update>
		HAL_Delay(dt);
 80008b2:	8c3b      	ldrh	r3, [r7, #32]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 f9a5 	bl	8000c04 <HAL_Delay>
	for (int n = 0; n <= n_tot; n++)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	3301      	adds	r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c4:	429a      	cmp	r2, r3
 80008c6:	ddc1      	ble.n	800084c <move+0x2c>
	}
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd90      	pop	{r4, r7, pc}

080008d2 <rclick>:

void rclick(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
	tp_set_reset_buttons(2, 0, 1);
 80008d6:	2201      	movs	r2, #1
 80008d8:	2100      	movs	r1, #0
 80008da:	2002      	movs	r0, #2
 80008dc:	f006 fe04 	bl	80074e8 <tp_set_reset_buttons>
	tp_update(HAL_GetTick());
 80008e0:	f000 f984 	bl	8000bec <HAL_GetTick>
 80008e4:	4603      	mov	r3, r0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f006 fe18 	bl	800751c <tp_update>
	HAL_Delay(2);
 80008ec:	2002      	movs	r0, #2
 80008ee:	f000 f989 	bl	8000c04 <HAL_Delay>
	tp_set_reset_buttons(2, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2002      	movs	r0, #2
 80008f8:	f006 fdf6 	bl	80074e8 <tp_set_reset_buttons>
	tp_update(HAL_GetTick());
 80008fc:	f000 f976 	bl	8000bec <HAL_GetTick>
 8000900:	4603      	mov	r3, r0
 8000902:	4618      	mov	r0, r3
 8000904:	f006 fe0a 	bl	800751c <tp_update>
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <Error_Handler+0x8>

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <HAL_MspInit+0x4c>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000926:	4a0f      	ldr	r2, [pc, #60]	@ (8000964 <HAL_MspInit+0x4c>)
 8000928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800092c:	6453      	str	r3, [r2, #68]	@ 0x44
 800092e:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <HAL_MspInit+0x4c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	4a08      	ldr	r2, [pc, #32]	@ (8000964 <HAL_MspInit+0x4c>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000948:	6413      	str	r3, [r2, #64]	@ 0x40
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a17      	ldr	r2, [pc, #92]	@ (80009e4 <HAL_ADC_MspInit+0x7c>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d127      	bne.n	80009da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <HAL_ADC_MspInit+0x80>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	4a15      	ldr	r2, [pc, #84]	@ (80009e8 <HAL_ADC_MspInit+0x80>)
 8000994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000998:	6453      	str	r3, [r2, #68]	@ 0x44
 800099a:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <HAL_ADC_MspInit+0x80>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <HAL_ADC_MspInit+0x80>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a0e      	ldr	r2, [pc, #56]	@ (80009e8 <HAL_ADC_MspInit+0x80>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <HAL_ADC_MspInit+0x80>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009c2:	2303      	movs	r3, #3
 80009c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c6:	2303      	movs	r3, #3
 80009c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	@ (80009ec <HAL_ADC_MspInit+0x84>)
 80009d6:	f000 fcbd 	bl	8001354 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	@ 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40012000 	.word	0x40012000
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020000 	.word	0x40020000

080009f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0b      	ldr	r2, [pc, #44]	@ (8000a2c <HAL_TIM_Base_MspInit+0x3c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d10d      	bne.n	8000a1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <HAL_TIM_Base_MspInit+0x40>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	4a09      	ldr	r2, [pc, #36]	@ (8000a30 <HAL_TIM_Base_MspInit+0x40>)
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a12:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <HAL_TIM_Base_MspInit+0x40>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40014400 	.word	0x40014400
 8000a30:	40023800 	.word	0x40023800

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <NMI_Handler+0x4>

08000a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8a:	f000 f89b 	bl	8000bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a98:	4802      	ldr	r0, [pc, #8]	@ (8000aa4 <OTG_FS_IRQHandler+0x10>)
 8000a9a:	f000 ff6b 	bl	8001974 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200008c4 	.word	0x200008c4

08000aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <SystemInit+0x20>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ab2:	4a05      	ldr	r2, [pc, #20]	@ (8000ac8 <SystemInit+0x20>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000acc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ad0:	f7ff ffea 	bl	8000aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad4:	480c      	ldr	r0, [pc, #48]	@ (8000b08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ad6:	490d      	ldr	r1, [pc, #52]	@ (8000b0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000adc:	e002      	b.n	8000ae4 <LoopCopyDataInit>

08000ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae2:	3304      	adds	r3, #4

08000ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae8:	d3f9      	bcc.n	8000ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aea:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aec:	4c0a      	ldr	r4, [pc, #40]	@ (8000b18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af0:	e001      	b.n	8000af6 <LoopFillZerobss>

08000af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af4:	3204      	adds	r2, #4

08000af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000afa:	f007 fb15 	bl	8008128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afe:	f7ff fcf9 	bl	80004f4 <main>
  bx  lr    
 8000b02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b0c:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 8000b10:	0800830c 	.word	0x0800830c
  ldr r2, =_sbss
 8000b14:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 8000b18:	20000dc4 	.word	0x20000dc4

08000b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b1c:	e7fe      	b.n	8000b1c <ADC_IRQHandler>
	...

08000b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b24:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0d      	ldr	r2, [pc, #52]	@ (8000b60 <HAL_Init+0x40>)
 8000b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b30:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <HAL_Init+0x40>)
 8000b36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b3c:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a07      	ldr	r2, [pc, #28]	@ (8000b60 <HAL_Init+0x40>)
 8000b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f000 fbc1 	bl	80012d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f000 f808 	bl	8000b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b54:	f7ff fee0 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023c00 	.word	0x40023c00

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <HAL_InitTick+0x54>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <HAL_InitTick+0x58>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 fbd9 	bl	800133a <HAL_SYSTICK_Config>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00e      	b.n	8000bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b0f      	cmp	r3, #15
 8000b96:	d80a      	bhi.n	8000bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f000 fba1 	bl	80012e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba4:	4a06      	ldr	r2, [pc, #24]	@ (8000bc0 <HAL_InitTick+0x5c>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e000      	b.n	8000bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	20000004 	.word	0x20000004

08000bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_IncTick+0x20>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_IncTick+0x24>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <HAL_IncTick+0x24>)
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000008 	.word	0x20000008
 8000be8:	200003bc 	.word	0x200003bc

08000bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b03      	ldr	r3, [pc, #12]	@ (8000c00 <HAL_GetTick+0x14>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	200003bc 	.word	0x200003bc

08000c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c0c:	f7ff ffee 	bl	8000bec <HAL_GetTick>
 8000c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c1c:	d005      	beq.n	8000c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <HAL_Delay+0x44>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4413      	add	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c2a:	bf00      	nop
 8000c2c:	f7ff ffde 	bl	8000bec <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d8f7      	bhi.n	8000c2c <HAL_Delay+0x28>
  {
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008

08000c4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e033      	b.n	8000cca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d109      	bne.n	8000c7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff fe7c 	bl	8000968 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d118      	bne.n	8000cbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c92:	f023 0302 	bic.w	r3, r3, #2
 8000c96:	f043 0202 	orr.w	r2, r3, #2
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f000 f94a 	bl	8000f38 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	f023 0303 	bic.w	r3, r3, #3
 8000cb2:	f043 0201 	orr.w	r2, r3, #1
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cba:	e001      	b.n	8000cc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d101      	bne.n	8000cf0 <HAL_ADC_ConfigChannel+0x1c>
 8000cec:	2302      	movs	r3, #2
 8000cee:	e113      	b.n	8000f18 <HAL_ADC_ConfigChannel+0x244>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b09      	cmp	r3, #9
 8000cfe:	d925      	bls.n	8000d4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	68d9      	ldr	r1, [r3, #12]
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4613      	mov	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	4413      	add	r3, r2
 8000d14:	3b1e      	subs	r3, #30
 8000d16:	2207      	movs	r2, #7
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43da      	mvns	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	400a      	ands	r2, r1
 8000d24:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	68d9      	ldr	r1, [r3, #12]
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	4603      	mov	r3, r0
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	4403      	add	r3, r0
 8000d3e:	3b1e      	subs	r3, #30
 8000d40:	409a      	lsls	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	e022      	b.n	8000d92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6919      	ldr	r1, [r3, #16]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	2207      	movs	r2, #7
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	400a      	ands	r2, r1
 8000d6e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6919      	ldr	r1, [r3, #16]
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	4618      	mov	r0, r3
 8000d82:	4603      	mov	r3, r0
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4403      	add	r3, r0
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d824      	bhi.n	8000de4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	3b05      	subs	r3, #5
 8000dac:	221f      	movs	r2, #31
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	400a      	ands	r2, r1
 8000dba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	3b05      	subs	r3, #5
 8000dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	430a      	orrs	r2, r1
 8000de0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000de2:	e04c      	b.n	8000e7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b0c      	cmp	r3, #12
 8000dea:	d824      	bhi.n	8000e36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	3b23      	subs	r3, #35	@ 0x23
 8000dfe:	221f      	movs	r2, #31
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43da      	mvns	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	3b23      	subs	r3, #35	@ 0x23
 8000e28:	fa00 f203 	lsl.w	r2, r0, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e34:	e023      	b.n	8000e7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	3b41      	subs	r3, #65	@ 0x41
 8000e48:	221f      	movs	r2, #31
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	400a      	ands	r2, r1
 8000e56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	4618      	mov	r0, r3
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	3b41      	subs	r3, #65	@ 0x41
 8000e72:	fa00 f203 	lsl.w	r2, r0, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e7e:	4b29      	ldr	r3, [pc, #164]	@ (8000f24 <HAL_ADC_ConfigChannel+0x250>)
 8000e80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a28      	ldr	r2, [pc, #160]	@ (8000f28 <HAL_ADC_ConfigChannel+0x254>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d10f      	bne.n	8000eac <HAL_ADC_ConfigChannel+0x1d8>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b12      	cmp	r3, #18
 8000e92:	d10b      	bne.n	8000eac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f28 <HAL_ADC_ConfigChannel+0x254>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d12b      	bne.n	8000f0e <HAL_ADC_ConfigChannel+0x23a>
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a1c      	ldr	r2, [pc, #112]	@ (8000f2c <HAL_ADC_ConfigChannel+0x258>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d003      	beq.n	8000ec8 <HAL_ADC_ConfigChannel+0x1f4>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b11      	cmp	r3, #17
 8000ec6:	d122      	bne.n	8000f0e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a11      	ldr	r2, [pc, #68]	@ (8000f2c <HAL_ADC_ConfigChannel+0x258>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d111      	bne.n	8000f0e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <HAL_ADC_ConfigChannel+0x25c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a11      	ldr	r2, [pc, #68]	@ (8000f34 <HAL_ADC_ConfigChannel+0x260>)
 8000ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef4:	0c9a      	lsrs	r2, r3, #18
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000f00:	e002      	b.n	8000f08 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f9      	bne.n	8000f02 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	40012300 	.word	0x40012300
 8000f28:	40012000 	.word	0x40012000
 8000f2c:	10000012 	.word	0x10000012
 8000f30:	20000000 	.word	0x20000000
 8000f34:	431bde83 	.word	0x431bde83

08000f38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f40:	4b79      	ldr	r3, [pc, #484]	@ (8001128 <ADC_Init+0x1f0>)
 8000f42:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6859      	ldr	r1, [r3, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	021a      	lsls	r2, r3, #8
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000f90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6859      	ldr	r1, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000fb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6899      	ldr	r1, [r3, #8]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fca:	4a58      	ldr	r2, [pc, #352]	@ (800112c <ADC_Init+0x1f4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d022      	beq.n	8001016 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000fde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6899      	ldr	r1, [r3, #8]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001000:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6899      	ldr	r1, [r3, #8]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	430a      	orrs	r2, r1
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	e00f      	b.n	8001036 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001024:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001034:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0202 	bic.w	r2, r2, #2
 8001044:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6899      	ldr	r1, [r3, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7e1b      	ldrb	r3, [r3, #24]
 8001050:	005a      	lsls	r2, r3, #1
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d01b      	beq.n	800109c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001072:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001082:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6859      	ldr	r1, [r3, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108e:	3b01      	subs	r3, #1
 8001090:	035a      	lsls	r2, r3, #13
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	430a      	orrs	r2, r1
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	e007      	b.n	80010ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80010ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	051a      	lsls	r2, r3, #20
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80010e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6899      	ldr	r1, [r3, #8]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80010ee:	025a      	lsls	r2, r3, #9
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6899      	ldr	r1, [r3, #8]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	029a      	lsls	r2, r3, #10
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	609a      	str	r2, [r3, #8]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	40012300 	.word	0x40012300
 800112c:	0f000001 	.word	0x0f000001

08001130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800115c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	@ (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	db0b      	blt.n	80011be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 021f 	and.w	r2, r3, #31
 80011ac:	4907      	ldr	r1, [pc, #28]	@ (80011cc <__NVIC_EnableIRQ+0x38>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	2001      	movs	r0, #1
 80011b6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	@ (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	@ (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	@ 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
         );
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	@ 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800129c:	d301      	bcc.n	80012a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129e:	2301      	movs	r3, #1
 80012a0:	e00f      	b.n	80012c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a2:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <SysTick_Config+0x40>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012aa:	210f      	movs	r1, #15
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f7ff ff8e 	bl	80011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <SysTick_Config+0x40>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ba:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <SysTick_Config+0x40>)
 80012bc:	2207      	movs	r2, #7
 80012be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	e000e010 	.word	0xe000e010

080012d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ff29 	bl	8001130 <__NVIC_SetPriorityGrouping>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f8:	f7ff ff3e 	bl	8001178 <__NVIC_GetPriorityGrouping>
 80012fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f7ff ff8e 	bl	8001224 <NVIC_EncodePriority>
 8001308:	4602      	mov	r2, r0
 800130a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff5d 	bl	80011d0 <__NVIC_SetPriority>
}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff31 	bl	8001194 <__NVIC_EnableIRQ>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffa2 	bl	800128c <SysTick_Config>
 8001348:	4603      	mov	r3, r0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	@ 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	e165      	b.n	800163c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001370:	2201      	movs	r2, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	429a      	cmp	r2, r3
 800138a:	f040 8154 	bne.w	8001636 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	2b01      	cmp	r3, #1
 8001398:	d005      	beq.n	80013a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d130      	bne.n	8001408 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	2203      	movs	r2, #3
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013dc:	2201      	movs	r2, #1
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	091b      	lsrs	r3, r3, #4
 80013f2:	f003 0201 	and.w	r2, r3, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b03      	cmp	r3, #3
 8001412:	d017      	beq.n	8001444 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d123      	bne.n	8001498 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	08da      	lsrs	r2, r3, #3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3208      	adds	r2, #8
 8001458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	220f      	movs	r2, #15
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	08da      	lsrs	r2, r3, #3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3208      	adds	r2, #8
 8001492:	69b9      	ldr	r1, [r7, #24]
 8001494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2203      	movs	r2, #3
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0203 	and.w	r2, r3, #3
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 80ae 	beq.w	8001636 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b5d      	ldr	r3, [pc, #372]	@ (8001654 <HAL_GPIO_Init+0x300>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	4a5c      	ldr	r2, [pc, #368]	@ (8001654 <HAL_GPIO_Init+0x300>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001654 <HAL_GPIO_Init+0x300>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f6:	4a58      	ldr	r2, [pc, #352]	@ (8001658 <HAL_GPIO_Init+0x304>)
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3302      	adds	r3, #2
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220f      	movs	r2, #15
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4f      	ldr	r2, [pc, #316]	@ (800165c <HAL_GPIO_Init+0x308>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d025      	beq.n	800156e <HAL_GPIO_Init+0x21a>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4e      	ldr	r2, [pc, #312]	@ (8001660 <HAL_GPIO_Init+0x30c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d01f      	beq.n	800156a <HAL_GPIO_Init+0x216>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4d      	ldr	r2, [pc, #308]	@ (8001664 <HAL_GPIO_Init+0x310>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d019      	beq.n	8001566 <HAL_GPIO_Init+0x212>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4c      	ldr	r2, [pc, #304]	@ (8001668 <HAL_GPIO_Init+0x314>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0x20e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4b      	ldr	r2, [pc, #300]	@ (800166c <HAL_GPIO_Init+0x318>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d00d      	beq.n	800155e <HAL_GPIO_Init+0x20a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4a      	ldr	r2, [pc, #296]	@ (8001670 <HAL_GPIO_Init+0x31c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d007      	beq.n	800155a <HAL_GPIO_Init+0x206>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a49      	ldr	r2, [pc, #292]	@ (8001674 <HAL_GPIO_Init+0x320>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_GPIO_Init+0x202>
 8001552:	2306      	movs	r3, #6
 8001554:	e00c      	b.n	8001570 <HAL_GPIO_Init+0x21c>
 8001556:	2307      	movs	r3, #7
 8001558:	e00a      	b.n	8001570 <HAL_GPIO_Init+0x21c>
 800155a:	2305      	movs	r3, #5
 800155c:	e008      	b.n	8001570 <HAL_GPIO_Init+0x21c>
 800155e:	2304      	movs	r3, #4
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x21c>
 8001562:	2303      	movs	r3, #3
 8001564:	e004      	b.n	8001570 <HAL_GPIO_Init+0x21c>
 8001566:	2302      	movs	r3, #2
 8001568:	e002      	b.n	8001570 <HAL_GPIO_Init+0x21c>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_GPIO_Init+0x21c>
 800156e:	2300      	movs	r3, #0
 8001570:	69fa      	ldr	r2, [r7, #28]
 8001572:	f002 0203 	and.w	r2, r2, #3
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	4093      	lsls	r3, r2
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001580:	4935      	ldr	r1, [pc, #212]	@ (8001658 <HAL_GPIO_Init+0x304>)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3302      	adds	r3, #2
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158e:	4b3a      	ldr	r3, [pc, #232]	@ (8001678 <HAL_GPIO_Init+0x324>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015b2:	4a31      	ldr	r2, [pc, #196]	@ (8001678 <HAL_GPIO_Init+0x324>)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <HAL_GPIO_Init+0x324>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015dc:	4a26      	ldr	r2, [pc, #152]	@ (8001678 <HAL_GPIO_Init+0x324>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015e2:	4b25      	ldr	r3, [pc, #148]	@ (8001678 <HAL_GPIO_Init+0x324>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001606:	4a1c      	ldr	r2, [pc, #112]	@ (8001678 <HAL_GPIO_Init+0x324>)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800160c:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <HAL_GPIO_Init+0x324>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001630:	4a11      	ldr	r2, [pc, #68]	@ (8001678 <HAL_GPIO_Init+0x324>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3301      	adds	r3, #1
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	2b0f      	cmp	r3, #15
 8001640:	f67f ae96 	bls.w	8001370 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3724      	adds	r7, #36	@ 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40013800 	.word	0x40013800
 800165c:	40020000 	.word	0x40020000
 8001660:	40020400 	.word	0x40020400
 8001664:	40020800 	.word	0x40020800
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40021000 	.word	0x40021000
 8001670:	40021400 	.word	0x40021400
 8001674:	40021800 	.word	0x40021800
 8001678:	40013c00 	.word	0x40013c00

0800167c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	4013      	ands	r3, r2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
 8001698:	e001      	b.n	800169e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
 80016b8:	4613      	mov	r3, r2
 80016ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016bc:	787b      	ldrb	r3, [r7, #1]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016c8:	e003      	b.n	80016d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ca:	887b      	ldrh	r3, [r7, #2]
 80016cc:	041a      	lsls	r2, r3, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	619a      	str	r2, [r3, #24]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af02      	add	r7, sp, #8
 80016e4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e108      	b.n	8001902 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d106      	bne.n	8001710 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f006 f99e 	bl	8007a4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2203      	movs	r2, #3
 8001714:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800171e:	d102      	bne.n	8001726 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f002 fd59 	bl	80041e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6818      	ldr	r0, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7c1a      	ldrb	r2, [r3, #16]
 8001738:	f88d 2000 	strb.w	r2, [sp]
 800173c:	3304      	adds	r3, #4
 800173e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001740:	f002 fc38 	bl	8003fb4 <USB_CoreInit>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d005      	beq.n	8001756 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2202      	movs	r2, #2
 800174e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e0d5      	b.n	8001902 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f002 fd51 	bl	8004204 <USB_SetCurrentMode>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2202      	movs	r2, #2
 800176c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0c6      	b.n	8001902 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e04a      	b.n	8001810 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	3315      	adds	r3, #21
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800178e:	7bfa      	ldrb	r2, [r7, #15]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	3314      	adds	r3, #20
 800179e:	7bfa      	ldrb	r2, [r7, #15]
 80017a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017a2:	7bfa      	ldrb	r2, [r7, #15]
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	b298      	uxth	r0, r3
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	332e      	adds	r3, #46	@ 0x2e
 80017b6:	4602      	mov	r2, r0
 80017b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	3318      	adds	r3, #24
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	331c      	adds	r3, #28
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	3320      	adds	r3, #32
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	3324      	adds	r3, #36	@ 0x24
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	3301      	adds	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	791b      	ldrb	r3, [r3, #4]
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	429a      	cmp	r2, r3
 8001818:	d3af      	bcc.n	800177a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
 800181e:	e044      	b.n	80018aa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001820:	7bfa      	ldrb	r2, [r7, #15]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	4413      	add	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001836:	7bfa      	ldrb	r2, [r7, #15]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001848:	7bfa      	ldrb	r2, [r7, #15]
 800184a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800184c:	7bfa      	ldrb	r2, [r7, #15]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001878:	7bfa      	ldrb	r2, [r7, #15]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	3301      	adds	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	791b      	ldrb	r3, [r3, #4]
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3b5      	bcc.n	8001820 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7c1a      	ldrb	r2, [r3, #16]
 80018bc:	f88d 2000 	strb.w	r2, [sp]
 80018c0:	3304      	adds	r3, #4
 80018c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018c4:	f002 fcea 	bl	800429c <USB_DevInit>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2202      	movs	r2, #2
 80018d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e013      	b.n	8001902 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7b1b      	ldrb	r3, [r3, #12]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d102      	bne.n	80018f6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f001 f955 	bl	8002ba0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 fd21 	bl	8005342 <USB_DevDisconnect>

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b084      	sub	sp, #16
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800191e:	2b01      	cmp	r3, #1
 8001920:	d101      	bne.n	8001926 <HAL_PCD_Start+0x1c>
 8001922:	2302      	movs	r3, #2
 8001924:	e022      	b.n	800196c <HAL_PCD_Start+0x62>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800193e:	2b01      	cmp	r3, #1
 8001940:	d105      	bne.n	800194e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001946:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f002 fc34 	bl	80041c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f003 fccf 	bl	8005300 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b08d      	sub	sp, #52	@ 0x34
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f003 fd8d 	bl	80054aa <USB_GetMode>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 84b9 	bne.w	800230a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f003 fcf1 	bl	8005384 <USB_ReadInterrupts>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 84af 	beq.w	8002308 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	0a1b      	lsrs	r3, r3, #8
 80019b4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fcde 	bl	8005384 <USB_ReadInterrupts>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d107      	bne.n	80019e2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f002 0202 	and.w	r2, r2, #2
 80019e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 fccc 	bl	8005384 <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b10      	cmp	r3, #16
 80019f4:	d161      	bne.n	8001aba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699a      	ldr	r2, [r3, #24]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0210 	bic.w	r2, r2, #16
 8001a04:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	f003 020f 	and.w	r2, r3, #15
 8001a12:	4613      	mov	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	3304      	adds	r3, #4
 8001a24:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	0c5b      	lsrs	r3, r3, #17
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d124      	bne.n	8001a7c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d035      	beq.n	8001aaa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	6a38      	ldr	r0, [r7, #32]
 8001a52:	f003 fb03 	bl	800505c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a62:	441a      	add	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	695a      	ldr	r2, [r3, #20]
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a74:	441a      	add	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	615a      	str	r2, [r3, #20]
 8001a7a:	e016      	b.n	8001aaa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	0c5b      	lsrs	r3, r3, #17
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	2b06      	cmp	r3, #6
 8001a86:	d110      	bne.n	8001aaa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001a8e:	2208      	movs	r2, #8
 8001a90:	4619      	mov	r1, r3
 8001a92:	6a38      	ldr	r0, [r7, #32]
 8001a94:	f003 fae2 	bl	800505c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	695a      	ldr	r2, [r3, #20]
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	091b      	lsrs	r3, r3, #4
 8001aa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aa4:	441a      	add	r2, r3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	699a      	ldr	r2, [r3, #24]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 0210 	orr.w	r2, r2, #16
 8001ab8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fc60 	bl	8005384 <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001aca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001ace:	f040 80a7 	bne.w	8001c20 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fc65 	bl	80053aa <USB_ReadDevAllOutEpInterrupt>
 8001ae0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001ae2:	e099      	b.n	8001c18 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 808e 	beq.w	8001c0c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fc89 	bl	8005412 <USB_ReadDevOutEPInterrupt>
 8001b00:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00c      	beq.n	8001b26 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0e:	015a      	lsls	r2, r3, #5
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 feb7 	bl	8002894 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00c      	beq.n	8001b4a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	015a      	lsls	r2, r3, #5
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2308      	movs	r3, #8
 8001b40:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 ff8d 	bl	8002a64 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b56:	015a      	lsls	r2, r3, #5
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b60:	461a      	mov	r2, r3
 8001b62:	2310      	movs	r3, #16
 8001b64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d030      	beq.n	8001bd2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b78:	2b80      	cmp	r3, #128	@ 0x80
 8001b7a:	d109      	bne.n	8001b90 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b8e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b92:	4613      	mov	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	78db      	ldrb	r3, [r3, #3]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d108      	bne.n	8001bc0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4619      	mov	r1, r3
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f006 f862 	bl	8007c84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	015a      	lsls	r2, r3, #5
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bcc:	461a      	mov	r2, r3
 8001bce:	2302      	movs	r3, #2
 8001bd0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	f003 0320 	and.w	r3, r3, #32
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001be8:	461a      	mov	r2, r3
 8001bea:	2320      	movs	r3, #32
 8001bec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d009      	beq.n	8001c0c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfa:	015a      	lsls	r2, r3, #5
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c04:	461a      	mov	r2, r3
 8001c06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c0a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0e:	3301      	adds	r3, #1
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c14:	085b      	lsrs	r3, r3, #1
 8001c16:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f47f af62 	bne.w	8001ae4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 fbad 	bl	8005384 <USB_ReadInterrupts>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001c34:	f040 80db 	bne.w	8001dee <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f003 fbce 	bl	80053de <USB_ReadDevAllInEpInterrupt>
 8001c42:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001c48:	e0cd      	b.n	8001de6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80c2 	beq.w	8001dda <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 fbf4 	bl	800544e <USB_ReadDevInEPInterrupt>
 8001c66:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d057      	beq.n	8001d22 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	2201      	movs	r2, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69f9      	ldr	r1, [r7, #28]
 8001c8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001c92:	4013      	ands	r3, r2
 8001c94:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	015a      	lsls	r2, r3, #5
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	799b      	ldrb	r3, [r3, #6]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d132      	bne.n	8001d16 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3320      	adds	r3, #32
 8001cc0:	6819      	ldr	r1, [r3, #0]
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4403      	add	r3, r0
 8001cd0:	331c      	adds	r3, #28
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4419      	add	r1, r3
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4403      	add	r3, r0
 8001ce4:	3320      	adds	r3, #32
 8001ce6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d113      	bne.n	8001d16 <HAL_PCD_IRQHandler+0x3a2>
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3324      	adds	r3, #36	@ 0x24
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d108      	bne.n	8001d16 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d0e:	461a      	mov	r2, r3
 8001d10:	2101      	movs	r1, #1
 8001d12:	f003 fbfb 	bl	800550c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f005 ff2c 	bl	8007b7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	015a      	lsls	r2, r3, #5
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d38:	461a      	mov	r2, r3
 8001d3a:	2308      	movs	r3, #8
 8001d3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4a:	015a      	lsls	r2, r3, #5
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d54:	461a      	mov	r2, r3
 8001d56:	2310      	movs	r3, #16
 8001d58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d70:	461a      	mov	r2, r3
 8001d72:	2340      	movs	r3, #64	@ 0x40
 8001d74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d023      	beq.n	8001dc8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001d80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d82:	6a38      	ldr	r0, [r7, #32]
 8001d84:	f002 fbe8 	bl	8004558 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	3310      	adds	r3, #16
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	3304      	adds	r3, #4
 8001d9a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	78db      	ldrb	r3, [r3, #3]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d108      	bne.n	8001db6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2200      	movs	r2, #0
 8001da8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4619      	mov	r1, r3
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f005 ff79 	bl	8007ca8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001dd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 fcd0 	bl	800277a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	3301      	adds	r3, #1
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de2:	085b      	lsrs	r3, r3, #1
 8001de4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f47f af2e 	bne.w	8001c4a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 fac6 	bl	8005384 <USB_ReadInterrupts>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e02:	d122      	bne.n	8001e4a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e12:	f023 0301 	bic.w	r3, r3, #1
 8001e16:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d108      	bne.n	8001e34 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f006 f8e1 	bl	8007ff4 <HAL_PCDEx_LPM_Callback>
 8001e32:	e002      	b.n	8001e3a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f005 ff17 	bl	8007c68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001e48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 fa98 	bl	8005384 <USB_ReadInterrupts>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e5e:	d112      	bne.n	8001e86 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d102      	bne.n	8001e76 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f005 fed3 	bl	8007c1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001e84:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 fa7a 	bl	8005384 <USB_ReadInterrupts>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001e9a:	d121      	bne.n	8001ee0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001eaa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d111      	bne.n	8001eda <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	f003 020f 	and.w	r2, r3, #15
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f006 f88e 	bl	8007ff4 <HAL_PCDEx_LPM_Callback>
 8001ed8:	e002      	b.n	8001ee0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f005 fe9e 	bl	8007c1c <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 fa4d 	bl	8005384 <USB_ReadInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ef4:	f040 80b7 	bne.w	8002066 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2110      	movs	r1, #16
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 fb20 	bl	8004558 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f1c:	e046      	b.n	8001fac <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001f30:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f42:	0151      	lsls	r1, r2, #5
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	440a      	add	r2, r1
 8001f48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001f4c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001f64:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f76:	0151      	lsls	r1, r2, #5
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	440a      	add	r2, r1
 8001f7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001f80:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f96:	0151      	lsls	r1, r2, #5
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	440a      	add	r2, r1
 8001f9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001fa0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001fa4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa8:	3301      	adds	r3, #1
 8001faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	791b      	ldrb	r3, [r3, #4]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d3b2      	bcc.n	8001f1e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fc6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001fca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	7bdb      	ldrb	r3, [r3, #15]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d016      	beq.n	8002002 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fe4:	f043 030b 	orr.w	r3, r3, #11
 8001fe8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ffa:	f043 030b 	orr.w	r3, r3, #11
 8001ffe:	6453      	str	r3, [r2, #68]	@ 0x44
 8002000:	e015      	b.n	800202e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002010:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002014:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002018:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002028:	f043 030b 	orr.w	r3, r3, #11
 800202c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800203c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002040:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002050:	461a      	mov	r2, r3
 8002052:	f003 fa5b 	bl	800550c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002064:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f003 f98a 	bl	8005384 <USB_ReadInterrupts>
 8002070:	4603      	mov	r3, r0
 8002072:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800207a:	d123      	bne.n	80020c4 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f003 fa20 	bl	80054c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f002 fadd 	bl	800464a <USB_GetDevSpeed>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681c      	ldr	r4, [r3, #0]
 800209c:	f000 fe8a 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 80020a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020a6:	461a      	mov	r2, r3
 80020a8:	4620      	mov	r0, r4
 80020aa:	f001 ffe7 	bl	800407c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f005 fd8b 	bl	8007bca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695a      	ldr	r2, [r3, #20]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80020c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f003 f95b 	bl	8005384 <USB_ReadInterrupts>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d10a      	bne.n	80020ee <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f005 fd68 	bl	8007bae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f002 0208 	and.w	r2, r2, #8
 80020ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 f946 	bl	8005384 <USB_ReadInterrupts>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fe:	2b80      	cmp	r3, #128	@ 0x80
 8002100:	d123      	bne.n	800214a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800210e:	2301      	movs	r3, #1
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24
 8002112:	e014      	b.n	800213e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	b2db      	uxtb	r3, r3
 8002130:	4619      	mov	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 faf0 	bl	8002718 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	3301      	adds	r3, #1
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	791b      	ldrb	r3, [r3, #4]
 8002142:	461a      	mov	r2, r3
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	4293      	cmp	r3, r2
 8002148:	d3e4      	bcc.n	8002114 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f003 f918 	bl	8005384 <USB_ReadInterrupts>
 8002154:	4603      	mov	r3, r0
 8002156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800215a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800215e:	d13c      	bne.n	80021da <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002160:	2301      	movs	r3, #1
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
 8002164:	e02b      	b.n	80021be <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	4413      	add	r3, r2
 800216e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	3318      	adds	r3, #24
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d115      	bne.n	80021b8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800218c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800218e:	2b00      	cmp	r3, #0
 8002190:	da12      	bge.n	80021b8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	3317      	adds	r3, #23
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	4619      	mov	r1, r3
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fab0 	bl	8002718 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	3301      	adds	r3, #1
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	791b      	ldrb	r3, [r3, #4]
 80021c2:	461a      	mov	r2, r3
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d3cd      	bcc.n	8002166 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695a      	ldr	r2, [r3, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80021d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 f8d0 	bl	8005384 <USB_ReadInterrupts>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021ee:	d156      	bne.n	800229e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021f0:	2301      	movs	r3, #1
 80021f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021f4:	e045      	b.n	8002282 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d12e      	bne.n	800227c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800221e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002220:	2b00      	cmp	r3, #0
 8002222:	da2b      	bge.n	800227c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002230:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002234:	429a      	cmp	r2, r3
 8002236:	d121      	bne.n	800227c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10a      	bne.n	800227c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002274:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002278:	6053      	str	r3, [r2, #4]
            break;
 800227a:	e008      	b.n	800228e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800227c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227e:	3301      	adds	r3, #1
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	791b      	ldrb	r3, [r3, #4]
 8002286:	461a      	mov	r2, r3
 8002288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228a:	4293      	cmp	r3, r2
 800228c:	d3b3      	bcc.n	80021f6 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800229c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 f86e 	bl	8005384 <USB_ReadInterrupts>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80022ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b2:	d10a      	bne.n	80022ca <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f005 fd09 	bl	8007ccc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80022c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f003 f858 	bl	8005384 <USB_ReadInterrupts>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d115      	bne.n	800230a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f005 fcf9 	bl	8007ce8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	430a      	orrs	r2, r1
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	e000      	b.n	800230a <HAL_PCD_IRQHandler+0x996>
      return;
 8002308:	bf00      	nop
    }
  }
}
 800230a:	3734      	adds	r7, #52	@ 0x34
 800230c:	46bd      	mov	sp, r7
 800230e:	bd90      	pop	{r4, r7, pc}

08002310 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_PCD_SetAddress+0x1a>
 8002326:	2302      	movs	r3, #2
 8002328:	e012      	b.n	8002350 <HAL_PCD_SetAddress+0x40>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f002 ffb7 	bl	80052b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	4608      	mov	r0, r1
 8002362:	4611      	mov	r1, r2
 8002364:	461a      	mov	r2, r3
 8002366:	4603      	mov	r3, r0
 8002368:	70fb      	strb	r3, [r7, #3]
 800236a:	460b      	mov	r3, r1
 800236c:	803b      	strh	r3, [r7, #0]
 800236e:	4613      	mov	r3, r2
 8002370:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800237a:	2b00      	cmp	r3, #0
 800237c:	da0f      	bge.n	800239e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	f003 020f 	and.w	r2, r3, #15
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	3310      	adds	r3, #16
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	3304      	adds	r3, #4
 8002394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2201      	movs	r2, #1
 800239a:	705a      	strb	r2, [r3, #1]
 800239c:	e00f      	b.n	80023be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	f003 020f 	and.w	r2, r3, #15
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	4413      	add	r3, r2
 80023b4:	3304      	adds	r3, #4
 80023b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023ca:	883a      	ldrh	r2, [r7, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	78ba      	ldrb	r2, [r7, #2]
 80023d4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	785b      	ldrb	r3, [r3, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d004      	beq.n	80023e8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023e8:	78bb      	ldrb	r3, [r7, #2]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d102      	bne.n	80023f4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_PCD_EP_Open+0xaa>
 80023fe:	2302      	movs	r3, #2
 8002400:	e00e      	b.n	8002420 <HAL_PCD_EP_Open+0xc8>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68f9      	ldr	r1, [r7, #12]
 8002410:	4618      	mov	r0, r3
 8002412:	f002 f93f 	bl	8004694 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800241e:	7afb      	ldrb	r3, [r7, #11]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002434:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002438:	2b00      	cmp	r3, #0
 800243a:	da0f      	bge.n	800245c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	f003 020f 	and.w	r2, r3, #15
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	3310      	adds	r3, #16
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	3304      	adds	r3, #4
 8002452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	705a      	strb	r2, [r3, #1]
 800245a:	e00f      	b.n	800247c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	f003 020f 	and.w	r2, r3, #15
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	3304      	adds	r3, #4
 8002474:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	b2da      	uxtb	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_PCD_EP_Close+0x6e>
 8002492:	2302      	movs	r3, #2
 8002494:	e00e      	b.n	80024b4 <HAL_PCD_EP_Close+0x8c>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68f9      	ldr	r1, [r7, #12]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f002 f97d 	bl	80047a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	460b      	mov	r3, r1
 80024ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024cc:	7afb      	ldrb	r3, [r7, #11]
 80024ce:	f003 020f 	and.w	r2, r3, #15
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4413      	add	r3, r2
 80024e2:	3304      	adds	r3, #4
 80024e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2200      	movs	r2, #0
 80024f6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2200      	movs	r2, #0
 80024fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024fe:	7afb      	ldrb	r3, [r7, #11]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	b2da      	uxtb	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	799b      	ldrb	r3, [r3, #6]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d102      	bne.n	8002518 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	799b      	ldrb	r3, [r3, #6]
 8002520:	461a      	mov	r2, r3
 8002522:	6979      	ldr	r1, [r7, #20]
 8002524:	f002 fa1a 	bl	800495c <USB_EPStartXfer>

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	460b      	mov	r3, r1
 8002540:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002542:	7afb      	ldrb	r3, [r7, #11]
 8002544:	f003 020f 	and.w	r2, r3, #15
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	3310      	adds	r3, #16
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4413      	add	r3, r2
 8002556:	3304      	adds	r3, #4
 8002558:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2200      	movs	r2, #0
 800256a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2201      	movs	r2, #1
 8002570:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002572:	7afb      	ldrb	r3, [r7, #11]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	b2da      	uxtb	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	799b      	ldrb	r3, [r3, #6]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d102      	bne.n	800258c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	799b      	ldrb	r3, [r3, #6]
 8002594:	461a      	mov	r2, r3
 8002596:	6979      	ldr	r1, [r7, #20]
 8002598:	f002 f9e0 	bl	800495c <USB_EPStartXfer>

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	7912      	ldrb	r2, [r2, #4]
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e04f      	b.n	8002664 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	da0f      	bge.n	80025ec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	f003 020f 	and.w	r2, r3, #15
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	3310      	adds	r3, #16
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	4413      	add	r3, r2
 80025e0:	3304      	adds	r3, #4
 80025e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	705a      	strb	r2, [r3, #1]
 80025ea:	e00d      	b.n	8002608 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	3304      	adds	r3, #4
 8002600:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	b2da      	uxtb	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_PCD_EP_SetStall+0x82>
 8002624:	2302      	movs	r3, #2
 8002626:	e01d      	b.n	8002664 <HAL_PCD_EP_SetStall+0xbe>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68f9      	ldr	r1, [r7, #12]
 8002636:	4618      	mov	r0, r3
 8002638:	f002 fd68 	bl	800510c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	7999      	ldrb	r1, [r3, #6]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002654:	461a      	mov	r2, r3
 8002656:	f002 ff59 	bl	800550c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	7912      	ldrb	r2, [r2, #4]
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e042      	b.n	8002710 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800268a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800268e:	2b00      	cmp	r3, #0
 8002690:	da0f      	bge.n	80026b2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	f003 020f 	and.w	r2, r3, #15
 8002698:	4613      	mov	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	3310      	adds	r3, #16
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	3304      	adds	r3, #4
 80026a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	705a      	strb	r2, [r3, #1]
 80026b0:	e00f      	b.n	80026d2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	f003 020f 	and.w	r2, r3, #15
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	4413      	add	r3, r2
 80026c8:	3304      	adds	r3, #4
 80026ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_PCD_EP_ClrStall+0x86>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e00e      	b.n	8002710 <HAL_PCD_EP_ClrStall+0xa4>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68f9      	ldr	r1, [r7, #12]
 8002700:	4618      	mov	r0, r3
 8002702:	f002 fd71 	bl	80051e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002724:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002728:	2b00      	cmp	r3, #0
 800272a:	da0c      	bge.n	8002746 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	f003 020f 	and.w	r2, r3, #15
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	3310      	adds	r3, #16
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	4413      	add	r3, r2
 8002740:	3304      	adds	r3, #4
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	e00c      	b.n	8002760 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	f003 020f 	and.w	r2, r3, #15
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	4413      	add	r3, r2
 800275c:	3304      	adds	r3, #4
 800275e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68f9      	ldr	r1, [r7, #12]
 8002766:	4618      	mov	r0, r3
 8002768:	f002 fb90 	bl	8004e8c <USB_EPStopXfer>
 800276c:	4603      	mov	r3, r0
 800276e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002770:	7afb      	ldrb	r3, [r7, #11]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b08a      	sub	sp, #40	@ 0x28
 800277e:	af02      	add	r7, sp, #8
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	3310      	adds	r3, #16
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	3304      	adds	r3, #4
 80027a0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d901      	bls.n	80027b2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e06b      	b.n	800288a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d902      	bls.n	80027ce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3303      	adds	r3, #3
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027d6:	e02a      	b.n	800282e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d902      	bls.n	80027f4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	3303      	adds	r3, #3
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	68d9      	ldr	r1, [r3, #12]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	4603      	mov	r3, r0
 8002810:	6978      	ldr	r0, [r7, #20]
 8002812:	f002 fbe5 	bl	8004fe0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	441a      	add	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	441a      	add	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4413      	add	r3, r2
 8002836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	429a      	cmp	r2, r3
 8002842:	d809      	bhi.n	8002858 <PCD_WriteEmptyTxFifo+0xde>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	695a      	ldr	r2, [r3, #20]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800284c:	429a      	cmp	r2, r3
 800284e:	d203      	bcs.n	8002858 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1bf      	bne.n	80027d8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	429a      	cmp	r2, r3
 8002862:	d811      	bhi.n	8002888 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	2201      	movs	r2, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	43db      	mvns	r3, r3
 800287e:	6939      	ldr	r1, [r7, #16]
 8002880:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002884:	4013      	ands	r3, r2
 8002886:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	333c      	adds	r3, #60	@ 0x3c
 80028ac:	3304      	adds	r3, #4
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	799b      	ldrb	r3, [r3, #6]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d17b      	bne.n	80029c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d015      	beq.n	8002900 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	4a61      	ldr	r2, [pc, #388]	@ (8002a5c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	f240 80b9 	bls.w	8002a50 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80b3 	beq.w	8002a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028f6:	461a      	mov	r2, r3
 80028f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028fc:	6093      	str	r3, [r2, #8]
 80028fe:	e0a7      	b.n	8002a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4413      	add	r3, r2
 8002912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002916:	461a      	mov	r2, r3
 8002918:	2320      	movs	r3, #32
 800291a:	6093      	str	r3, [r2, #8]
 800291c:	e098      	b.n	8002a50 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	f040 8093 	bne.w	8002a50 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a5c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d90f      	bls.n	8002952 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	4413      	add	r3, r2
 8002944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002948:	461a      	mov	r2, r3
 800294a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800294e:	6093      	str	r3, [r2, #8]
 8002950:	e07e      	b.n	8002a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	4413      	add	r3, r2
 8002964:	3304      	adds	r3, #4
 8002966:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a1a      	ldr	r2, [r3, #32]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	0159      	lsls	r1, r3, #5
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	440b      	add	r3, r1
 8002974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297e:	1ad2      	subs	r2, r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d114      	bne.n	80029b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800299c:	461a      	mov	r2, r3
 800299e:	2101      	movs	r1, #1
 80029a0:	f002 fdb4 	bl	800550c <USB_EP0_OutStart>
 80029a4:	e006      	b.n	80029b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	441a      	add	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	4619      	mov	r1, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f005 f8c2 	bl	8007b44 <HAL_PCD_DataOutStageCallback>
 80029c0:	e046      	b.n	8002a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	4a26      	ldr	r2, [pc, #152]	@ (8002a60 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d124      	bne.n	8002a14 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029e0:	461a      	mov	r2, r3
 80029e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029e6:	6093      	str	r3, [r2, #8]
 80029e8:	e032      	b.n	8002a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a00:	461a      	mov	r2, r3
 8002a02:	2320      	movs	r3, #32
 8002a04:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f005 f899 	bl	8007b44 <HAL_PCD_DataOutStageCallback>
 8002a12:	e01d      	b.n	8002a50 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d114      	bne.n	8002a44 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d108      	bne.n	8002a44 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2100      	movs	r1, #0
 8002a40:	f002 fd64 	bl	800550c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	4619      	mov	r1, r3
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f005 f87a 	bl	8007b44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3720      	adds	r7, #32
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	4f54300a 	.word	0x4f54300a
 8002a60:	4f54310a 	.word	0x4f54310a

08002a64 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	333c      	adds	r3, #60	@ 0x3c
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4a15      	ldr	r2, [pc, #84]	@ (8002aec <PCD_EP_OutSetupPacket_int+0x88>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d90e      	bls.n	8002ab8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d009      	beq.n	8002ab8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ab6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f005 f831 	bl	8007b20 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8002aec <PCD_EP_OutSetupPacket_int+0x88>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d90c      	bls.n	8002ae0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	799b      	ldrb	r3, [r3, #6]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d108      	bne.n	8002ae0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2101      	movs	r1, #1
 8002adc:	f002 fd16 	bl	800550c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	4f54300a 	.word	0x4f54300a

08002af0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	70fb      	strb	r3, [r7, #3]
 8002afc:	4613      	mov	r3, r2
 8002afe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d107      	bne.n	8002b1e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b0e:	883b      	ldrh	r3, [r7, #0]
 8002b10:	0419      	lsls	r1, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b1c:	e028      	b.n	8002b70 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b24:	0c1b      	lsrs	r3, r3, #16
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	4413      	add	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	73fb      	strb	r3, [r7, #15]
 8002b30:	e00d      	b.n	8002b4e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	3340      	adds	r3, #64	@ 0x40
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	4413      	add	r3, r2
 8002b46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d3ec      	bcc.n	8002b32 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b58:	883b      	ldrh	r3, [r7, #0]
 8002b5a:	0418      	lsls	r0, r3, #16
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6819      	ldr	r1, [r3, #0]
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	4302      	orrs	r2, r0
 8002b68:	3340      	adds	r3, #64	@ 0x40
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	460b      	mov	r3, r1
 8002b88:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	887a      	ldrh	r2, [r7, #2]
 8002b90:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd2:	f043 0303 	orr.w	r3, r3, #3
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0cc      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b68      	ldr	r3, [pc, #416]	@ (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d90c      	bls.n	8002c24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b65      	ldr	r3, [pc, #404]	@ (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c12:	4b63      	ldr	r3, [pc, #396]	@ (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0b8      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d020      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c3c:	4b59      	ldr	r3, [pc, #356]	@ (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4a58      	ldr	r2, [pc, #352]	@ (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c54:	4b53      	ldr	r3, [pc, #332]	@ (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4a52      	ldr	r2, [pc, #328]	@ (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c60:	4b50      	ldr	r3, [pc, #320]	@ (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	494d      	ldr	r1, [pc, #308]	@ (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d044      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	4b47      	ldr	r3, [pc, #284]	@ (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d119      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e07f      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d003      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e06f      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e067      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc6:	4b37      	ldr	r3, [pc, #220]	@ (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f023 0203 	bic.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4934      	ldr	r1, [pc, #208]	@ (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd8:	f7fd ff88 	bl	8000bec <HAL_GetTick>
 8002cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce0:	f7fd ff84 	bl	8000bec <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e04f      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 020c 	and.w	r2, r3, #12
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d1eb      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d08:	4b25      	ldr	r3, [pc, #148]	@ (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d20c      	bcs.n	8002d30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b22      	ldr	r3, [pc, #136]	@ (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b20      	ldr	r3, [pc, #128]	@ (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e032      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d3c:	4b19      	ldr	r3, [pc, #100]	@ (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4916      	ldr	r1, [pc, #88]	@ (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d5a:	4b12      	ldr	r3, [pc, #72]	@ (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	490e      	ldr	r1, [pc, #56]	@ (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d6e:	f000 fb57 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 8002d72:	4602      	mov	r2, r0
 8002d74:	4b0b      	ldr	r3, [pc, #44]	@ (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	490a      	ldr	r1, [pc, #40]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d80:	5ccb      	ldrb	r3, [r1, r3]
 8002d82:	fa22 f303 	lsr.w	r3, r2, r3
 8002d86:	4a09      	ldr	r2, [pc, #36]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d8a:	4b09      	ldr	r3, [pc, #36]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fee8 	bl	8000b64 <HAL_InitTick>

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40023c00 	.word	0x40023c00
 8002da4:	40023800 	.word	0x40023800
 8002da8:	080081e8 	.word	0x080081e8
 8002dac:	20000000 	.word	0x20000000
 8002db0:	20000004 	.word	0x20000004

08002db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db8:	4b03      	ldr	r3, [pc, #12]	@ (8002dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000000 	.word	0x20000000

08002dcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08c      	sub	sp, #48	@ 0x30
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d010      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002e04:	4b6f      	ldr	r3, [pc, #444]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e0a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e12:	496c      	ldr	r1, [pc, #432]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002e22:	2301      	movs	r3, #1
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d010      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002e32:	4b64      	ldr	r3, [pc, #400]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e38:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e40:	4960      	ldr	r1, [pc, #384]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002e50:	2301      	movs	r3, #1
 8002e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d017      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e60:	4b58      	ldr	r3, [pc, #352]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	4955      	ldr	r1, [pc, #340]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002e80:	2301      	movs	r3, #1
 8002e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d017      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e9c:	4b49      	ldr	r3, [pc, #292]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ea2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eaa:	4946      	ldr	r1, [pc, #280]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 808a 	beq.w	8002fee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	4b39      	ldr	r3, [pc, #228]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	4a38      	ldr	r2, [pc, #224]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eea:	4b36      	ldr	r3, [pc, #216]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ef6:	4b34      	ldr	r3, [pc, #208]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a33      	ldr	r2, [pc, #204]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f02:	f7fd fe73 	bl	8000bec <HAL_GetTick>
 8002f06:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f08:	e008      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f0a:	f7fd fe6f 	bl	8000bec <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e278      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f28:	4b26      	ldr	r3, [pc, #152]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f30:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d02f      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f40:	6a3a      	ldr	r2, [r7, #32]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d028      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f46:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f4e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f50:	4b1e      	ldr	r3, [pc, #120]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f56:	4b1d      	ldr	r3, [pc, #116]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002f5c:	4a19      	ldr	r2, [pc, #100]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f62:	4b18      	ldr	r3, [pc, #96]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d114      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f6e:	f7fd fe3d 	bl	8000bec <HAL_GetTick>
 8002f72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	e00a      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	f7fd fe39 	bl	8000bec <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e240      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ee      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fa0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fa4:	d114      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002fa6:	4b07      	ldr	r3, [pc, #28]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002fb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fba:	4902      	ldr	r1, [pc, #8]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	608b      	str	r3, [r1, #8]
 8002fc0:	e00c      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	42470e40 	.word	0x42470e40
 8002fd0:	4b4a      	ldr	r3, [pc, #296]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	4a49      	ldr	r2, [pc, #292]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fd6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002fda:	6093      	str	r3, [r2, #8]
 8002fdc:	4b47      	ldr	r3, [pc, #284]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe8:	4944      	ldr	r1, [pc, #272]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003000:	4b3f      	ldr	r3, [pc, #252]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003002:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003010:	4b3a      	ldr	r3, [pc, #232]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003016:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301e:	4937      	ldr	r1, [pc, #220]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003032:	4b32      	ldr	r3, [pc, #200]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003038:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003040:	492e      	ldr	r1, [pc, #184]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d011      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003054:	4b29      	ldr	r3, [pc, #164]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800305a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003062:	4926      	ldr	r1, [pc, #152]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003072:	d101      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003074:	2301      	movs	r3, #1
 8003076:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003084:	4b1d      	ldr	r3, [pc, #116]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800308a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003092:	491a      	ldr	r1, [pc, #104]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d011      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80030a6:	4b15      	ldr	r3, [pc, #84]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ac:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b4:	4911      	ldr	r1, [pc, #68]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030c4:	d101      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80030c6:	2301      	movs	r3, #1
 80030c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80030ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d005      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030d8:	f040 80ff 	bne.w	80032da <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030dc:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030e2:	f7fd fd83 	bl	8000bec <HAL_GetTick>
 80030e6:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030e8:	e00e      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030ea:	f7fd fd7f 	bl	8000bec <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d907      	bls.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e188      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x642>
 80030fc:	40023800 	.word	0x40023800
 8003100:	424711e0 	.word	0x424711e0
 8003104:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003108:	4b7e      	ldr	r3, [pc, #504]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1ea      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003124:	2b00      	cmp	r3, #0
 8003126:	d009      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003130:	2b00      	cmp	r3, #0
 8003132:	d028      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003138:	2b00      	cmp	r3, #0
 800313a:	d124      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800313c:	4b71      	ldr	r3, [pc, #452]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800313e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003142:	0c1b      	lsrs	r3, r3, #16
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	3301      	adds	r3, #1
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800314e:	4b6d      	ldr	r3, [pc, #436]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003150:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003154:	0e1b      	lsrs	r3, r3, #24
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	019b      	lsls	r3, r3, #6
 8003166:	431a      	orrs	r2, r3
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	3b01      	subs	r3, #1
 800316e:	041b      	lsls	r3, r3, #16
 8003170:	431a      	orrs	r2, r3
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	061b      	lsls	r3, r3, #24
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	071b      	lsls	r3, r3, #28
 800317e:	4961      	ldr	r1, [pc, #388]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b00      	cmp	r3, #0
 8003190:	d004      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d035      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031b0:	d130      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80031b2:	4b54      	ldr	r3, [pc, #336]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	3301      	adds	r3, #1
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031ca:	0f1b      	lsrs	r3, r3, #28
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	019b      	lsls	r3, r3, #6
 80031dc:	431a      	orrs	r2, r3
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	3b01      	subs	r3, #1
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	061b      	lsls	r3, r3, #24
 80031ee:	431a      	orrs	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	071b      	lsls	r3, r3, #28
 80031f4:	4943      	ldr	r1, [pc, #268]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031fc:	4b41      	ldr	r3, [pc, #260]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003202:	f023 021f 	bic.w	r2, r3, #31
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320a:	3b01      	subs	r3, #1
 800320c:	493d      	ldr	r1, [pc, #244]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321c:	2b00      	cmp	r3, #0
 800321e:	d029      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003228:	d124      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800322a:	4b36      	ldr	r3, [pc, #216]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800322c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	3301      	adds	r3, #1
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800323c:	4b31      	ldr	r3, [pc, #196]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800323e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003242:	0f1b      	lsrs	r3, r3, #28
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	019b      	lsls	r3, r3, #6
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	3b01      	subs	r3, #1
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	431a      	orrs	r2, r3
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	061b      	lsls	r3, r3, #24
 8003266:	431a      	orrs	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	071b      	lsls	r3, r3, #28
 800326c:	4925      	ldr	r1, [pc, #148]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800327c:	2b00      	cmp	r3, #0
 800327e:	d016      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	019b      	lsls	r3, r3, #6
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	085b      	lsrs	r3, r3, #1
 8003292:	3b01      	subs	r3, #1
 8003294:	041b      	lsls	r3, r3, #16
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	071b      	lsls	r3, r3, #28
 80032a6:	4917      	ldr	r1, [pc, #92]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032ae:	4b16      	ldr	r3, [pc, #88]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032b4:	f7fd fc9a 	bl	8000bec <HAL_GetTick>
 80032b8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032bc:	f7fd fc96 	bl	8000bec <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e09f      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80032da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032dc:	2b01      	cmp	r3, #1
 80032de:	f040 8095 	bne.w	800340c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032e2:	4b0a      	ldr	r3, [pc, #40]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032e8:	f7fd fc80 	bl	8000bec <HAL_GetTick>
 80032ec:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032ee:	e00f      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80032f0:	f7fd fc7c 	bl	8000bec <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d908      	bls.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e085      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800
 8003308:	42470068 	.word	0x42470068
 800330c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003310:	4b41      	ldr	r3, [pc, #260]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003318:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800331c:	d0e8      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800333a:	2b00      	cmp	r3, #0
 800333c:	d02b      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003342:	2b00      	cmp	r3, #0
 8003344:	d127      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003346:	4b34      	ldr	r3, [pc, #208]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	3301      	adds	r3, #1
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699a      	ldr	r2, [r3, #24]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	019b      	lsls	r3, r3, #6
 8003362:	431a      	orrs	r2, r3
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	3b01      	subs	r3, #1
 800336a:	041b      	lsls	r3, r3, #16
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	061b      	lsls	r3, r3, #24
 8003374:	4928      	ldr	r1, [pc, #160]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800337c:	4b26      	ldr	r3, [pc, #152]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800337e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003382:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338a:	3b01      	subs	r3, #1
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	4922      	ldr	r1, [pc, #136]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d01d      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x612>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033aa:	d118      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b2:	0e1b      	lsrs	r3, r3, #24
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	019b      	lsls	r3, r3, #6
 80033c4:	431a      	orrs	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	085b      	lsrs	r3, r3, #1
 80033cc:	3b01      	subs	r3, #1
 80033ce:	041b      	lsls	r3, r3, #16
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	4910      	ldr	r1, [pc, #64]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033de:	4b0f      	ldr	r3, [pc, #60]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033e4:	f7fd fc02 	bl	8000bec <HAL_GetTick>
 80033e8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80033ec:	f7fd fbfe 	bl	8000bec <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e007      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033fe:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003406:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800340a:	d1ef      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3730      	adds	r7, #48	@ 0x30
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800
 800341c:	42470070 	.word	0x42470070

08003420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003424:	b0ae      	sub	sp, #184	@ 0xb8
 8003426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003446:	4bcb      	ldr	r3, [pc, #812]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b0c      	cmp	r3, #12
 8003450:	f200 8206 	bhi.w	8003860 <HAL_RCC_GetSysClockFreq+0x440>
 8003454:	a201      	add	r2, pc, #4	@ (adr r2, 800345c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	08003491 	.word	0x08003491
 8003460:	08003861 	.word	0x08003861
 8003464:	08003861 	.word	0x08003861
 8003468:	08003861 	.word	0x08003861
 800346c:	08003499 	.word	0x08003499
 8003470:	08003861 	.word	0x08003861
 8003474:	08003861 	.word	0x08003861
 8003478:	08003861 	.word	0x08003861
 800347c:	080034a1 	.word	0x080034a1
 8003480:	08003861 	.word	0x08003861
 8003484:	08003861 	.word	0x08003861
 8003488:	08003861 	.word	0x08003861
 800348c:	08003691 	.word	0x08003691
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003490:	4bb9      	ldr	r3, [pc, #740]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x358>)
 8003492:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003496:	e1e7      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003498:	4bb8      	ldr	r3, [pc, #736]	@ (800377c <HAL_RCC_GetSysClockFreq+0x35c>)
 800349a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800349e:	e1e3      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a0:	4bb4      	ldr	r3, [pc, #720]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ac:	4bb1      	ldr	r3, [pc, #708]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d071      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b8:	4bae      	ldr	r3, [pc, #696]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	099b      	lsrs	r3, r3, #6
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034c4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80034c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80034da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034de:	4622      	mov	r2, r4
 80034e0:	462b      	mov	r3, r5
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f04f 0100 	mov.w	r1, #0
 80034ea:	0159      	lsls	r1, r3, #5
 80034ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f0:	0150      	lsls	r0, r2, #5
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4621      	mov	r1, r4
 80034f8:	1a51      	subs	r1, r2, r1
 80034fa:	6439      	str	r1, [r7, #64]	@ 0x40
 80034fc:	4629      	mov	r1, r5
 80034fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003502:	647b      	str	r3, [r7, #68]	@ 0x44
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003510:	4649      	mov	r1, r9
 8003512:	018b      	lsls	r3, r1, #6
 8003514:	4641      	mov	r1, r8
 8003516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800351a:	4641      	mov	r1, r8
 800351c:	018a      	lsls	r2, r1, #6
 800351e:	4641      	mov	r1, r8
 8003520:	1a51      	subs	r1, r2, r1
 8003522:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003524:	4649      	mov	r1, r9
 8003526:	eb63 0301 	sbc.w	r3, r3, r1
 800352a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003538:	4649      	mov	r1, r9
 800353a:	00cb      	lsls	r3, r1, #3
 800353c:	4641      	mov	r1, r8
 800353e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003542:	4641      	mov	r1, r8
 8003544:	00ca      	lsls	r2, r1, #3
 8003546:	4610      	mov	r0, r2
 8003548:	4619      	mov	r1, r3
 800354a:	4603      	mov	r3, r0
 800354c:	4622      	mov	r2, r4
 800354e:	189b      	adds	r3, r3, r2
 8003550:	633b      	str	r3, [r7, #48]	@ 0x30
 8003552:	462b      	mov	r3, r5
 8003554:	460a      	mov	r2, r1
 8003556:	eb42 0303 	adc.w	r3, r2, r3
 800355a:	637b      	str	r3, [r7, #52]	@ 0x34
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003568:	4629      	mov	r1, r5
 800356a:	024b      	lsls	r3, r1, #9
 800356c:	4621      	mov	r1, r4
 800356e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003572:	4621      	mov	r1, r4
 8003574:	024a      	lsls	r2, r1, #9
 8003576:	4610      	mov	r0, r2
 8003578:	4619      	mov	r1, r3
 800357a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003584:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003588:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800358c:	f7fc fe3a 	bl	8000204 <__aeabi_uldivmod>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4613      	mov	r3, r2
 8003596:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800359a:	e067      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359c:	4b75      	ldr	r3, [pc, #468]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	099b      	lsrs	r3, r3, #6
 80035a2:	2200      	movs	r2, #0
 80035a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035a8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80035ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035b6:	2300      	movs	r3, #0
 80035b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80035be:	4622      	mov	r2, r4
 80035c0:	462b      	mov	r3, r5
 80035c2:	f04f 0000 	mov.w	r0, #0
 80035c6:	f04f 0100 	mov.w	r1, #0
 80035ca:	0159      	lsls	r1, r3, #5
 80035cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d0:	0150      	lsls	r0, r2, #5
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4621      	mov	r1, r4
 80035d8:	1a51      	subs	r1, r2, r1
 80035da:	62b9      	str	r1, [r7, #40]	@ 0x28
 80035dc:	4629      	mov	r1, r5
 80035de:	eb63 0301 	sbc.w	r3, r3, r1
 80035e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80035f0:	4649      	mov	r1, r9
 80035f2:	018b      	lsls	r3, r1, #6
 80035f4:	4641      	mov	r1, r8
 80035f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035fa:	4641      	mov	r1, r8
 80035fc:	018a      	lsls	r2, r1, #6
 80035fe:	4641      	mov	r1, r8
 8003600:	ebb2 0a01 	subs.w	sl, r2, r1
 8003604:	4649      	mov	r1, r9
 8003606:	eb63 0b01 	sbc.w	fp, r3, r1
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003616:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800361a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800361e:	4692      	mov	sl, r2
 8003620:	469b      	mov	fp, r3
 8003622:	4623      	mov	r3, r4
 8003624:	eb1a 0303 	adds.w	r3, sl, r3
 8003628:	623b      	str	r3, [r7, #32]
 800362a:	462b      	mov	r3, r5
 800362c:	eb4b 0303 	adc.w	r3, fp, r3
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800363e:	4629      	mov	r1, r5
 8003640:	028b      	lsls	r3, r1, #10
 8003642:	4621      	mov	r1, r4
 8003644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003648:	4621      	mov	r1, r4
 800364a:	028a      	lsls	r2, r1, #10
 800364c:	4610      	mov	r0, r2
 800364e:	4619      	mov	r1, r3
 8003650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003654:	2200      	movs	r2, #0
 8003656:	673b      	str	r3, [r7, #112]	@ 0x70
 8003658:	677a      	str	r2, [r7, #116]	@ 0x74
 800365a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800365e:	f7fc fdd1 	bl	8000204 <__aeabi_uldivmod>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4613      	mov	r3, r2
 8003668:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800366c:	4b41      	ldr	r3, [pc, #260]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	3301      	adds	r3, #1
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800367e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800368e:	e0eb      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003690:	4b38      	ldr	r3, [pc, #224]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003698:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800369c:	4b35      	ldr	r3, [pc, #212]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d06b      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a8:	4b32      	ldr	r3, [pc, #200]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	099b      	lsrs	r3, r3, #6
 80036ae:	2200      	movs	r2, #0
 80036b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80036bc:	2300      	movs	r3, #0
 80036be:	667b      	str	r3, [r7, #100]	@ 0x64
 80036c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80036c4:	4622      	mov	r2, r4
 80036c6:	462b      	mov	r3, r5
 80036c8:	f04f 0000 	mov.w	r0, #0
 80036cc:	f04f 0100 	mov.w	r1, #0
 80036d0:	0159      	lsls	r1, r3, #5
 80036d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d6:	0150      	lsls	r0, r2, #5
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4621      	mov	r1, r4
 80036de:	1a51      	subs	r1, r2, r1
 80036e0:	61b9      	str	r1, [r7, #24]
 80036e2:	4629      	mov	r1, r5
 80036e4:	eb63 0301 	sbc.w	r3, r3, r1
 80036e8:	61fb      	str	r3, [r7, #28]
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80036f6:	4659      	mov	r1, fp
 80036f8:	018b      	lsls	r3, r1, #6
 80036fa:	4651      	mov	r1, sl
 80036fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003700:	4651      	mov	r1, sl
 8003702:	018a      	lsls	r2, r1, #6
 8003704:	4651      	mov	r1, sl
 8003706:	ebb2 0801 	subs.w	r8, r2, r1
 800370a:	4659      	mov	r1, fp
 800370c:	eb63 0901 	sbc.w	r9, r3, r1
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800371c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003720:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003724:	4690      	mov	r8, r2
 8003726:	4699      	mov	r9, r3
 8003728:	4623      	mov	r3, r4
 800372a:	eb18 0303 	adds.w	r3, r8, r3
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	462b      	mov	r3, r5
 8003732:	eb49 0303 	adc.w	r3, r9, r3
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003744:	4629      	mov	r1, r5
 8003746:	024b      	lsls	r3, r1, #9
 8003748:	4621      	mov	r1, r4
 800374a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800374e:	4621      	mov	r1, r4
 8003750:	024a      	lsls	r2, r1, #9
 8003752:	4610      	mov	r0, r2
 8003754:	4619      	mov	r1, r3
 8003756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800375a:	2200      	movs	r2, #0
 800375c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800375e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003760:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003764:	f7fc fd4e 	bl	8000204 <__aeabi_uldivmod>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4613      	mov	r3, r2
 800376e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003772:	e065      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x420>
 8003774:	40023800 	.word	0x40023800
 8003778:	00f42400 	.word	0x00f42400
 800377c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003780:	4b3d      	ldr	r3, [pc, #244]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x458>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	099b      	lsrs	r3, r3, #6
 8003786:	2200      	movs	r2, #0
 8003788:	4618      	mov	r0, r3
 800378a:	4611      	mov	r1, r2
 800378c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003790:	653b      	str	r3, [r7, #80]	@ 0x50
 8003792:	2300      	movs	r3, #0
 8003794:	657b      	str	r3, [r7, #84]	@ 0x54
 8003796:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800379a:	4642      	mov	r2, r8
 800379c:	464b      	mov	r3, r9
 800379e:	f04f 0000 	mov.w	r0, #0
 80037a2:	f04f 0100 	mov.w	r1, #0
 80037a6:	0159      	lsls	r1, r3, #5
 80037a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ac:	0150      	lsls	r0, r2, #5
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4641      	mov	r1, r8
 80037b4:	1a51      	subs	r1, r2, r1
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	4649      	mov	r1, r9
 80037ba:	eb63 0301 	sbc.w	r3, r3, r1
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80037cc:	4659      	mov	r1, fp
 80037ce:	018b      	lsls	r3, r1, #6
 80037d0:	4651      	mov	r1, sl
 80037d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037d6:	4651      	mov	r1, sl
 80037d8:	018a      	lsls	r2, r1, #6
 80037da:	4651      	mov	r1, sl
 80037dc:	1a54      	subs	r4, r2, r1
 80037de:	4659      	mov	r1, fp
 80037e0:	eb63 0501 	sbc.w	r5, r3, r1
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	00eb      	lsls	r3, r5, #3
 80037ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037f2:	00e2      	lsls	r2, r4, #3
 80037f4:	4614      	mov	r4, r2
 80037f6:	461d      	mov	r5, r3
 80037f8:	4643      	mov	r3, r8
 80037fa:	18e3      	adds	r3, r4, r3
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	464b      	mov	r3, r9
 8003800:	eb45 0303 	adc.w	r3, r5, r3
 8003804:	607b      	str	r3, [r7, #4]
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003812:	4629      	mov	r1, r5
 8003814:	028b      	lsls	r3, r1, #10
 8003816:	4621      	mov	r1, r4
 8003818:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800381c:	4621      	mov	r1, r4
 800381e:	028a      	lsls	r2, r1, #10
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003828:	2200      	movs	r2, #0
 800382a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800382c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800382e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003832:	f7fc fce7 	bl	8000204 <__aeabi_uldivmod>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4613      	mov	r3, r2
 800383c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003840:	4b0d      	ldr	r3, [pc, #52]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x458>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	0f1b      	lsrs	r3, r3, #28
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800384e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003852:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003856:	fbb2 f3f3 	udiv	r3, r2, r3
 800385a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800385e:	e003      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003860:	4b06      	ldr	r3, [pc, #24]	@ (800387c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003862:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003866:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003868:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800386c:	4618      	mov	r0, r3
 800386e:	37b8      	adds	r7, #184	@ 0xb8
 8003870:	46bd      	mov	sp, r7
 8003872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800
 800387c:	00f42400 	.word	0x00f42400

08003880 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e28d      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8083 	beq.w	80039a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038a0:	4b94      	ldr	r3, [pc, #592]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d019      	beq.n	80038e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038ac:	4b91      	ldr	r3, [pc, #580]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d106      	bne.n	80038c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038b8:	4b8e      	ldr	r3, [pc, #568]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038c4:	d00c      	beq.n	80038e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038c6:	4b8b      	ldr	r3, [pc, #556]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	d112      	bne.n	80038f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038d2:	4b88      	ldr	r3, [pc, #544]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038de:	d10b      	bne.n	80038f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e0:	4b84      	ldr	r3, [pc, #528]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d05b      	beq.n	80039a4 <HAL_RCC_OscConfig+0x124>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d157      	bne.n	80039a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e25a      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003900:	d106      	bne.n	8003910 <HAL_RCC_OscConfig+0x90>
 8003902:	4b7c      	ldr	r3, [pc, #496]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a7b      	ldr	r2, [pc, #492]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	e01d      	b.n	800394c <HAL_RCC_OscConfig+0xcc>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003918:	d10c      	bne.n	8003934 <HAL_RCC_OscConfig+0xb4>
 800391a:	4b76      	ldr	r3, [pc, #472]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a75      	ldr	r2, [pc, #468]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003920:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	4b73      	ldr	r3, [pc, #460]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a72      	ldr	r2, [pc, #456]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 800392c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e00b      	b.n	800394c <HAL_RCC_OscConfig+0xcc>
 8003934:	4b6f      	ldr	r3, [pc, #444]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a6e      	ldr	r2, [pc, #440]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 800393a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	4b6c      	ldr	r3, [pc, #432]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a6b      	ldr	r2, [pc, #428]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003946:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800394a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d013      	beq.n	800397c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fd f94a 	bl	8000bec <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800395c:	f7fd f946 	bl	8000bec <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b64      	cmp	r3, #100	@ 0x64
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e21f      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396e:	4b61      	ldr	r3, [pc, #388]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCC_OscConfig+0xdc>
 800397a:	e014      	b.n	80039a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fd f936 	bl	8000bec <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003984:	f7fd f932 	bl	8000bec <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	@ 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e20b      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003996:	4b57      	ldr	r3, [pc, #348]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x104>
 80039a2:	e000      	b.n	80039a6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d06f      	beq.n	8003a92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039b2:	4b50      	ldr	r3, [pc, #320]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d017      	beq.n	80039ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039be:	4b4d      	ldr	r3, [pc, #308]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d105      	bne.n	80039d6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039ca:	4b4a      	ldr	r3, [pc, #296]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d6:	4b47      	ldr	r3, [pc, #284]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d11c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e2:	4b44      	ldr	r3, [pc, #272]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d116      	bne.n	8003a1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	4b41      	ldr	r3, [pc, #260]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_RCC_OscConfig+0x186>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e1d3      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	4b3b      	ldr	r3, [pc, #236]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4937      	ldr	r1, [pc, #220]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	e03a      	b.n	8003a92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a24:	4b34      	ldr	r3, [pc, #208]	@ (8003af8 <HAL_RCC_OscConfig+0x278>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7fd f8df 	bl	8000bec <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a32:	f7fd f8db 	bl	8000bec <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e1b4      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a44:	4b2b      	ldr	r3, [pc, #172]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a50:	4b28      	ldr	r3, [pc, #160]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4925      	ldr	r1, [pc, #148]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]
 8003a64:	e015      	b.n	8003a92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a66:	4b24      	ldr	r3, [pc, #144]	@ (8003af8 <HAL_RCC_OscConfig+0x278>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fd f8be 	bl	8000bec <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a74:	f7fd f8ba 	bl	8000bec <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e193      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a86:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d036      	beq.n	8003b0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa6:	4b15      	ldr	r3, [pc, #84]	@ (8003afc <HAL_RCC_OscConfig+0x27c>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fd f89e 	bl	8000bec <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab4:	f7fd f89a 	bl	8000bec <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e173      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x234>
 8003ad2:	e01b      	b.n	8003b0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad4:	4b09      	ldr	r3, [pc, #36]	@ (8003afc <HAL_RCC_OscConfig+0x27c>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ada:	f7fd f887 	bl	8000bec <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	e00e      	b.n	8003b00 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae2:	f7fd f883 	bl	8000bec <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d907      	bls.n	8003b00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e15c      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
 8003af4:	40023800 	.word	0x40023800
 8003af8:	42470000 	.word	0x42470000
 8003afc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b00:	4b8a      	ldr	r3, [pc, #552]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ea      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8097 	beq.w	8003c48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1e:	4b83      	ldr	r3, [pc, #524]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10f      	bne.n	8003b4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	4a7e      	ldr	r2, [pc, #504]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b3a:	4b7c      	ldr	r3, [pc, #496]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b46:	2301      	movs	r3, #1
 8003b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4a:	4b79      	ldr	r3, [pc, #484]	@ (8003d30 <HAL_RCC_OscConfig+0x4b0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d118      	bne.n	8003b88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b56:	4b76      	ldr	r3, [pc, #472]	@ (8003d30 <HAL_RCC_OscConfig+0x4b0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a75      	ldr	r2, [pc, #468]	@ (8003d30 <HAL_RCC_OscConfig+0x4b0>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b62:	f7fd f843 	bl	8000bec <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6a:	f7fd f83f 	bl	8000bec <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e118      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	4b6c      	ldr	r3, [pc, #432]	@ (8003d30 <HAL_RCC_OscConfig+0x4b0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d106      	bne.n	8003b9e <HAL_RCC_OscConfig+0x31e>
 8003b90:	4b66      	ldr	r3, [pc, #408]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b94:	4a65      	ldr	r2, [pc, #404]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b9c:	e01c      	b.n	8003bd8 <HAL_RCC_OscConfig+0x358>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b05      	cmp	r3, #5
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x340>
 8003ba6:	4b61      	ldr	r3, [pc, #388]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003baa:	4a60      	ldr	r2, [pc, #384]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bac:	f043 0304 	orr.w	r3, r3, #4
 8003bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb2:	4b5e      	ldr	r3, [pc, #376]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb6:	4a5d      	ldr	r2, [pc, #372]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCC_OscConfig+0x358>
 8003bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc4:	4a59      	ldr	r2, [pc, #356]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bcc:	4b57      	ldr	r3, [pc, #348]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd0:	4a56      	ldr	r2, [pc, #344]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bd2:	f023 0304 	bic.w	r3, r3, #4
 8003bd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d015      	beq.n	8003c0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7fd f804 	bl	8000bec <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be6:	e00a      	b.n	8003bfe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be8:	f7fd f800 	bl	8000bec <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e0d7      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfe:	4b4b      	ldr	r3, [pc, #300]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ee      	beq.n	8003be8 <HAL_RCC_OscConfig+0x368>
 8003c0a:	e014      	b.n	8003c36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0c:	f7fc ffee 	bl	8000bec <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c14:	f7fc ffea 	bl	8000bec <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0c1      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2a:	4b40      	ldr	r3, [pc, #256]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1ee      	bne.n	8003c14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d105      	bne.n	8003c48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	4a3a      	ldr	r2, [pc, #232]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80ad 	beq.w	8003dac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c52:	4b36      	ldr	r3, [pc, #216]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d060      	beq.n	8003d20 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d145      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c66:	4b33      	ldr	r3, [pc, #204]	@ (8003d34 <HAL_RCC_OscConfig+0x4b4>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fc ffbe 	bl	8000bec <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fc ffba 	bl	8000bec <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e093      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	4b29      	ldr	r3, [pc, #164]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	019b      	lsls	r3, r3, #6
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	3b01      	subs	r3, #1
 8003cac:	041b      	lsls	r3, r3, #16
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	061b      	lsls	r3, r3, #24
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	071b      	lsls	r3, r3, #28
 8003cbe:	491b      	ldr	r1, [pc, #108]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d34 <HAL_RCC_OscConfig+0x4b4>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fc ff8f 	bl	8000bec <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7fc ff8b 	bl	8000bec <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e064      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce4:	4b11      	ldr	r3, [pc, #68]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x452>
 8003cf0:	e05c      	b.n	8003dac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf2:	4b10      	ldr	r3, [pc, #64]	@ (8003d34 <HAL_RCC_OscConfig+0x4b4>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fc ff78 	bl	8000bec <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fc ff74 	bl	8000bec <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e04d      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x480>
 8003d1e:	e045      	b.n	8003dac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d107      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e040      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40007000 	.word	0x40007000
 8003d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d38:	4b1f      	ldr	r3, [pc, #124]	@ (8003db8 <HAL_RCC_OscConfig+0x538>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d030      	beq.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d129      	bne.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d122      	bne.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d68:	4013      	ands	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d119      	bne.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	3b01      	subs	r3, #1
 8003d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d10f      	bne.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800

08003dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e041      	b.n	8003e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fc fe04 	bl	80009f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3304      	adds	r3, #4
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	f000 f82e 	bl	8003e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a46      	ldr	r2, [pc, #280]	@ (8003f88 <TIM_Base_SetConfig+0x12c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d013      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e7a:	d00f      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a43      	ldr	r2, [pc, #268]	@ (8003f8c <TIM_Base_SetConfig+0x130>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00b      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a42      	ldr	r2, [pc, #264]	@ (8003f90 <TIM_Base_SetConfig+0x134>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d007      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a41      	ldr	r2, [pc, #260]	@ (8003f94 <TIM_Base_SetConfig+0x138>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d003      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a40      	ldr	r2, [pc, #256]	@ (8003f98 <TIM_Base_SetConfig+0x13c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d108      	bne.n	8003eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a35      	ldr	r2, [pc, #212]	@ (8003f88 <TIM_Base_SetConfig+0x12c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d02b      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ebc:	d027      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a32      	ldr	r2, [pc, #200]	@ (8003f8c <TIM_Base_SetConfig+0x130>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d023      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a31      	ldr	r2, [pc, #196]	@ (8003f90 <TIM_Base_SetConfig+0x134>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01f      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a30      	ldr	r2, [pc, #192]	@ (8003f94 <TIM_Base_SetConfig+0x138>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01b      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2f      	ldr	r2, [pc, #188]	@ (8003f98 <TIM_Base_SetConfig+0x13c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d017      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f9c <TIM_Base_SetConfig+0x140>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8003fa0 <TIM_Base_SetConfig+0x144>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00f      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa4 <TIM_Base_SetConfig+0x148>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00b      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8003fa8 <TIM_Base_SetConfig+0x14c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d007      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2a      	ldr	r2, [pc, #168]	@ (8003fac <TIM_Base_SetConfig+0x150>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d003      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a29      	ldr	r2, [pc, #164]	@ (8003fb0 <TIM_Base_SetConfig+0x154>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d108      	bne.n	8003f20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a10      	ldr	r2, [pc, #64]	@ (8003f88 <TIM_Base_SetConfig+0x12c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d003      	beq.n	8003f54 <TIM_Base_SetConfig+0xf8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a12      	ldr	r2, [pc, #72]	@ (8003f98 <TIM_Base_SetConfig+0x13c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d103      	bne.n	8003f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d105      	bne.n	8003f7a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f023 0201 	bic.w	r2, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	611a      	str	r2, [r3, #16]
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800
 8003f94:	40000c00 	.word	0x40000c00
 8003f98:	40010400 	.word	0x40010400
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40014400 	.word	0x40014400
 8003fa4:	40014800 	.word	0x40014800
 8003fa8:	40001800 	.word	0x40001800
 8003fac:	40001c00 	.word	0x40001c00
 8003fb0:	40002000 	.word	0x40002000

08003fb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	f107 001c 	add.w	r0, r7, #28
 8003fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fc6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d123      	bne.n	8004016 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003fe2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ff6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d105      	bne.n	800400a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f001 fadc 	bl	80055c8 <USB_CoreReset>
 8004010:	4603      	mov	r3, r0
 8004012:	73fb      	strb	r3, [r7, #15]
 8004014:	e01b      	b.n	800404e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f001 fad0 	bl	80055c8 <USB_CoreReset>
 8004028:	4603      	mov	r3, r0
 800402a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800402c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004030:	2b00      	cmp	r3, #0
 8004032:	d106      	bne.n	8004042 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004038:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004040:	e005      	b.n	800404e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004046:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800404e:	7fbb      	ldrb	r3, [r7, #30]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d10b      	bne.n	800406c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f043 0206 	orr.w	r2, r3, #6
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f043 0220 	orr.w	r2, r3, #32
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800406c:	7bfb      	ldrb	r3, [r7, #15]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004078:	b004      	add	sp, #16
 800407a:	4770      	bx	lr

0800407c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	4613      	mov	r3, r2
 8004088:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d165      	bne.n	800415c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4a41      	ldr	r2, [pc, #260]	@ (8004198 <USB_SetTurnaroundTime+0x11c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d906      	bls.n	80040a6 <USB_SetTurnaroundTime+0x2a>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4a40      	ldr	r2, [pc, #256]	@ (800419c <USB_SetTurnaroundTime+0x120>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d202      	bcs.n	80040a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80040a0:	230f      	movs	r3, #15
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	e062      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4a3c      	ldr	r2, [pc, #240]	@ (800419c <USB_SetTurnaroundTime+0x120>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d306      	bcc.n	80040bc <USB_SetTurnaroundTime+0x40>
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4a3b      	ldr	r2, [pc, #236]	@ (80041a0 <USB_SetTurnaroundTime+0x124>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d202      	bcs.n	80040bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80040b6:	230e      	movs	r3, #14
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	e057      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4a38      	ldr	r2, [pc, #224]	@ (80041a0 <USB_SetTurnaroundTime+0x124>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d306      	bcc.n	80040d2 <USB_SetTurnaroundTime+0x56>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4a37      	ldr	r2, [pc, #220]	@ (80041a4 <USB_SetTurnaroundTime+0x128>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d202      	bcs.n	80040d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80040cc:	230d      	movs	r3, #13
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e04c      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4a33      	ldr	r2, [pc, #204]	@ (80041a4 <USB_SetTurnaroundTime+0x128>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d306      	bcc.n	80040e8 <USB_SetTurnaroundTime+0x6c>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4a32      	ldr	r2, [pc, #200]	@ (80041a8 <USB_SetTurnaroundTime+0x12c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d802      	bhi.n	80040e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80040e2:	230c      	movs	r3, #12
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	e041      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4a2f      	ldr	r2, [pc, #188]	@ (80041a8 <USB_SetTurnaroundTime+0x12c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d906      	bls.n	80040fe <USB_SetTurnaroundTime+0x82>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4a2e      	ldr	r2, [pc, #184]	@ (80041ac <USB_SetTurnaroundTime+0x130>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d802      	bhi.n	80040fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80040f8:	230b      	movs	r3, #11
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	e036      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	4a2a      	ldr	r2, [pc, #168]	@ (80041ac <USB_SetTurnaroundTime+0x130>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d906      	bls.n	8004114 <USB_SetTurnaroundTime+0x98>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	4a29      	ldr	r2, [pc, #164]	@ (80041b0 <USB_SetTurnaroundTime+0x134>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d802      	bhi.n	8004114 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800410e:	230a      	movs	r3, #10
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	e02b      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4a26      	ldr	r2, [pc, #152]	@ (80041b0 <USB_SetTurnaroundTime+0x134>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d906      	bls.n	800412a <USB_SetTurnaroundTime+0xae>
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4a25      	ldr	r2, [pc, #148]	@ (80041b4 <USB_SetTurnaroundTime+0x138>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d202      	bcs.n	800412a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004124:	2309      	movs	r3, #9
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	e020      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4a21      	ldr	r2, [pc, #132]	@ (80041b4 <USB_SetTurnaroundTime+0x138>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d306      	bcc.n	8004140 <USB_SetTurnaroundTime+0xc4>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4a20      	ldr	r2, [pc, #128]	@ (80041b8 <USB_SetTurnaroundTime+0x13c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d802      	bhi.n	8004140 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800413a:	2308      	movs	r3, #8
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	e015      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4a1d      	ldr	r2, [pc, #116]	@ (80041b8 <USB_SetTurnaroundTime+0x13c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d906      	bls.n	8004156 <USB_SetTurnaroundTime+0xda>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4a1c      	ldr	r2, [pc, #112]	@ (80041bc <USB_SetTurnaroundTime+0x140>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d202      	bcs.n	8004156 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004150:	2307      	movs	r3, #7
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e00a      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004156:	2306      	movs	r3, #6
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	e007      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004162:	2309      	movs	r3, #9
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	e001      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004168:	2309      	movs	r3, #9
 800416a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	029b      	lsls	r3, r3, #10
 8004180:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004184:	431a      	orrs	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	00d8acbf 	.word	0x00d8acbf
 800419c:	00e4e1c0 	.word	0x00e4e1c0
 80041a0:	00f42400 	.word	0x00f42400
 80041a4:	01067380 	.word	0x01067380
 80041a8:	011a499f 	.word	0x011a499f
 80041ac:	01312cff 	.word	0x01312cff
 80041b0:	014ca43f 	.word	0x014ca43f
 80041b4:	016e3600 	.word	0x016e3600
 80041b8:	01a6ab1f 	.word	0x01a6ab1f
 80041bc:	01e84800 	.word	0x01e84800

080041c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f043 0201 	orr.w	r2, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f023 0201 	bic.w	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d115      	bne.n	8004252 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004232:	200a      	movs	r0, #10
 8004234:	f7fc fce6 	bl	8000c04 <HAL_Delay>
      ms += 10U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	330a      	adds	r3, #10
 800423c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f001 f933 	bl	80054aa <USB_GetMode>
 8004244:	4603      	mov	r3, r0
 8004246:	2b01      	cmp	r3, #1
 8004248:	d01e      	beq.n	8004288 <USB_SetCurrentMode+0x84>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2bc7      	cmp	r3, #199	@ 0xc7
 800424e:	d9f0      	bls.n	8004232 <USB_SetCurrentMode+0x2e>
 8004250:	e01a      	b.n	8004288 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004252:	78fb      	ldrb	r3, [r7, #3]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d115      	bne.n	8004284 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004264:	200a      	movs	r0, #10
 8004266:	f7fc fccd 	bl	8000c04 <HAL_Delay>
      ms += 10U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	330a      	adds	r3, #10
 800426e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f001 f91a 	bl	80054aa <USB_GetMode>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <USB_SetCurrentMode+0x84>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004280:	d9f0      	bls.n	8004264 <USB_SetCurrentMode+0x60>
 8004282:	e001      	b.n	8004288 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e005      	b.n	8004294 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2bc8      	cmp	r3, #200	@ 0xc8
 800428c:	d101      	bne.n	8004292 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800429c:	b084      	sub	sp, #16
 800429e:	b580      	push	{r7, lr}
 80042a0:	b086      	sub	sp, #24
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80042aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	e009      	b.n	80042d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	3340      	adds	r3, #64	@ 0x40
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	2200      	movs	r2, #0
 80042c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	3301      	adds	r3, #1
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	2b0e      	cmp	r3, #14
 80042d4:	d9f2      	bls.n	80042bc <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80042d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d11c      	bne.n	8004318 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042ec:	f043 0302 	orr.w	r3, r3, #2
 80042f0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	e005      	b.n	8004324 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800432a:	461a      	mov	r2, r3
 800432c:	2300      	movs	r3, #0
 800432e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004330:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004334:	2b01      	cmp	r3, #1
 8004336:	d10d      	bne.n	8004354 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800433c:	2b00      	cmp	r3, #0
 800433e:	d104      	bne.n	800434a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004340:	2100      	movs	r1, #0
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f968 	bl	8004618 <USB_SetDevSpeed>
 8004348:	e008      	b.n	800435c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800434a:	2101      	movs	r1, #1
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f963 	bl	8004618 <USB_SetDevSpeed>
 8004352:	e003      	b.n	800435c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004354:	2103      	movs	r1, #3
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f95e 	bl	8004618 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800435c:	2110      	movs	r1, #16
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f8fa 	bl	8004558 <USB_FlushTxFifo>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f924 	bl	80045bc <USB_FlushRxFifo>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004384:	461a      	mov	r2, r3
 8004386:	2300      	movs	r3, #0
 8004388:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004390:	461a      	mov	r2, r3
 8004392:	2300      	movs	r3, #0
 8004394:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800439c:	461a      	mov	r2, r3
 800439e:	2300      	movs	r3, #0
 80043a0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043a2:	2300      	movs	r3, #0
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	e043      	b.n	8004430 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043be:	d118      	bne.n	80043f2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043d2:	461a      	mov	r2, r3
 80043d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	e013      	b.n	8004404 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043e8:	461a      	mov	r2, r3
 80043ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	e008      	b.n	8004404 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043fe:	461a      	mov	r2, r3
 8004400:	2300      	movs	r3, #0
 8004402:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004410:	461a      	mov	r2, r3
 8004412:	2300      	movs	r3, #0
 8004414:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004422:	461a      	mov	r2, r3
 8004424:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004428:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	3301      	adds	r3, #1
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004434:	461a      	mov	r2, r3
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4293      	cmp	r3, r2
 800443a:	d3b5      	bcc.n	80043a8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800443c:	2300      	movs	r3, #0
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	e043      	b.n	80044ca <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004454:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004458:	d118      	bne.n	800448c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446c:	461a      	mov	r2, r3
 800446e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	e013      	b.n	800449e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004482:	461a      	mov	r2, r3
 8004484:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	e008      	b.n	800449e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004498:	461a      	mov	r2, r3
 800449a:	2300      	movs	r3, #0
 800449c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044aa:	461a      	mov	r2, r3
 80044ac:	2300      	movs	r3, #0
 80044ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044bc:	461a      	mov	r2, r3
 80044be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80044c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	3301      	adds	r3, #1
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80044ce:	461a      	mov	r2, r3
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d3b5      	bcc.n	8004442 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044e8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80044f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80044f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d105      	bne.n	800450c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	f043 0210 	orr.w	r2, r3, #16
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699a      	ldr	r2, [r3, #24]
 8004510:	4b10      	ldr	r3, [pc, #64]	@ (8004554 <USB_DevInit+0x2b8>)
 8004512:	4313      	orrs	r3, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004518:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	f043 0208 	orr.w	r2, r3, #8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800452c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004530:	2b01      	cmp	r3, #1
 8004532:	d107      	bne.n	8004544 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800453c:	f043 0304 	orr.w	r3, r3, #4
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004544:	7dfb      	ldrb	r3, [r7, #23]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004550:	b004      	add	sp, #16
 8004552:	4770      	bx	lr
 8004554:	803c3800 	.word	0x803c3800

08004558 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3301      	adds	r3, #1
 800456a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004572:	d901      	bls.n	8004578 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e01b      	b.n	80045b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	daf2      	bge.n	8004566 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	019b      	lsls	r3, r3, #6
 8004588:	f043 0220 	orr.w	r2, r3, #32
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3301      	adds	r3, #1
 8004594:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800459c:	d901      	bls.n	80045a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e006      	b.n	80045b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	d0f0      	beq.n	8004590 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3301      	adds	r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045d4:	d901      	bls.n	80045da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e018      	b.n	800460c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	daf2      	bge.n	80045c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2210      	movs	r2, #16
 80045ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3301      	adds	r3, #1
 80045f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045f8:	d901      	bls.n	80045fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e006      	b.n	800460c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b10      	cmp	r3, #16
 8004608:	d0f0      	beq.n	80045ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	460b      	mov	r3, r1
 8004622:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	68f9      	ldr	r1, [r7, #12]
 8004634:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004638:	4313      	orrs	r3, r2
 800463a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800464a:	b480      	push	{r7}
 800464c:	b087      	sub	sp, #28
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0306 	and.w	r3, r3, #6
 8004662:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d102      	bne.n	8004670 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800466a:	2300      	movs	r3, #0
 800466c:	75fb      	strb	r3, [r7, #23]
 800466e:	e00a      	b.n	8004686 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d002      	beq.n	800467c <USB_GetDevSpeed+0x32>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b06      	cmp	r3, #6
 800467a:	d102      	bne.n	8004682 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800467c:	2302      	movs	r3, #2
 800467e:	75fb      	strb	r3, [r7, #23]
 8004680:	e001      	b.n	8004686 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004682:	230f      	movs	r3, #15
 8004684:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004686:	7dfb      	ldrb	r3, [r7, #23]
}
 8004688:	4618      	mov	r0, r3
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	785b      	ldrb	r3, [r3, #1]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d13a      	bne.n	8004726 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	2101      	movs	r1, #1
 80046c2:	fa01 f303 	lsl.w	r3, r1, r3
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	68f9      	ldr	r1, [r7, #12]
 80046ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046ce:	4313      	orrs	r3, r2
 80046d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d155      	bne.n	8004794 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	791b      	ldrb	r3, [r3, #4]
 8004702:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004704:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	059b      	lsls	r3, r3, #22
 800470a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800470c:	4313      	orrs	r3, r2
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	0151      	lsls	r1, r2, #5
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	440a      	add	r2, r1
 8004716:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800471a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800471e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	e036      	b.n	8004794 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800472c:	69da      	ldr	r2, [r3, #28]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	2101      	movs	r1, #1
 8004738:	fa01 f303 	lsl.w	r3, r1, r3
 800473c:	041b      	lsls	r3, r3, #16
 800473e:	68f9      	ldr	r1, [r7, #12]
 8004740:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004744:	4313      	orrs	r3, r2
 8004746:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d11a      	bne.n	8004794 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	791b      	ldrb	r3, [r3, #4]
 8004778:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800477a:	430b      	orrs	r3, r1
 800477c:	4313      	orrs	r3, r2
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	0151      	lsls	r1, r2, #5
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	440a      	add	r2, r1
 8004786:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800478a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800478e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004792:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	785b      	ldrb	r3, [r3, #1]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d161      	bne.n	8004884 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047d6:	d11f      	bne.n	8004818 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	0151      	lsls	r1, r2, #5
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	440a      	add	r2, r1
 80047ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80047f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	440a      	add	r2, r1
 800480e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004812:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004816:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800481e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	2101      	movs	r1, #1
 800482a:	fa01 f303 	lsl.w	r3, r1, r3
 800482e:	b29b      	uxth	r3, r3
 8004830:	43db      	mvns	r3, r3
 8004832:	68f9      	ldr	r1, [r7, #12]
 8004834:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004838:	4013      	ands	r3, r2
 800483a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004842:	69da      	ldr	r2, [r3, #28]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	f003 030f 	and.w	r3, r3, #15
 800484c:	2101      	movs	r1, #1
 800484e:	fa01 f303 	lsl.w	r3, r1, r3
 8004852:	b29b      	uxth	r3, r3
 8004854:	43db      	mvns	r3, r3
 8004856:	68f9      	ldr	r1, [r7, #12]
 8004858:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800485c:	4013      	ands	r3, r2
 800485e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	0159      	lsls	r1, r3, #5
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	440b      	add	r3, r1
 8004876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800487a:	4619      	mov	r1, r3
 800487c:	4b35      	ldr	r3, [pc, #212]	@ (8004954 <USB_DeactivateEndpoint+0x1b0>)
 800487e:	4013      	ands	r3, r2
 8004880:	600b      	str	r3, [r1, #0]
 8004882:	e060      	b.n	8004946 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004896:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800489a:	d11f      	bne.n	80048dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	0151      	lsls	r1, r2, #5
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	440a      	add	r2, r1
 80048b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80048ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	0151      	lsls	r1, r2, #5
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	440a      	add	r2, r1
 80048d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	2101      	movs	r1, #1
 80048ee:	fa01 f303 	lsl.w	r3, r1, r3
 80048f2:	041b      	lsls	r3, r3, #16
 80048f4:	43db      	mvns	r3, r3
 80048f6:	68f9      	ldr	r1, [r7, #12]
 80048f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048fc:	4013      	ands	r3, r2
 80048fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	2101      	movs	r1, #1
 8004912:	fa01 f303 	lsl.w	r3, r1, r3
 8004916:	041b      	lsls	r3, r3, #16
 8004918:	43db      	mvns	r3, r3
 800491a:	68f9      	ldr	r1, [r7, #12]
 800491c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004920:	4013      	ands	r3, r2
 8004922:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	0159      	lsls	r1, r3, #5
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	440b      	add	r3, r1
 800493a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800493e:	4619      	mov	r1, r3
 8004940:	4b05      	ldr	r3, [pc, #20]	@ (8004958 <USB_DeactivateEndpoint+0x1b4>)
 8004942:	4013      	ands	r3, r2
 8004944:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	ec337800 	.word	0xec337800
 8004958:	eff37800 	.word	0xeff37800

0800495c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	@ 0x28
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	4613      	mov	r3, r2
 8004968:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	785b      	ldrb	r3, [r3, #1]
 8004978:	2b01      	cmp	r3, #1
 800497a:	f040 817a 	bne.w	8004c72 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d132      	bne.n	80049ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	0151      	lsls	r1, r2, #5
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	440a      	add	r2, r1
 800499c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049a0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80049a4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80049a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	0151      	lsls	r1, r2, #5
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	440a      	add	r2, r1
 80049c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	0151      	lsls	r1, r2, #5
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	440a      	add	r2, r1
 80049e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049e4:	0cdb      	lsrs	r3, r3, #19
 80049e6:	04db      	lsls	r3, r3, #19
 80049e8:	6113      	str	r3, [r2, #16]
 80049ea:	e092      	b.n	8004b12 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	0151      	lsls	r1, r2, #5
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	440a      	add	r2, r1
 8004a02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a06:	0cdb      	lsrs	r3, r3, #19
 8004a08:	04db      	lsls	r3, r3, #19
 8004a0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a26:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004a2a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004a2e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d11a      	bne.n	8004a6c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d903      	bls.n	8004a4a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	0151      	lsls	r1, r2, #5
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	440a      	add	r2, r1
 8004a60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a68:	6113      	str	r3, [r2, #16]
 8004a6a:	e01b      	b.n	8004aa4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a78:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	6919      	ldr	r1, [r3, #16]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	440b      	add	r3, r1
 8004a84:	1e59      	subs	r1, r3, #1
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a8e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a90:	4ba2      	ldr	r3, [pc, #648]	@ (8004d1c <USB_EPStartXfer+0x3c0>)
 8004a92:	400b      	ands	r3, r1
 8004a94:	69b9      	ldr	r1, [r7, #24]
 8004a96:	0148      	lsls	r0, r1, #5
 8004a98:	69f9      	ldr	r1, [r7, #28]
 8004a9a:	4401      	add	r1, r0
 8004a9c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aba:	69b9      	ldr	r1, [r7, #24]
 8004abc:	0148      	lsls	r0, r1, #5
 8004abe:	69f9      	ldr	r1, [r7, #28]
 8004ac0:	4401      	add	r1, r0
 8004ac2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	791b      	ldrb	r3, [r3, #4]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d11f      	bne.n	8004b12 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	0151      	lsls	r1, r2, #5
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	440a      	add	r2, r1
 8004ae8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004aec:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004af0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	0151      	lsls	r1, r2, #5
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	440a      	add	r2, r1
 8004b08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004b10:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d14b      	bne.n	8004bb0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d009      	beq.n	8004b34 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	791b      	ldrb	r3, [r3, #4]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d128      	bne.n	8004b8e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d110      	bne.n	8004b6e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b66:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	e00f      	b.n	8004b8e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	0151      	lsls	r1, r2, #5
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	440a      	add	r2, r1
 8004b84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b8c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	0151      	lsls	r1, r2, #5
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	440a      	add	r2, r1
 8004ba4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ba8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	e165      	b.n	8004e7c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	0151      	lsls	r1, r2, #5
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004bce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	791b      	ldrb	r3, [r3, #4]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d015      	beq.n	8004c04 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 814d 	beq.w	8004e7c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004be8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf8:	69f9      	ldr	r1, [r7, #28]
 8004bfa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	634b      	str	r3, [r1, #52]	@ 0x34
 8004c02:	e13b      	b.n	8004e7c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d110      	bne.n	8004c36 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	0151      	lsls	r1, r2, #5
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	440a      	add	r2, r1
 8004c2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c2e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	e00f      	b.n	8004c56 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	0151      	lsls	r1, r2, #5
 8004c48:	69fa      	ldr	r2, [r7, #28]
 8004c4a:	440a      	add	r2, r1
 8004c4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c54:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	68d9      	ldr	r1, [r3, #12]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	781a      	ldrb	r2, [r3, #0]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	b298      	uxth	r0, r3
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	4603      	mov	r3, r0
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 f9b8 	bl	8004fe0 <USB_WritePacket>
 8004c70:	e104      	b.n	8004e7c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	69fa      	ldr	r2, [r7, #28]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c8c:	0cdb      	lsrs	r3, r3, #19
 8004c8e:	04db      	lsls	r3, r3, #19
 8004c90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cac:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004cb0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004cb4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d131      	bne.n	8004d20 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cea:	69b9      	ldr	r1, [r7, #24]
 8004cec:	0148      	lsls	r0, r1, #5
 8004cee:	69f9      	ldr	r1, [r7, #28]
 8004cf0:	4401      	add	r1, r0
 8004cf2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	0151      	lsls	r1, r2, #5
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	440a      	add	r2, r1
 8004d10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d18:	6113      	str	r3, [r2, #16]
 8004d1a:	e061      	b.n	8004de0 <USB_EPStartXfer+0x484>
 8004d1c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d123      	bne.n	8004d70 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d3e:	69b9      	ldr	r1, [r7, #24]
 8004d40:	0148      	lsls	r0, r1, #5
 8004d42:	69f9      	ldr	r1, [r7, #28]
 8004d44:	4401      	add	r1, r0
 8004d46:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	0151      	lsls	r1, r2, #5
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	440a      	add	r2, r1
 8004d64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d6c:	6113      	str	r3, [r2, #16]
 8004d6e:	e037      	b.n	8004de0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	4413      	add	r3, r2
 8004d7a:	1e5a      	subs	r2, r3, #1
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	8afa      	ldrh	r2, [r7, #22]
 8004d8c:	fb03 f202 	mul.w	r2, r3, r2
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	8afb      	ldrh	r3, [r7, #22]
 8004da4:	04d9      	lsls	r1, r3, #19
 8004da6:	4b38      	ldr	r3, [pc, #224]	@ (8004e88 <USB_EPStartXfer+0x52c>)
 8004da8:	400b      	ands	r3, r1
 8004daa:	69b9      	ldr	r1, [r7, #24]
 8004dac:	0148      	lsls	r0, r1, #5
 8004dae:	69f9      	ldr	r1, [r7, #28]
 8004db0:	4401      	add	r1, r0
 8004db2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004db6:	4313      	orrs	r3, r2
 8004db8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dd0:	69b9      	ldr	r1, [r7, #24]
 8004dd2:	0148      	lsls	r0, r1, #5
 8004dd4:	69f9      	ldr	r1, [r7, #28]
 8004dd6:	4401      	add	r1, r0
 8004dd8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004de0:	79fb      	ldrb	r3, [r7, #7]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d10d      	bne.n	8004e02 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d009      	beq.n	8004e02 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	68d9      	ldr	r1, [r3, #12]
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dfe:	460a      	mov	r2, r1
 8004e00:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	791b      	ldrb	r3, [r3, #4]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d128      	bne.n	8004e5c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d110      	bne.n	8004e3c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	0151      	lsls	r1, r2, #5
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	440a      	add	r2, r1
 8004e30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e34:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	e00f      	b.n	8004e5c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	0151      	lsls	r1, r2, #5
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	440a      	add	r2, r1
 8004e52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e5a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	0151      	lsls	r1, r2, #5
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	440a      	add	r2, r1
 8004e72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e76:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004e7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	1ff80000 	.word	0x1ff80000

08004e8c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	785b      	ldrb	r3, [r3, #1]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d14a      	bne.n	8004f40 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ec2:	f040 8086 	bne.w	8004fd2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	7812      	ldrb	r2, [r2, #0]
 8004eda:	0151      	lsls	r1, r2, #5
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	440a      	add	r2, r1
 8004ee0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ee4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ee8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	7812      	ldrb	r2, [r2, #0]
 8004efe:	0151      	lsls	r1, r2, #5
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	440a      	add	r2, r1
 8004f04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3301      	adds	r3, #1
 8004f12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d902      	bls.n	8004f24 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
          break;
 8004f22:	e056      	b.n	8004fd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f3c:	d0e7      	beq.n	8004f0e <USB_EPStopXfer+0x82>
 8004f3e:	e048      	b.n	8004fd2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f58:	d13b      	bne.n	8004fd2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	7812      	ldrb	r2, [r2, #0]
 8004f6e:	0151      	lsls	r1, r2, #5
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	440a      	add	r2, r1
 8004f74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f78:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f7c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	7812      	ldrb	r2, [r2, #0]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fa0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d902      	bls.n	8004fb8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	75fb      	strb	r3, [r7, #23]
          break;
 8004fb6:	e00c      	b.n	8004fd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fd0:	d0e7      	beq.n	8004fa2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b089      	sub	sp, #36	@ 0x24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	4611      	mov	r1, r2
 8004fec:	461a      	mov	r2, r3
 8004fee:	460b      	mov	r3, r1
 8004ff0:	71fb      	strb	r3, [r7, #7]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004ffe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005002:	2b00      	cmp	r3, #0
 8005004:	d123      	bne.n	800504e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005006:	88bb      	ldrh	r3, [r7, #4]
 8005008:	3303      	adds	r3, #3
 800500a:	089b      	lsrs	r3, r3, #2
 800500c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800500e:	2300      	movs	r3, #0
 8005010:	61bb      	str	r3, [r7, #24]
 8005012:	e018      	b.n	8005046 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	031a      	lsls	r2, r3, #12
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4413      	add	r3, r2
 800501c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005020:	461a      	mov	r2, r3
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	3301      	adds	r3, #1
 800502c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3301      	adds	r3, #1
 8005032:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	3301      	adds	r3, #1
 8005038:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	3301      	adds	r3, #1
 800503e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	3301      	adds	r3, #1
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	429a      	cmp	r2, r3
 800504c:	d3e2      	bcc.n	8005014 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3724      	adds	r7, #36	@ 0x24
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800505c:	b480      	push	{r7}
 800505e:	b08b      	sub	sp, #44	@ 0x2c
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	4613      	mov	r3, r2
 8005068:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	089b      	lsrs	r3, r3, #2
 8005076:	b29b      	uxth	r3, r3
 8005078:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	f003 0303 	and.w	r3, r3, #3
 8005080:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005082:	2300      	movs	r3, #0
 8005084:	623b      	str	r3, [r7, #32]
 8005086:	e014      	b.n	80050b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005092:	601a      	str	r2, [r3, #0]
    pDest++;
 8005094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005096:	3301      	adds	r3, #1
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	3301      	adds	r3, #1
 800509e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	3301      	adds	r3, #1
 80050a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	3301      	adds	r3, #1
 80050aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	3301      	adds	r3, #1
 80050b0:	623b      	str	r3, [r7, #32]
 80050b2:	6a3a      	ldr	r2, [r7, #32]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d3e6      	bcc.n	8005088 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050ba:	8bfb      	ldrh	r3, [r7, #30]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01e      	beq.n	80050fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050ca:	461a      	mov	r2, r3
 80050cc:	f107 0310 	add.w	r3, r7, #16
 80050d0:	6812      	ldr	r2, [r2, #0]
 80050d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	701a      	strb	r2, [r3, #0]
      i++;
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	3301      	adds	r3, #1
 80050ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80050ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ee:	3301      	adds	r3, #1
 80050f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80050f2:	8bfb      	ldrh	r3, [r7, #30]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80050f8:	8bfb      	ldrh	r3, [r7, #30]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1ea      	bne.n	80050d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005100:	4618      	mov	r0, r3
 8005102:	372c      	adds	r7, #44	@ 0x2c
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d12c      	bne.n	8005182 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	db12      	blt.n	8005160 <USB_EPSetStall+0x54>
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00f      	beq.n	8005160 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	0151      	lsls	r1, r2, #5
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	440a      	add	r2, r1
 8005156:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800515a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800515e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	0151      	lsls	r1, r2, #5
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	440a      	add	r2, r1
 8005176:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800517a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	e02b      	b.n	80051da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	db12      	blt.n	80051ba <USB_EPSetStall+0xae>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00f      	beq.n	80051ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80051b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80051d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	785b      	ldrb	r3, [r3, #1]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d128      	bne.n	8005256 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	440a      	add	r2, r1
 800521a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800521e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005222:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	791b      	ldrb	r3, [r3, #4]
 8005228:	2b03      	cmp	r3, #3
 800522a:	d003      	beq.n	8005234 <USB_EPClearStall+0x4c>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	791b      	ldrb	r3, [r3, #4]
 8005230:	2b02      	cmp	r3, #2
 8005232:	d138      	bne.n	80052a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	440a      	add	r2, r1
 800524a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800524e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	e027      	b.n	80052a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	440a      	add	r2, r1
 800526c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005270:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005274:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	791b      	ldrb	r3, [r3, #4]
 800527a:	2b03      	cmp	r3, #3
 800527c:	d003      	beq.n	8005286 <USB_EPClearStall+0x9e>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	791b      	ldrb	r3, [r3, #4]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d10f      	bne.n	80052a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	440a      	add	r2, r1
 800529c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80052d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80052e8:	68f9      	ldr	r1, [r7, #12]
 80052ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052ee:	4313      	orrs	r3, r2
 80052f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800531a:	f023 0303 	bic.w	r3, r3, #3
 800531e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800532e:	f023 0302 	bic.w	r3, r3, #2
 8005332:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005342:	b480      	push	{r7}
 8005344:	b085      	sub	sp, #20
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800535c:	f023 0303 	bic.w	r3, r3, #3
 8005360:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005370:	f043 0302 	orr.w	r3, r3, #2
 8005374:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4013      	ands	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800539c:	68fb      	ldr	r3, [r7, #12]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	4013      	ands	r3, r2
 80053cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	0c1b      	lsrs	r3, r3, #16
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	4013      	ands	r3, r2
 8005400:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	b29b      	uxth	r3, r3
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	460b      	mov	r3, r1
 800541c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	4013      	ands	r3, r2
 800543e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005440:	68bb      	ldr	r3, [r7, #8]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800544e:	b480      	push	{r7}
 8005450:	b087      	sub	sp, #28
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	460b      	mov	r3, r1
 8005458:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800546e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005470:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	f003 030f 	and.w	r3, r3, #15
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	fa22 f303 	lsr.w	r3, r2, r3
 800547e:	01db      	lsls	r3, r3, #7
 8005480:	b2db      	uxtb	r3, r3
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4013      	ands	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800549c:	68bb      	ldr	r3, [r7, #8]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	371c      	adds	r7, #28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f003 0301 	and.w	r3, r3, #1
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b085      	sub	sp, #20
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80054e4:	f023 0307 	bic.w	r3, r3, #7
 80054e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	460b      	mov	r3, r1
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	333c      	adds	r3, #60	@ 0x3c
 8005522:	3304      	adds	r3, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	4a26      	ldr	r2, [pc, #152]	@ (80055c4 <USB_EP0_OutStart+0xb8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d90a      	bls.n	8005546 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800553c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005540:	d101      	bne.n	8005546 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	e037      	b.n	80055b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800554c:	461a      	mov	r2, r3
 800554e:	2300      	movs	r3, #0
 8005550:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005560:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005574:	f043 0318 	orr.w	r3, r3, #24
 8005578:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005588:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800558c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800558e:	7afb      	ldrb	r3, [r7, #11]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d10f      	bne.n	80055b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800559a:	461a      	mov	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055ae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80055b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	4f54300a 	.word	0x4f54300a

080055c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3301      	adds	r3, #1
 80055d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055e0:	d901      	bls.n	80055e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e01b      	b.n	800561e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	daf2      	bge.n	80055d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f043 0201 	orr.w	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3301      	adds	r3, #1
 8005602:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800560a:	d901      	bls.n	8005610 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e006      	b.n	800561e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b01      	cmp	r3, #1
 800561a:	d0f0      	beq.n	80055fe <USB_CoreReset+0x36>

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
	...

0800562c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005638:	2018      	movs	r0, #24
 800563a:	f002 fd29 	bl	8008090 <USBD_static_malloc>
 800563e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d109      	bne.n	800565a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	32b0      	adds	r2, #176	@ 0xb0
 8005650:	2100      	movs	r1, #0
 8005652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005656:	2302      	movs	r3, #2
 8005658:	e08a      	b.n	8005770 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	32b0      	adds	r2, #176	@ 0xb0
 8005664:	68f9      	ldr	r1, [r7, #12]
 8005666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	32b0      	adds	r2, #176	@ 0xb0
 8005674:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	7c1b      	ldrb	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d11b      	bne.n	80056be <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005686:	4b3c      	ldr	r3, [pc, #240]	@ (8005778 <USBD_CUSTOM_HID_Init+0x14c>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	f003 020f 	and.w	r2, r3, #15
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	3326      	adds	r3, #38	@ 0x26
 800569c:	2205      	movs	r2, #5
 800569e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80056a0:	4b36      	ldr	r3, [pc, #216]	@ (800577c <USBD_CUSTOM_HID_Init+0x150>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	f003 020f 	and.w	r2, r3, #15
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	4613      	mov	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	440b      	add	r3, r1
 80056b4:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80056b8:	2205      	movs	r2, #5
 80056ba:	801a      	strh	r2, [r3, #0]
 80056bc:	e01a      	b.n	80056f4 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80056be:	4b2e      	ldr	r3, [pc, #184]	@ (8005778 <USBD_CUSTOM_HID_Init+0x14c>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	f003 020f 	and.w	r2, r3, #15
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	4613      	mov	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	3326      	adds	r3, #38	@ 0x26
 80056d4:	2205      	movs	r2, #5
 80056d6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80056d8:	4b28      	ldr	r3, [pc, #160]	@ (800577c <USBD_CUSTOM_HID_Init+0x150>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	f003 020f 	and.w	r2, r3, #15
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	440b      	add	r3, r1
 80056ec:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80056f0:	2205      	movs	r2, #5
 80056f2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80056f4:	4b20      	ldr	r3, [pc, #128]	@ (8005778 <USBD_CUSTOM_HID_Init+0x14c>)
 80056f6:	7819      	ldrb	r1, [r3, #0]
 80056f8:	231e      	movs	r3, #30
 80056fa:	2203      	movs	r2, #3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f002 fb68 	bl	8007dd2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8005702:	4b1d      	ldr	r3, [pc, #116]	@ (8005778 <USBD_CUSTOM_HID_Init+0x14c>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	f003 020f 	and.w	r2, r3, #15
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	3324      	adds	r3, #36	@ 0x24
 8005718:	2201      	movs	r2, #1
 800571a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800571c:	4b17      	ldr	r3, [pc, #92]	@ (800577c <USBD_CUSTOM_HID_Init+0x150>)
 800571e:	7819      	ldrb	r1, [r3, #0]
 8005720:	2302      	movs	r3, #2
 8005722:	2203      	movs	r2, #3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f002 fb54 	bl	8007dd2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800572a:	4b14      	ldr	r3, [pc, #80]	@ (800577c <USBD_CUSTOM_HID_Init+0x150>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	f003 020f 	and.w	r2, r3, #15
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005742:	2201      	movs	r2, #1
 8005744:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	33b0      	adds	r3, #176	@ 0xb0
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005760:	4b06      	ldr	r3, [pc, #24]	@ (800577c <USBD_CUSTOM_HID_Init+0x150>)
 8005762:	7819      	ldrb	r1, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	2302      	movs	r3, #2
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f002 fc21 	bl	8007fb0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	20000086 	.word	0x20000086
 800577c:	20000087 	.word	0x20000087

08005780 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800578c:	4b37      	ldr	r3, [pc, #220]	@ (800586c <USBD_CUSTOM_HID_DeInit+0xec>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	4619      	mov	r1, r3
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f002 fb43 	bl	8007e1e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8005798:	4b34      	ldr	r3, [pc, #208]	@ (800586c <USBD_CUSTOM_HID_DeInit+0xec>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	f003 020f 	and.w	r2, r3, #15
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	3324      	adds	r3, #36	@ 0x24
 80057ae:	2200      	movs	r2, #0
 80057b0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80057b2:	4b2e      	ldr	r3, [pc, #184]	@ (800586c <USBD_CUSTOM_HID_DeInit+0xec>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	f003 020f 	and.w	r2, r3, #15
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	3326      	adds	r3, #38	@ 0x26
 80057c8:	2200      	movs	r2, #0
 80057ca:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80057cc:	4b28      	ldr	r3, [pc, #160]	@ (8005870 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	4619      	mov	r1, r3
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f002 fb23 	bl	8007e1e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80057d8:	4b25      	ldr	r3, [pc, #148]	@ (8005870 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	f003 020f 	and.w	r2, r3, #15
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	4613      	mov	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	440b      	add	r3, r1
 80057ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80057f0:	2200      	movs	r2, #0
 80057f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80057f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005870 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	f003 020f 	and.w	r2, r3, #15
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800580c:	2200      	movs	r2, #0
 800580e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	32b0      	adds	r2, #176	@ 0xb0
 800581a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d01f      	beq.n	8005862 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	33b0      	adds	r3, #176	@ 0xb0
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	32b0      	adds	r2, #176	@ 0xb0
 8005840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005844:	4618      	mov	r0, r3
 8005846:	f002 fc31 	bl	80080ac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	32b0      	adds	r2, #176	@ 0xb0
 8005854:	2100      	movs	r1, #0
 8005856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20000086 	.word	0x20000086
 8005870:	20000087 	.word	0x20000087

08005874 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	32b0      	adds	r2, #176	@ 0xb0
 8005888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800588c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	83fb      	strh	r3, [r7, #30]
#warning "USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED not implemented; See original library code"
#endif
#ifdef USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED
#warning "USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED not implemented; See original library code"
#endif
  uint8_t  *pbuf = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e128      	b.n	8005afa <USBD_CUSTOM_HID_Setup+0x286>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8084 	beq.w	80059be <USBD_CUSTOM_HID_Setup+0x14a>
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	f040 8117 	bne.w	8005aea <USBD_CUSTOM_HID_Setup+0x276>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	2b0a      	cmp	r3, #10
 80058c4:	d872      	bhi.n	80059ac <USBD_CUSTOM_HID_Setup+0x138>
 80058c6:	a201      	add	r2, pc, #4	@ (adr r2, 80058cc <USBD_CUSTOM_HID_Setup+0x58>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	08005957 	.word	0x08005957
 80058d0:	08005929 	.word	0x08005929
 80058d4:	08005907 	.word	0x08005907
 80058d8:	080059ad 	.word	0x080059ad
 80058dc:	080059ad 	.word	0x080059ad
 80058e0:	080059ad 	.word	0x080059ad
 80058e4:	080059ad 	.word	0x080059ad
 80058e8:	080059ad 	.word	0x080059ad
 80058ec:	08005939 	.word	0x08005939
 80058f0:	08005917 	.word	0x08005917
 80058f4:	080058f9 	.word	0x080058f9
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	885b      	ldrh	r3, [r3, #2]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	461a      	mov	r2, r3
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	605a      	str	r2, [r3, #4]
          break;
 8005904:	e05a      	b.n	80059bc <USBD_CUSTOM_HID_Setup+0x148>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	3304      	adds	r3, #4
 800590a:	2201      	movs	r2, #1
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f001 fd24 	bl	800735c <USBD_CtlSendData>
          break;
 8005914:	e052      	b.n	80059bc <USBD_CUSTOM_HID_Setup+0x148>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	885b      	ldrh	r3, [r3, #2]
 800591a:	0a1b      	lsrs	r3, r3, #8
 800591c:	b29b      	uxth	r3, r3
 800591e:	b2db      	uxtb	r3, r3
 8005920:	461a      	mov	r2, r3
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	609a      	str	r2, [r3, #8]
          break;
 8005926:	e049      	b.n	80059bc <USBD_CUSTOM_HID_Setup+0x148>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	3308      	adds	r3, #8
 800592c:	2201      	movs	r2, #1
 800592e:	4619      	mov	r1, r3
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f001 fd13 	bl	800735c <USBD_CtlSendData>
          break;
 8005936:	e041      	b.n	80059bc <USBD_CUSTOM_HID_Setup+0x148>

        case CUSTOM_HID_REQ_SET_REPORT:
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	2201      	movs	r2, #1
 800593c:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800593e:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	88db      	ldrh	r3, [r3, #6]
 8005944:	2b02      	cmp	r3, #2
 8005946:	bf28      	it	cs
 8005948:	2302      	movcs	r3, #2
 800594a:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800594c:	461a      	mov	r2, r3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f001 fd30 	bl	80073b4 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8005954:	e032      	b.n	80059bc <USBD_CUSTOM_HID_Setup+0x148>

        /*
         * Send feature reports to host
         */
        case CUSTOM_HID_REQ_GET_REPORT:
        int FEATURE_REPORT_WVALUE_OFFSET = 0x300;		// High Byte of wValue is report type, Low Byte is report ID (HID 1.11, Section 7.2)
 8005956:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800595a:	60fb      	str	r3, [r7, #12]
        	if (req->wValue == (FEATURE_REPORT_WVALUE_OFFSET + REPORTID_CAPABILITIES))
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	885b      	ldrh	r3, [r3, #2]
 8005960:	461a      	mov	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3302      	adds	r3, #2
 8005966:	429a      	cmp	r2, r3
 8005968:	d112      	bne.n	8005990 <USBD_CUSTOM_HID_Setup+0x11c>
        	{
        		CapabilitiesReport capabilitiesReport;
        		capabilitiesReport.report_ID = REPORTID_CAPABILITIES;
 800596a:	2302      	movs	r3, #2
 800596c:	723b      	strb	r3, [r7, #8]
        		capabilitiesReport.contact_count_maximum = TP_MAX_CONTACTS;
 800596e:	7a7b      	ldrb	r3, [r7, #9]
 8005970:	2205      	movs	r2, #5
 8005972:	f362 0303 	bfi	r3, r2, #0, #4
 8005976:	727b      	strb	r3, [r7, #9]
        		capabilitiesReport.pad_type = TP_PAD_TYPE;
 8005978:	7a7b      	ldrb	r3, [r7, #9]
 800597a:	f36f 1307 	bfc	r3, #4, #4
 800597e:	727b      	strb	r3, [r7, #9]
        		USBD_CtlSendData(pdev, (uint8_t*)&capabilitiesReport, sizeof (CapabilitiesReport));
 8005980:	f107 0308 	add.w	r3, r7, #8
 8005984:	2202      	movs	r2, #2
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 fce7 	bl	800735c <USBD_CtlSendData>
        	}
        	else if (req->wValue == (FEATURE_REPORT_WVALUE_OFFSET + REPORTID_CERTIFICATION_STATUS)){
        		USBD_CtlSendData(pdev, (uint8_t*)&certification_status_report, sizeof (certification_status_report));
        	}
        	break;
 800598e:	e014      	b.n	80059ba <USBD_CUSTOM_HID_Setup+0x146>
        	else if (req->wValue == (FEATURE_REPORT_WVALUE_OFFSET + REPORTID_CERTIFICATION_STATUS)){
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	885b      	ldrh	r3, [r3, #2]
 8005994:	461a      	mov	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	3303      	adds	r3, #3
 800599a:	429a      	cmp	r2, r3
 800599c:	d10d      	bne.n	80059ba <USBD_CUSTOM_HID_Setup+0x146>
        		USBD_CtlSendData(pdev, (uint8_t*)&certification_status_report, sizeof (certification_status_report));
 800599e:	f240 1201 	movw	r2, #257	@ 0x101
 80059a2:	4958      	ldr	r1, [pc, #352]	@ (8005b04 <USBD_CUSTOM_HID_Setup+0x290>)
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f001 fcd9 	bl	800735c <USBD_CtlSendData>
        	break;
 80059aa:	e006      	b.n	80059ba <USBD_CUSTOM_HID_Setup+0x146>
        default:
          USBD_CtlError(pdev, req);
 80059ac:	6839      	ldr	r1, [r7, #0]
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f001 fc63 	bl	800727a <USBD_CtlError>
          ret = USBD_FAIL;
 80059b4:	2303      	movs	r3, #3
 80059b6:	75fb      	strb	r3, [r7, #23]
          break;
 80059b8:	e000      	b.n	80059bc <USBD_CUSTOM_HID_Setup+0x148>
        	break;
 80059ba:	bf00      	nop
      }
      break;
 80059bc:	e09c      	b.n	8005af8 <USBD_CUSTOM_HID_Setup+0x284>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	785b      	ldrb	r3, [r3, #1]
 80059c2:	2b0b      	cmp	r3, #11
 80059c4:	f200 8088 	bhi.w	8005ad8 <USBD_CUSTOM_HID_Setup+0x264>
 80059c8:	a201      	add	r2, pc, #4	@ (adr r2, 80059d0 <USBD_CUSTOM_HID_Setup+0x15c>)
 80059ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ce:	bf00      	nop
 80059d0:	08005a01 	.word	0x08005a01
 80059d4:	08005ae7 	.word	0x08005ae7
 80059d8:	08005ad9 	.word	0x08005ad9
 80059dc:	08005ad9 	.word	0x08005ad9
 80059e0:	08005ad9 	.word	0x08005ad9
 80059e4:	08005ad9 	.word	0x08005ad9
 80059e8:	08005a2b 	.word	0x08005a2b
 80059ec:	08005ad9 	.word	0x08005ad9
 80059f0:	08005ad9 	.word	0x08005ad9
 80059f4:	08005ad9 	.word	0x08005ad9
 80059f8:	08005a87 	.word	0x08005a87
 80059fc:	08005ab1 	.word	0x08005ab1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d107      	bne.n	8005a1c <USBD_CUSTOM_HID_Setup+0x1a8>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a0c:	f107 030a 	add.w	r3, r7, #10
 8005a10:	2202      	movs	r2, #2
 8005a12:	4619      	mov	r1, r3
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f001 fca1 	bl	800735c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a1a:	e065      	b.n	8005ae8 <USBD_CUSTOM_HID_Setup+0x274>
            USBD_CtlError(pdev, req);
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f001 fc2b 	bl	800727a <USBD_CtlError>
            ret = USBD_FAIL;
 8005a24:	2303      	movs	r3, #3
 8005a26:	75fb      	strb	r3, [r7, #23]
          break;
 8005a28:	e05e      	b.n	8005ae8 <USBD_CUSTOM_HID_Setup+0x274>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	885b      	ldrh	r3, [r3, #2]
 8005a2e:	0a1b      	lsrs	r3, r3, #8
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b22      	cmp	r3, #34	@ 0x22
 8005a34:	d112      	bne.n	8005a5c <USBD_CUSTOM_HID_Setup+0x1e8>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	88db      	ldrh	r3, [r3, #6]
 8005a3a:	f240 2216 	movw	r2, #534	@ 0x216
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	bf28      	it	cs
 8005a42:	4613      	movcs	r3, r2
 8005a44:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	33b0      	adds	r3, #176	@ 0xb0
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	e00d      	b.n	8005a78 <USBD_CUSTOM_HID_Setup+0x204>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	885b      	ldrh	r3, [r3, #2]
 8005a60:	0a1b      	lsrs	r3, r3, #8
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b21      	cmp	r3, #33	@ 0x21
 8005a66:	d107      	bne.n	8005a78 <USBD_CUSTOM_HID_Setup+0x204>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005a68:	4b27      	ldr	r3, [pc, #156]	@ (8005b08 <USBD_CUSTOM_HID_Setup+0x294>)
 8005a6a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	88db      	ldrh	r3, [r3, #6]
 8005a70:	2b09      	cmp	r3, #9
 8005a72:	bf28      	it	cs
 8005a74:	2309      	movcs	r3, #9
 8005a76:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005a78:	8bfb      	ldrh	r3, [r7, #30]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	69b9      	ldr	r1, [r7, #24]
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 fc6c 	bl	800735c <USBD_CtlSendData>
          break;
 8005a84:	e030      	b.n	8005ae8 <USBD_CUSTOM_HID_Setup+0x274>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d107      	bne.n	8005aa2 <USBD_CUSTOM_HID_Setup+0x22e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	330c      	adds	r3, #12
 8005a96:	2201      	movs	r2, #1
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f001 fc5e 	bl	800735c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005aa0:	e022      	b.n	8005ae8 <USBD_CUSTOM_HID_Setup+0x274>
            USBD_CtlError(pdev, req);
 8005aa2:	6839      	ldr	r1, [r7, #0]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f001 fbe8 	bl	800727a <USBD_CtlError>
            ret = USBD_FAIL;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	75fb      	strb	r3, [r7, #23]
          break;
 8005aae:	e01b      	b.n	8005ae8 <USBD_CUSTOM_HID_Setup+0x274>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d106      	bne.n	8005aca <USBD_CUSTOM_HID_Setup+0x256>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	885b      	ldrh	r3, [r3, #2]
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ac8:	e00e      	b.n	8005ae8 <USBD_CUSTOM_HID_Setup+0x274>
            USBD_CtlError(pdev, req);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 fbd4 	bl	800727a <USBD_CtlError>
            ret = USBD_FAIL;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ad6:	e007      	b.n	8005ae8 <USBD_CUSTOM_HID_Setup+0x274>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f001 fbcd 	bl	800727a <USBD_CtlError>
          ret = USBD_FAIL;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	75fb      	strb	r3, [r7, #23]
          break;
 8005ae4:	e000      	b.n	8005ae8 <USBD_CUSTOM_HID_Setup+0x274>
          break;
 8005ae6:	bf00      	nop
      }
      break;
 8005ae8:	e006      	b.n	8005af8 <USBD_CUSTOM_HID_Setup+0x284>

    default:
      USBD_CtlError(pdev, req);
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f001 fbc4 	bl	800727a <USBD_CtlError>
      ret = USBD_FAIL;
 8005af2:	2303      	movs	r3, #3
 8005af4:	75fb      	strb	r3, [r7, #23]
      break;
 8005af6:	bf00      	nop
  }
  return (uint8_t)ret;
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	080081f8 	.word	0x080081f8
 8005b08:	20000070 	.word	0x20000070

08005b0c <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	4613      	mov	r3, r2
 8005b18:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	32b0      	adds	r2, #176	@ 0xb0
 8005b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b28:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e017      	b.n	8005b64 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d110      	bne.n	8005b62 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	7d1b      	ldrb	r3, [r3, #20]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8005b4e:	4b07      	ldr	r3, [pc, #28]	@ (8005b6c <USBD_CUSTOM_HID_SendReport+0x60>)
 8005b50:	7819      	ldrb	r1, [r3, #0]
 8005b52:	88fb      	ldrh	r3, [r7, #6]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f002 fa09 	bl	8007f6e <USBD_LL_Transmit>
 8005b5c:	e001      	b.n	8005b62 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e000      	b.n	8005b64 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20000086 	.word	0x20000086

08005b70 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005b78:	2181      	movs	r1, #129	@ 0x81
 8005b7a:	4815      	ldr	r0, [pc, #84]	@ (8005bd0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005b7c:	f000 fd1d 	bl	80065ba <USBD_GetEpDesc>
 8005b80:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005b82:	2101      	movs	r1, #1
 8005b84:	4812      	ldr	r0, [pc, #72]	@ (8005bd0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005b86:	f000 fd18 	bl	80065ba <USBD_GetEpDesc>
 8005b8a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d009      	beq.n	8005ba6 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f042 021e 	orr.w	r2, r2, #30
 8005b9a:	711a      	strb	r2, [r3, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2205      	movs	r2, #5
 8005ba4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d009      	beq.n	8005bc0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f042 0202 	orr.w	r2, r2, #2
 8005bb4:	711a      	strb	r2, [r3, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2205      	movs	r2, #5
 8005bbe:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2229      	movs	r2, #41	@ 0x29
 8005bc4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005bc6:	4b02      	ldr	r3, [pc, #8]	@ (8005bd0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20000044 	.word	0x20000044

08005bd4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005bdc:	2181      	movs	r1, #129	@ 0x81
 8005bde:	4815      	ldr	r0, [pc, #84]	@ (8005c34 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005be0:	f000 fceb 	bl	80065ba <USBD_GetEpDesc>
 8005be4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005be6:	2101      	movs	r1, #1
 8005be8:	4812      	ldr	r0, [pc, #72]	@ (8005c34 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005bea:	f000 fce6 	bl	80065ba <USBD_GetEpDesc>
 8005bee:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d009      	beq.n	8005c0a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f042 021e 	orr.w	r2, r2, #30
 8005bfe:	711a      	strb	r2, [r3, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2205      	movs	r2, #5
 8005c08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d009      	beq.n	8005c24 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f042 0202 	orr.w	r2, r2, #2
 8005c18:	711a      	strb	r2, [r3, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2205      	movs	r2, #5
 8005c22:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2229      	movs	r2, #41	@ 0x29
 8005c28:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005c2a:	4b02      	ldr	r3, [pc, #8]	@ (8005c34 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20000044 	.word	0x20000044

08005c38 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005c40:	2181      	movs	r1, #129	@ 0x81
 8005c42:	4815      	ldr	r0, [pc, #84]	@ (8005c98 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005c44:	f000 fcb9 	bl	80065ba <USBD_GetEpDesc>
 8005c48:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	4812      	ldr	r0, [pc, #72]	@ (8005c98 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005c4e:	f000 fcb4 	bl	80065ba <USBD_GetEpDesc>
 8005c52:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d009      	beq.n	8005c6e <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f042 021e 	orr.w	r2, r2, #30
 8005c62:	711a      	strb	r2, [r3, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2205      	movs	r2, #5
 8005c6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d009      	beq.n	8005c88 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f042 0202 	orr.w	r2, r2, #2
 8005c7c:	711a      	strb	r2, [r3, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2205      	movs	r2, #5
 8005c86:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2229      	movs	r2, #41	@ 0x29
 8005c8c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005c8e:	4b02      	ldr	r3, [pc, #8]	@ (8005c98 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000044 	.word	0x20000044

08005c9c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	32b0      	adds	r2, #176	@ 0xb0
 8005cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	32b0      	adds	r2, #176	@ 0xb0
 8005cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e017      	b.n	8005d1a <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	32b0      	adds	r2, #176	@ 0xb0
 8005cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	33b0      	adds	r3, #176	@ 0xb0
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	7810      	ldrb	r0, [r2, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	7852      	ldrb	r2, [r2, #1]
 8005d14:	4611      	mov	r1, r2
 8005d16:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	32b0      	adds	r2, #176	@ 0xb0
 8005d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e00f      	b.n	8005d62 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	32b0      	adds	r2, #176	@ 0xb0
 8005d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d50:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005d52:	4b06      	ldr	r3, [pc, #24]	@ (8005d6c <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8005d54:	7819      	ldrb	r1, [r3, #0]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	2302      	movs	r3, #2
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f002 f928 	bl	8007fb0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20000087 	.word	0x20000087

08005d70 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	32b0      	adds	r2, #176	@ 0xb0
 8005d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d86:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e016      	b.n	8005dc0 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d111      	bne.n	8005dbe <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	33b0      	adds	r3, #176	@ 0xb0
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	7810      	ldrb	r0, [r2, #0]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	7852      	ldrb	r2, [r2, #1]
 8005db4:	4611      	mov	r1, r2
 8005db6:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	220a      	movs	r2, #10
 8005dd4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005dd6:	4b03      	ldr	r3, [pc, #12]	@ (8005de4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	2000007c 	.word	0x2000007c

08005de8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e009      	b.n	8005e10 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	33b0      	adds	r3, #176	@ 0xb0
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	4613      	mov	r3, r2
 8005e28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e01f      	b.n	8005e74 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	79fa      	ldrb	r2, [r7, #7]
 8005e66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f001 ff4b 	bl	8007d04 <USBD_LL_Init>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e025      	b.n	8005ee0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	32ae      	adds	r2, #174	@ 0xae
 8005ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00f      	beq.n	8005ed0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	32ae      	adds	r2, #174	@ 0xae
 8005eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec0:	f107 020e 	add.w	r2, r7, #14
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	4798      	blx	r3
 8005ec8:	4602      	mov	r2, r0
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f001 ff53 	bl	8007d9c <USBD_LL_Start>
 8005ef6:	4603      	mov	r3, r0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f08:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d009      	beq.n	8005f44 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	78fa      	ldrb	r2, [r7, #3]
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
 8005f40:	4603      	mov	r3, r0
 8005f42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	460b      	mov	r3, r1
 8005f58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	78fa      	ldrb	r2, [r7, #3]
 8005f68:	4611      	mov	r1, r2
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	4798      	blx	r3
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005f74:	2303      	movs	r3, #3
 8005f76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f001 f936 	bl	8007206 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005fa8:	461a      	mov	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005fb6:	f003 031f 	and.w	r3, r3, #31
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d01a      	beq.n	8005ff4 <USBD_LL_SetupStage+0x72>
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d822      	bhi.n	8006008 <USBD_LL_SetupStage+0x86>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <USBD_LL_SetupStage+0x4a>
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d00a      	beq.n	8005fe0 <USBD_LL_SetupStage+0x5e>
 8005fca:	e01d      	b.n	8006008 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fb63 	bl	80066a0 <USBD_StdDevReq>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8005fde:	e020      	b.n	8006022 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fbcb 	bl	8006784 <USBD_StdItfReq>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff2:	e016      	b.n	8006022 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fc2d 	bl	800685c <USBD_StdEPReq>
 8006002:	4603      	mov	r3, r0
 8006004:	73fb      	strb	r3, [r7, #15]
      break;
 8006006:	e00c      	b.n	8006022 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800600e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006012:	b2db      	uxtb	r3, r3
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f001 ff20 	bl	8007e5c <USBD_LL_StallEP>
 800601c:	4603      	mov	r3, r0
 800601e:	73fb      	strb	r3, [r7, #15]
      break;
 8006020:	bf00      	nop
  }

  return ret;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	460b      	mov	r3, r1
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800603e:	7afb      	ldrb	r3, [r7, #11]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d16e      	bne.n	8006122 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800604a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006052:	2b03      	cmp	r3, #3
 8006054:	f040 8098 	bne.w	8006188 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	429a      	cmp	r2, r3
 8006062:	d913      	bls.n	800608c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	1ad2      	subs	r2, r2, r3
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	4293      	cmp	r3, r2
 800607c:	bf28      	it	cs
 800607e:	4613      	movcs	r3, r2
 8006080:	461a      	mov	r2, r3
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f001 f9b2 	bl	80073ee <USBD_CtlContinueRx>
 800608a:	e07d      	b.n	8006188 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006092:	f003 031f 	and.w	r3, r3, #31
 8006096:	2b02      	cmp	r3, #2
 8006098:	d014      	beq.n	80060c4 <USBD_LL_DataOutStage+0x98>
 800609a:	2b02      	cmp	r3, #2
 800609c:	d81d      	bhi.n	80060da <USBD_LL_DataOutStage+0xae>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <USBD_LL_DataOutStage+0x7c>
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d003      	beq.n	80060ae <USBD_LL_DataOutStage+0x82>
 80060a6:	e018      	b.n	80060da <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	75bb      	strb	r3, [r7, #22]
            break;
 80060ac:	e018      	b.n	80060e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	4619      	mov	r1, r3
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 fa64 	bl	8006586 <USBD_CoreFindIF>
 80060be:	4603      	mov	r3, r0
 80060c0:	75bb      	strb	r3, [r7, #22]
            break;
 80060c2:	e00d      	b.n	80060e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	4619      	mov	r1, r3
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 fa66 	bl	80065a0 <USBD_CoreFindEP>
 80060d4:	4603      	mov	r3, r0
 80060d6:	75bb      	strb	r3, [r7, #22]
            break;
 80060d8:	e002      	b.n	80060e0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	75bb      	strb	r3, [r7, #22]
            break;
 80060de:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80060e0:	7dbb      	ldrb	r3, [r7, #22]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d119      	bne.n	800611a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	d113      	bne.n	800611a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80060f2:	7dba      	ldrb	r2, [r7, #22]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	32ae      	adds	r2, #174	@ 0xae
 80060f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00b      	beq.n	800611a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006102:	7dba      	ldrb	r2, [r7, #22]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800610a:	7dba      	ldrb	r2, [r7, #22]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	32ae      	adds	r2, #174	@ 0xae
 8006110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f001 f978 	bl	8007410 <USBD_CtlSendStatus>
 8006120:	e032      	b.n	8006188 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006122:	7afb      	ldrb	r3, [r7, #11]
 8006124:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006128:	b2db      	uxtb	r3, r3
 800612a:	4619      	mov	r1, r3
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 fa37 	bl	80065a0 <USBD_CoreFindEP>
 8006132:	4603      	mov	r3, r0
 8006134:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006136:	7dbb      	ldrb	r3, [r7, #22]
 8006138:	2bff      	cmp	r3, #255	@ 0xff
 800613a:	d025      	beq.n	8006188 <USBD_LL_DataOutStage+0x15c>
 800613c:	7dbb      	ldrb	r3, [r7, #22]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d122      	bne.n	8006188 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b03      	cmp	r3, #3
 800614c:	d117      	bne.n	800617e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800614e:	7dba      	ldrb	r2, [r7, #22]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	32ae      	adds	r2, #174	@ 0xae
 8006154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00f      	beq.n	800617e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800615e:	7dba      	ldrb	r2, [r7, #22]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006166:	7dba      	ldrb	r2, [r7, #22]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	32ae      	adds	r2, #174	@ 0xae
 800616c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	7afa      	ldrb	r2, [r7, #11]
 8006174:	4611      	mov	r1, r2
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	4798      	blx	r3
 800617a:	4603      	mov	r3, r0
 800617c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800617e:	7dfb      	ldrb	r3, [r7, #23]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006184:	7dfb      	ldrb	r3, [r7, #23]
 8006186:	e000      	b.n	800618a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b086      	sub	sp, #24
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	460b      	mov	r3, r1
 800619c:	607a      	str	r2, [r7, #4]
 800619e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80061a0:	7afb      	ldrb	r3, [r7, #11]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d16f      	bne.n	8006286 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3314      	adds	r3, #20
 80061aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d15a      	bne.n	800626c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d914      	bls.n	80061ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	1ad2      	subs	r2, r2, r3
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	461a      	mov	r2, r3
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f001 f8da 	bl	8007392 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061de:	2300      	movs	r3, #0
 80061e0:	2200      	movs	r2, #0
 80061e2:	2100      	movs	r1, #0
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f001 fee3 	bl	8007fb0 <USBD_LL_PrepareReceive>
 80061ea:	e03f      	b.n	800626c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	68da      	ldr	r2, [r3, #12]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d11c      	bne.n	8006232 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006200:	429a      	cmp	r2, r3
 8006202:	d316      	bcc.n	8006232 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800620e:	429a      	cmp	r2, r3
 8006210:	d20f      	bcs.n	8006232 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006212:	2200      	movs	r2, #0
 8006214:	2100      	movs	r1, #0
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f001 f8bb 	bl	8007392 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006224:	2300      	movs	r3, #0
 8006226:	2200      	movs	r2, #0
 8006228:	2100      	movs	r1, #0
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f001 fec0 	bl	8007fb0 <USBD_LL_PrepareReceive>
 8006230:	e01c      	b.n	800626c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b03      	cmp	r3, #3
 800623c:	d10f      	bne.n	800625e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d009      	beq.n	800625e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800625e:	2180      	movs	r1, #128	@ 0x80
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f001 fdfb 	bl	8007e5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f001 f8e5 	bl	8007436 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d03a      	beq.n	80062ec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f7ff fe42 	bl	8005f00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006284:	e032      	b.n	80062ec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006286:	7afb      	ldrb	r3, [r7, #11]
 8006288:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800628c:	b2db      	uxtb	r3, r3
 800628e:	4619      	mov	r1, r3
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 f985 	bl	80065a0 <USBD_CoreFindEP>
 8006296:	4603      	mov	r3, r0
 8006298:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800629a:	7dfb      	ldrb	r3, [r7, #23]
 800629c:	2bff      	cmp	r3, #255	@ 0xff
 800629e:	d025      	beq.n	80062ec <USBD_LL_DataInStage+0x15a>
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d122      	bne.n	80062ec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d11c      	bne.n	80062ec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80062b2:	7dfa      	ldrb	r2, [r7, #23]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	32ae      	adds	r2, #174	@ 0xae
 80062b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d014      	beq.n	80062ec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80062c2:	7dfa      	ldrb	r2, [r7, #23]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80062ca:	7dfa      	ldrb	r2, [r7, #23]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	32ae      	adds	r2, #174	@ 0xae
 80062d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	7afa      	ldrb	r2, [r7, #11]
 80062d8:	4611      	mov	r1, r2
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	4798      	blx	r3
 80062de:	4603      	mov	r3, r0
 80062e0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80062e2:	7dbb      	ldrb	r3, [r7, #22]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80062e8:	7dbb      	ldrb	r3, [r7, #22]
 80062ea:	e000      	b.n	80062ee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800632e:	2b00      	cmp	r3, #0
 8006330:	d014      	beq.n	800635c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00e      	beq.n	800635c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6852      	ldr	r2, [r2, #4]
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	4611      	mov	r1, r2
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	4798      	blx	r3
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006358:	2303      	movs	r3, #3
 800635a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800635c:	2340      	movs	r3, #64	@ 0x40
 800635e:	2200      	movs	r2, #0
 8006360:	2100      	movs	r1, #0
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 fd35 	bl	8007dd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2240      	movs	r2, #64	@ 0x40
 8006374:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006378:	2340      	movs	r3, #64	@ 0x40
 800637a:	2200      	movs	r2, #0
 800637c:	2180      	movs	r1, #128	@ 0x80
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f001 fd27 	bl	8007dd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2240      	movs	r2, #64	@ 0x40
 800638e:	621a      	str	r2, [r3, #32]

  return ret;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	460b      	mov	r3, r1
 80063a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	78fa      	ldrb	r2, [r7, #3]
 80063aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d006      	beq.n	80063dc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2204      	movs	r2, #4
 80063e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b04      	cmp	r3, #4
 8006404:	d106      	bne.n	8006414 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800640c:	b2da      	uxtb	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b082      	sub	sp, #8
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b03      	cmp	r3, #3
 8006434:	d110      	bne.n	8006458 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00b      	beq.n	8006458 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d005      	beq.n	8006458 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b082      	sub	sp, #8
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	32ae      	adds	r2, #174	@ 0xae
 8006478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006480:	2303      	movs	r3, #3
 8006482:	e01c      	b.n	80064be <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b03      	cmp	r3, #3
 800648e:	d115      	bne.n	80064bc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	32ae      	adds	r2, #174	@ 0xae
 800649a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00b      	beq.n	80064bc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	32ae      	adds	r2, #174	@ 0xae
 80064ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	78fa      	ldrb	r2, [r7, #3]
 80064b6:	4611      	mov	r1, r2
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b082      	sub	sp, #8
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	460b      	mov	r3, r1
 80064d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	32ae      	adds	r2, #174	@ 0xae
 80064dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e01c      	b.n	8006522 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b03      	cmp	r3, #3
 80064f2:	d115      	bne.n	8006520 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	32ae      	adds	r2, #174	@ 0xae
 80064fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00b      	beq.n	8006520 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	32ae      	adds	r2, #174	@ 0xae
 8006512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006518:	78fa      	ldrb	r2, [r7, #3]
 800651a:	4611      	mov	r1, r2
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00e      	beq.n	800657c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	6852      	ldr	r2, [r2, #4]
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	4611      	mov	r1, r2
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	4798      	blx	r3
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006578:	2303      	movs	r3, #3
 800657a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800657c:	7bfb      	ldrb	r3, [r7, #15]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	460b      	mov	r3, r1
 8006590:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006592:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006594:	4618      	mov	r0, r3
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065ac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b086      	sub	sp, #24
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	460b      	mov	r3, r1
 80065c4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80065ce:	2300      	movs	r3, #0
 80065d0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	885b      	ldrh	r3, [r3, #2]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	7812      	ldrb	r2, [r2, #0]
 80065dc:	4293      	cmp	r3, r2
 80065de:	d91f      	bls.n	8006620 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80065e6:	e013      	b.n	8006610 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80065e8:	f107 030a 	add.w	r3, r7, #10
 80065ec:	4619      	mov	r1, r3
 80065ee:	6978      	ldr	r0, [r7, #20]
 80065f0:	f000 f81b 	bl	800662a <USBD_GetNextDesc>
 80065f4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	785b      	ldrb	r3, [r3, #1]
 80065fa:	2b05      	cmp	r3, #5
 80065fc:	d108      	bne.n	8006610 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	789b      	ldrb	r3, [r3, #2]
 8006606:	78fa      	ldrb	r2, [r7, #3]
 8006608:	429a      	cmp	r2, r3
 800660a:	d008      	beq.n	800661e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800660c:	2300      	movs	r3, #0
 800660e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	885b      	ldrh	r3, [r3, #2]
 8006614:	b29a      	uxth	r2, r3
 8006616:	897b      	ldrh	r3, [r7, #10]
 8006618:	429a      	cmp	r2, r3
 800661a:	d8e5      	bhi.n	80065e8 <USBD_GetEpDesc+0x2e>
 800661c:	e000      	b.n	8006620 <USBD_GetEpDesc+0x66>
          break;
 800661e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006620:	693b      	ldr	r3, [r7, #16]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	7812      	ldrb	r2, [r2, #0]
 8006640:	4413      	add	r3, r2
 8006642:	b29a      	uxth	r2, r3
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4413      	add	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006654:	68fb      	ldr	r3, [r7, #12]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006662:	b480      	push	{r7}
 8006664:	b087      	sub	sp, #28
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	3301      	adds	r3, #1
 8006678:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006680:	8a3b      	ldrh	r3, [r7, #16]
 8006682:	021b      	lsls	r3, r3, #8
 8006684:	b21a      	sxth	r2, r3
 8006686:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800668a:	4313      	orrs	r3, r2
 800668c:	b21b      	sxth	r3, r3
 800668e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006690:	89fb      	ldrh	r3, [r7, #14]
}
 8006692:	4618      	mov	r0, r3
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
	...

080066a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80066b6:	2b40      	cmp	r3, #64	@ 0x40
 80066b8:	d005      	beq.n	80066c6 <USBD_StdDevReq+0x26>
 80066ba:	2b40      	cmp	r3, #64	@ 0x40
 80066bc:	d857      	bhi.n	800676e <USBD_StdDevReq+0xce>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00f      	beq.n	80066e2 <USBD_StdDevReq+0x42>
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d153      	bne.n	800676e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	32ae      	adds	r2, #174	@ 0xae
 80066d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	4798      	blx	r3
 80066dc:	4603      	mov	r3, r0
 80066de:	73fb      	strb	r3, [r7, #15]
      break;
 80066e0:	e04a      	b.n	8006778 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	785b      	ldrb	r3, [r3, #1]
 80066e6:	2b09      	cmp	r3, #9
 80066e8:	d83b      	bhi.n	8006762 <USBD_StdDevReq+0xc2>
 80066ea:	a201      	add	r2, pc, #4	@ (adr r2, 80066f0 <USBD_StdDevReq+0x50>)
 80066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f0:	08006745 	.word	0x08006745
 80066f4:	08006759 	.word	0x08006759
 80066f8:	08006763 	.word	0x08006763
 80066fc:	0800674f 	.word	0x0800674f
 8006700:	08006763 	.word	0x08006763
 8006704:	08006723 	.word	0x08006723
 8006708:	08006719 	.word	0x08006719
 800670c:	08006763 	.word	0x08006763
 8006710:	0800673b 	.word	0x0800673b
 8006714:	0800672d 	.word	0x0800672d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fa3c 	bl	8006b98 <USBD_GetDescriptor>
          break;
 8006720:	e024      	b.n	800676c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fbcb 	bl	8006ec0 <USBD_SetAddress>
          break;
 800672a:	e01f      	b.n	800676c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fc0a 	bl	8006f48 <USBD_SetConfig>
 8006734:	4603      	mov	r3, r0
 8006736:	73fb      	strb	r3, [r7, #15]
          break;
 8006738:	e018      	b.n	800676c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fcad 	bl	800709c <USBD_GetConfig>
          break;
 8006742:	e013      	b.n	800676c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fcde 	bl	8007108 <USBD_GetStatus>
          break;
 800674c:	e00e      	b.n	800676c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fd0d 	bl	8007170 <USBD_SetFeature>
          break;
 8006756:	e009      	b.n	800676c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fd31 	bl	80071c2 <USBD_ClrFeature>
          break;
 8006760:	e004      	b.n	800676c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fd88 	bl	800727a <USBD_CtlError>
          break;
 800676a:	bf00      	nop
      }
      break;
 800676c:	e004      	b.n	8006778 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fd82 	bl	800727a <USBD_CtlError>
      break;
 8006776:	bf00      	nop
  }

  return ret;
 8006778:	7bfb      	ldrb	r3, [r7, #15]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop

08006784 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800679a:	2b40      	cmp	r3, #64	@ 0x40
 800679c:	d005      	beq.n	80067aa <USBD_StdItfReq+0x26>
 800679e:	2b40      	cmp	r3, #64	@ 0x40
 80067a0:	d852      	bhi.n	8006848 <USBD_StdItfReq+0xc4>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <USBD_StdItfReq+0x26>
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	d14e      	bne.n	8006848 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	3b01      	subs	r3, #1
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d840      	bhi.n	800683a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	889b      	ldrh	r3, [r3, #4]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d836      	bhi.n	8006830 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	889b      	ldrh	r3, [r3, #4]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff fedb 	bl	8006586 <USBD_CoreFindIF>
 80067d0:	4603      	mov	r3, r0
 80067d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
 80067d6:	2bff      	cmp	r3, #255	@ 0xff
 80067d8:	d01d      	beq.n	8006816 <USBD_StdItfReq+0x92>
 80067da:	7bbb      	ldrb	r3, [r7, #14]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d11a      	bne.n	8006816 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80067e0:	7bba      	ldrb	r2, [r7, #14]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	32ae      	adds	r2, #174	@ 0xae
 80067e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00f      	beq.n	8006810 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80067f0:	7bba      	ldrb	r2, [r7, #14]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067f8:	7bba      	ldrb	r2, [r7, #14]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	32ae      	adds	r2, #174	@ 0xae
 80067fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	4798      	blx	r3
 800680a:	4603      	mov	r3, r0
 800680c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800680e:	e004      	b.n	800681a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006810:	2303      	movs	r3, #3
 8006812:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006814:	e001      	b.n	800681a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006816:	2303      	movs	r3, #3
 8006818:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	88db      	ldrh	r3, [r3, #6]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d110      	bne.n	8006844 <USBD_StdItfReq+0xc0>
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10d      	bne.n	8006844 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fdf1 	bl	8007410 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800682e:	e009      	b.n	8006844 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fd21 	bl	800727a <USBD_CtlError>
          break;
 8006838:	e004      	b.n	8006844 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fd1c 	bl	800727a <USBD_CtlError>
          break;
 8006842:	e000      	b.n	8006846 <USBD_StdItfReq+0xc2>
          break;
 8006844:	bf00      	nop
      }
      break;
 8006846:	e004      	b.n	8006852 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fd15 	bl	800727a <USBD_CtlError>
      break;
 8006850:	bf00      	nop
  }

  return ret;
 8006852:	7bfb      	ldrb	r3, [r7, #15]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	889b      	ldrh	r3, [r3, #4]
 800686e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006878:	2b40      	cmp	r3, #64	@ 0x40
 800687a:	d007      	beq.n	800688c <USBD_StdEPReq+0x30>
 800687c:	2b40      	cmp	r3, #64	@ 0x40
 800687e:	f200 817f 	bhi.w	8006b80 <USBD_StdEPReq+0x324>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d02a      	beq.n	80068dc <USBD_StdEPReq+0x80>
 8006886:	2b20      	cmp	r3, #32
 8006888:	f040 817a 	bne.w	8006b80 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800688c:	7bbb      	ldrb	r3, [r7, #14]
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff fe85 	bl	80065a0 <USBD_CoreFindEP>
 8006896:	4603      	mov	r3, r0
 8006898:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800689a:	7b7b      	ldrb	r3, [r7, #13]
 800689c:	2bff      	cmp	r3, #255	@ 0xff
 800689e:	f000 8174 	beq.w	8006b8a <USBD_StdEPReq+0x32e>
 80068a2:	7b7b      	ldrb	r3, [r7, #13]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f040 8170 	bne.w	8006b8a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80068aa:	7b7a      	ldrb	r2, [r7, #13]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80068b2:	7b7a      	ldrb	r2, [r7, #13]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	32ae      	adds	r2, #174	@ 0xae
 80068b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 8163 	beq.w	8006b8a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80068c4:	7b7a      	ldrb	r2, [r7, #13]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	32ae      	adds	r2, #174	@ 0xae
 80068ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	4798      	blx	r3
 80068d6:	4603      	mov	r3, r0
 80068d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068da:	e156      	b.n	8006b8a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	785b      	ldrb	r3, [r3, #1]
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d008      	beq.n	80068f6 <USBD_StdEPReq+0x9a>
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	f300 8145 	bgt.w	8006b74 <USBD_StdEPReq+0x318>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 809b 	beq.w	8006a26 <USBD_StdEPReq+0x1ca>
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d03c      	beq.n	800696e <USBD_StdEPReq+0x112>
 80068f4:	e13e      	b.n	8006b74 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d002      	beq.n	8006908 <USBD_StdEPReq+0xac>
 8006902:	2b03      	cmp	r3, #3
 8006904:	d016      	beq.n	8006934 <USBD_StdEPReq+0xd8>
 8006906:	e02c      	b.n	8006962 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006908:	7bbb      	ldrb	r3, [r7, #14]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00d      	beq.n	800692a <USBD_StdEPReq+0xce>
 800690e:	7bbb      	ldrb	r3, [r7, #14]
 8006910:	2b80      	cmp	r3, #128	@ 0x80
 8006912:	d00a      	beq.n	800692a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006914:	7bbb      	ldrb	r3, [r7, #14]
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 fa9f 	bl	8007e5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800691e:	2180      	movs	r1, #128	@ 0x80
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f001 fa9b 	bl	8007e5c <USBD_LL_StallEP>
 8006926:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006928:	e020      	b.n	800696c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fca4 	bl	800727a <USBD_CtlError>
              break;
 8006932:	e01b      	b.n	800696c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	885b      	ldrh	r3, [r3, #2]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10e      	bne.n	800695a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800693c:	7bbb      	ldrb	r3, [r7, #14]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00b      	beq.n	800695a <USBD_StdEPReq+0xfe>
 8006942:	7bbb      	ldrb	r3, [r7, #14]
 8006944:	2b80      	cmp	r3, #128	@ 0x80
 8006946:	d008      	beq.n	800695a <USBD_StdEPReq+0xfe>
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	88db      	ldrh	r3, [r3, #6]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006950:	7bbb      	ldrb	r3, [r7, #14]
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 fa81 	bl	8007e5c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fd58 	bl	8007410 <USBD_CtlSendStatus>

              break;
 8006960:	e004      	b.n	800696c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fc88 	bl	800727a <USBD_CtlError>
              break;
 800696a:	bf00      	nop
          }
          break;
 800696c:	e107      	b.n	8006b7e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d002      	beq.n	8006980 <USBD_StdEPReq+0x124>
 800697a:	2b03      	cmp	r3, #3
 800697c:	d016      	beq.n	80069ac <USBD_StdEPReq+0x150>
 800697e:	e04b      	b.n	8006a18 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00d      	beq.n	80069a2 <USBD_StdEPReq+0x146>
 8006986:	7bbb      	ldrb	r3, [r7, #14]
 8006988:	2b80      	cmp	r3, #128	@ 0x80
 800698a:	d00a      	beq.n	80069a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800698c:	7bbb      	ldrb	r3, [r7, #14]
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 fa63 	bl	8007e5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006996:	2180      	movs	r1, #128	@ 0x80
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f001 fa5f 	bl	8007e5c <USBD_LL_StallEP>
 800699e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069a0:	e040      	b.n	8006a24 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fc68 	bl	800727a <USBD_CtlError>
              break;
 80069aa:	e03b      	b.n	8006a24 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	885b      	ldrh	r3, [r3, #2]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d136      	bne.n	8006a22 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069b4:	7bbb      	ldrb	r3, [r7, #14]
 80069b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d004      	beq.n	80069c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f001 fa69 	bl	8007e9a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fd21 	bl	8007410 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80069ce:	7bbb      	ldrb	r3, [r7, #14]
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff fde4 	bl	80065a0 <USBD_CoreFindEP>
 80069d8:	4603      	mov	r3, r0
 80069da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069dc:	7b7b      	ldrb	r3, [r7, #13]
 80069de:	2bff      	cmp	r3, #255	@ 0xff
 80069e0:	d01f      	beq.n	8006a22 <USBD_StdEPReq+0x1c6>
 80069e2:	7b7b      	ldrb	r3, [r7, #13]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d11c      	bne.n	8006a22 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80069e8:	7b7a      	ldrb	r2, [r7, #13]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80069f0:	7b7a      	ldrb	r2, [r7, #13]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	32ae      	adds	r2, #174	@ 0xae
 80069f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d010      	beq.n	8006a22 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a00:	7b7a      	ldrb	r2, [r7, #13]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	32ae      	adds	r2, #174	@ 0xae
 8006a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	4798      	blx	r3
 8006a12:	4603      	mov	r3, r0
 8006a14:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006a16:	e004      	b.n	8006a22 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fc2d 	bl	800727a <USBD_CtlError>
              break;
 8006a20:	e000      	b.n	8006a24 <USBD_StdEPReq+0x1c8>
              break;
 8006a22:	bf00      	nop
          }
          break;
 8006a24:	e0ab      	b.n	8006b7e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d002      	beq.n	8006a38 <USBD_StdEPReq+0x1dc>
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d032      	beq.n	8006a9c <USBD_StdEPReq+0x240>
 8006a36:	e097      	b.n	8006b68 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d007      	beq.n	8006a4e <USBD_StdEPReq+0x1f2>
 8006a3e:	7bbb      	ldrb	r3, [r7, #14]
 8006a40:	2b80      	cmp	r3, #128	@ 0x80
 8006a42:	d004      	beq.n	8006a4e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fc17 	bl	800727a <USBD_CtlError>
                break;
 8006a4c:	e091      	b.n	8006b72 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	da0b      	bge.n	8006a6e <USBD_StdEPReq+0x212>
 8006a56:	7bbb      	ldrb	r3, [r7, #14]
 8006a58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	3310      	adds	r3, #16
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	4413      	add	r3, r2
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	e00b      	b.n	8006a86 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a6e:	7bbb      	ldrb	r3, [r7, #14]
 8006a70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	4413      	add	r3, r2
 8006a84:	3304      	adds	r3, #4
 8006a86:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2202      	movs	r2, #2
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fc61 	bl	800735c <USBD_CtlSendData>
              break;
 8006a9a:	e06a      	b.n	8006b72 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	da11      	bge.n	8006ac8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006aa4:	7bbb      	ldrb	r3, [r7, #14]
 8006aa6:	f003 020f 	and.w	r2, r3, #15
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	4613      	mov	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	440b      	add	r3, r1
 8006ab6:	3324      	adds	r3, #36	@ 0x24
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d117      	bne.n	8006aee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fbda 	bl	800727a <USBD_CtlError>
                  break;
 8006ac6:	e054      	b.n	8006b72 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	f003 020f 	and.w	r2, r3, #15
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	440b      	add	r3, r1
 8006ada:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d104      	bne.n	8006aee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fbc7 	bl	800727a <USBD_CtlError>
                  break;
 8006aec:	e041      	b.n	8006b72 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006aee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	da0b      	bge.n	8006b0e <USBD_StdEPReq+0x2b2>
 8006af6:	7bbb      	ldrb	r3, [r7, #14]
 8006af8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	3310      	adds	r3, #16
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	4413      	add	r3, r2
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	e00b      	b.n	8006b26 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b0e:	7bbb      	ldrb	r3, [r7, #14]
 8006b10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	4413      	add	r3, r2
 8006b24:	3304      	adds	r3, #4
 8006b26:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b28:	7bbb      	ldrb	r3, [r7, #14]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d002      	beq.n	8006b34 <USBD_StdEPReq+0x2d8>
 8006b2e:	7bbb      	ldrb	r3, [r7, #14]
 8006b30:	2b80      	cmp	r3, #128	@ 0x80
 8006b32:	d103      	bne.n	8006b3c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2200      	movs	r2, #0
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e00e      	b.n	8006b5a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b3c:	7bbb      	ldrb	r3, [r7, #14]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 f9c9 	bl	8007ed8 <USBD_LL_IsStallEP>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e002      	b.n	8006b5a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fbfb 	bl	800735c <USBD_CtlSendData>
              break;
 8006b66:	e004      	b.n	8006b72 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fb85 	bl	800727a <USBD_CtlError>
              break;
 8006b70:	bf00      	nop
          }
          break;
 8006b72:	e004      	b.n	8006b7e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fb7f 	bl	800727a <USBD_CtlError>
          break;
 8006b7c:	bf00      	nop
      }
      break;
 8006b7e:	e005      	b.n	8006b8c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fb79 	bl	800727a <USBD_CtlError>
      break;
 8006b88:	e000      	b.n	8006b8c <USBD_StdEPReq+0x330>
      break;
 8006b8a:	bf00      	nop
  }

  return ret;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	885b      	ldrh	r3, [r3, #2]
 8006bb2:	0a1b      	lsrs	r3, r3, #8
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	2b0e      	cmp	r3, #14
 8006bba:	f200 8152 	bhi.w	8006e62 <USBD_GetDescriptor+0x2ca>
 8006bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc4 <USBD_GetDescriptor+0x2c>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006c35 	.word	0x08006c35
 8006bc8:	08006c4d 	.word	0x08006c4d
 8006bcc:	08006c8d 	.word	0x08006c8d
 8006bd0:	08006e63 	.word	0x08006e63
 8006bd4:	08006e63 	.word	0x08006e63
 8006bd8:	08006e03 	.word	0x08006e03
 8006bdc:	08006e2f 	.word	0x08006e2f
 8006be0:	08006e63 	.word	0x08006e63
 8006be4:	08006e63 	.word	0x08006e63
 8006be8:	08006e63 	.word	0x08006e63
 8006bec:	08006e63 	.word	0x08006e63
 8006bf0:	08006e63 	.word	0x08006e63
 8006bf4:	08006e63 	.word	0x08006e63
 8006bf8:	08006e63 	.word	0x08006e63
 8006bfc:	08006c01 	.word	0x08006c01
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00b      	beq.n	8006c24 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	7c12      	ldrb	r2, [r2, #16]
 8006c18:	f107 0108 	add.w	r1, r7, #8
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	4798      	blx	r3
 8006c20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c22:	e126      	b.n	8006e72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fb27 	bl	800727a <USBD_CtlError>
        err++;
 8006c2c:	7afb      	ldrb	r3, [r7, #11]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	72fb      	strb	r3, [r7, #11]
      break;
 8006c32:	e11e      	b.n	8006e72 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	7c12      	ldrb	r2, [r2, #16]
 8006c40:	f107 0108 	add.w	r1, r7, #8
 8006c44:	4610      	mov	r0, r2
 8006c46:	4798      	blx	r3
 8006c48:	60f8      	str	r0, [r7, #12]
      break;
 8006c4a:	e112      	b.n	8006e72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	7c1b      	ldrb	r3, [r3, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10d      	bne.n	8006c70 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c5c:	f107 0208 	add.w	r2, r7, #8
 8006c60:	4610      	mov	r0, r2
 8006c62:	4798      	blx	r3
 8006c64:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c6e:	e100      	b.n	8006e72 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c78:	f107 0208 	add.w	r2, r7, #8
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	4798      	blx	r3
 8006c80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	3301      	adds	r3, #1
 8006c86:	2202      	movs	r2, #2
 8006c88:	701a      	strb	r2, [r3, #0]
      break;
 8006c8a:	e0f2      	b.n	8006e72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	885b      	ldrh	r3, [r3, #2]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b05      	cmp	r3, #5
 8006c94:	f200 80ac 	bhi.w	8006df0 <USBD_GetDescriptor+0x258>
 8006c98:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca0 <USBD_GetDescriptor+0x108>)
 8006c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9e:	bf00      	nop
 8006ca0:	08006cb9 	.word	0x08006cb9
 8006ca4:	08006ced 	.word	0x08006ced
 8006ca8:	08006d21 	.word	0x08006d21
 8006cac:	08006d55 	.word	0x08006d55
 8006cb0:	08006d89 	.word	0x08006d89
 8006cb4:	08006dbd 	.word	0x08006dbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00b      	beq.n	8006cdc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	7c12      	ldrb	r2, [r2, #16]
 8006cd0:	f107 0108 	add.w	r1, r7, #8
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	4798      	blx	r3
 8006cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cda:	e091      	b.n	8006e00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 facb 	bl	800727a <USBD_CtlError>
            err++;
 8006ce4:	7afb      	ldrb	r3, [r7, #11]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cea:	e089      	b.n	8006e00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00b      	beq.n	8006d10 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	7c12      	ldrb	r2, [r2, #16]
 8006d04:	f107 0108 	add.w	r1, r7, #8
 8006d08:	4610      	mov	r0, r2
 8006d0a:	4798      	blx	r3
 8006d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d0e:	e077      	b.n	8006e00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fab1 	bl	800727a <USBD_CtlError>
            err++;
 8006d18:	7afb      	ldrb	r3, [r7, #11]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d1e:	e06f      	b.n	8006e00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00b      	beq.n	8006d44 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	7c12      	ldrb	r2, [r2, #16]
 8006d38:	f107 0108 	add.w	r1, r7, #8
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	4798      	blx	r3
 8006d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d42:	e05d      	b.n	8006e00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fa97 	bl	800727a <USBD_CtlError>
            err++;
 8006d4c:	7afb      	ldrb	r3, [r7, #11]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	72fb      	strb	r3, [r7, #11]
          break;
 8006d52:	e055      	b.n	8006e00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00b      	beq.n	8006d78 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	7c12      	ldrb	r2, [r2, #16]
 8006d6c:	f107 0108 	add.w	r1, r7, #8
 8006d70:	4610      	mov	r0, r2
 8006d72:	4798      	blx	r3
 8006d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d76:	e043      	b.n	8006e00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fa7d 	bl	800727a <USBD_CtlError>
            err++;
 8006d80:	7afb      	ldrb	r3, [r7, #11]
 8006d82:	3301      	adds	r3, #1
 8006d84:	72fb      	strb	r3, [r7, #11]
          break;
 8006d86:	e03b      	b.n	8006e00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00b      	beq.n	8006dac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	7c12      	ldrb	r2, [r2, #16]
 8006da0:	f107 0108 	add.w	r1, r7, #8
 8006da4:	4610      	mov	r0, r2
 8006da6:	4798      	blx	r3
 8006da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006daa:	e029      	b.n	8006e00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fa63 	bl	800727a <USBD_CtlError>
            err++;
 8006db4:	7afb      	ldrb	r3, [r7, #11]
 8006db6:	3301      	adds	r3, #1
 8006db8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dba:	e021      	b.n	8006e00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	7c12      	ldrb	r2, [r2, #16]
 8006dd4:	f107 0108 	add.w	r1, r7, #8
 8006dd8:	4610      	mov	r0, r2
 8006dda:	4798      	blx	r3
 8006ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dde:	e00f      	b.n	8006e00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fa49 	bl	800727a <USBD_CtlError>
            err++;
 8006de8:	7afb      	ldrb	r3, [r7, #11]
 8006dea:	3301      	adds	r3, #1
 8006dec:	72fb      	strb	r3, [r7, #11]
          break;
 8006dee:	e007      	b.n	8006e00 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fa41 	bl	800727a <USBD_CtlError>
          err++;
 8006df8:	7afb      	ldrb	r3, [r7, #11]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006dfe:	bf00      	nop
      }
      break;
 8006e00:	e037      	b.n	8006e72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	7c1b      	ldrb	r3, [r3, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d109      	bne.n	8006e1e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e12:	f107 0208 	add.w	r2, r7, #8
 8006e16:	4610      	mov	r0, r2
 8006e18:	4798      	blx	r3
 8006e1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e1c:	e029      	b.n	8006e72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fa2a 	bl	800727a <USBD_CtlError>
        err++;
 8006e26:	7afb      	ldrb	r3, [r7, #11]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e2c:	e021      	b.n	8006e72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	7c1b      	ldrb	r3, [r3, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10d      	bne.n	8006e52 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3e:	f107 0208 	add.w	r2, r7, #8
 8006e42:	4610      	mov	r0, r2
 8006e44:	4798      	blx	r3
 8006e46:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	2207      	movs	r2, #7
 8006e4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e50:	e00f      	b.n	8006e72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fa10 	bl	800727a <USBD_CtlError>
        err++;
 8006e5a:	7afb      	ldrb	r3, [r7, #11]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	72fb      	strb	r3, [r7, #11]
      break;
 8006e60:	e007      	b.n	8006e72 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fa08 	bl	800727a <USBD_CtlError>
      err++;
 8006e6a:	7afb      	ldrb	r3, [r7, #11]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	72fb      	strb	r3, [r7, #11]
      break;
 8006e70:	bf00      	nop
  }

  if (err != 0U)
 8006e72:	7afb      	ldrb	r3, [r7, #11]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d11e      	bne.n	8006eb6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	88db      	ldrh	r3, [r3, #6]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d016      	beq.n	8006eae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006e80:	893b      	ldrh	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00e      	beq.n	8006ea4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	88da      	ldrh	r2, [r3, #6]
 8006e8a:	893b      	ldrh	r3, [r7, #8]
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	bf28      	it	cs
 8006e90:	4613      	movcs	r3, r2
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e96:	893b      	ldrh	r3, [r7, #8]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	68f9      	ldr	r1, [r7, #12]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fa5d 	bl	800735c <USBD_CtlSendData>
 8006ea2:	e009      	b.n	8006eb8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f9e7 	bl	800727a <USBD_CtlError>
 8006eac:	e004      	b.n	8006eb8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 faae 	bl	8007410 <USBD_CtlSendStatus>
 8006eb4:	e000      	b.n	8006eb8 <USBD_GetDescriptor+0x320>
    return;
 8006eb6:	bf00      	nop
  }
}
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop

08006ec0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	889b      	ldrh	r3, [r3, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d131      	bne.n	8006f36 <USBD_SetAddress+0x76>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	88db      	ldrh	r3, [r3, #6]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d12d      	bne.n	8006f36 <USBD_SetAddress+0x76>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	885b      	ldrh	r3, [r3, #2]
 8006ede:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ee0:	d829      	bhi.n	8006f36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	885b      	ldrh	r3, [r3, #2]
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d104      	bne.n	8006f04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f9bc 	bl	800727a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f02:	e01d      	b.n	8006f40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	7bfa      	ldrb	r2, [r7, #15]
 8006f08:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 f80d 	bl	8007f30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fa7a 	bl	8007410 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2202      	movs	r2, #2
 8006f26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f2a:	e009      	b.n	8006f40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f34:	e004      	b.n	8006f40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f99e 	bl	800727a <USBD_CtlError>
  }
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	885b      	ldrh	r3, [r3, #2]
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	4b4e      	ldr	r3, [pc, #312]	@ (8007098 <USBD_SetConfig+0x150>)
 8006f5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f60:	4b4d      	ldr	r3, [pc, #308]	@ (8007098 <USBD_SetConfig+0x150>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d905      	bls.n	8006f74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f985 	bl	800727a <USBD_CtlError>
    return USBD_FAIL;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e08c      	b.n	800708e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d002      	beq.n	8006f86 <USBD_SetConfig+0x3e>
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d029      	beq.n	8006fd8 <USBD_SetConfig+0x90>
 8006f84:	e075      	b.n	8007072 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f86:	4b44      	ldr	r3, [pc, #272]	@ (8007098 <USBD_SetConfig+0x150>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d020      	beq.n	8006fd0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006f8e:	4b42      	ldr	r3, [pc, #264]	@ (8007098 <USBD_SetConfig+0x150>)
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f98:	4b3f      	ldr	r3, [pc, #252]	@ (8007098 <USBD_SetConfig+0x150>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7fe ffb9 	bl	8005f16 <USBD_SetClassConfig>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d008      	beq.n	8006fc0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f962 	bl	800727a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fbe:	e065      	b.n	800708c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fa25 	bl	8007410 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2203      	movs	r2, #3
 8006fca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006fce:	e05d      	b.n	800708c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fa1d 	bl	8007410 <USBD_CtlSendStatus>
      break;
 8006fd6:	e059      	b.n	800708c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006fd8:	4b2f      	ldr	r3, [pc, #188]	@ (8007098 <USBD_SetConfig+0x150>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d112      	bne.n	8007006 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8007098 <USBD_SetConfig+0x150>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ff2:	4b29      	ldr	r3, [pc, #164]	@ (8007098 <USBD_SetConfig+0x150>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7fe ffa8 	bl	8005f4e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fa06 	bl	8007410 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007004:	e042      	b.n	800708c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007006:	4b24      	ldr	r3, [pc, #144]	@ (8007098 <USBD_SetConfig+0x150>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	429a      	cmp	r2, r3
 8007012:	d02a      	beq.n	800706a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	b2db      	uxtb	r3, r3
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7fe ff96 	bl	8005f4e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007022:	4b1d      	ldr	r3, [pc, #116]	@ (8007098 <USBD_SetConfig+0x150>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800702c:	4b1a      	ldr	r3, [pc, #104]	@ (8007098 <USBD_SetConfig+0x150>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	4619      	mov	r1, r3
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fe ff6f 	bl	8005f16 <USBD_SetClassConfig>
 8007038:	4603      	mov	r3, r0
 800703a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800703c:	7bfb      	ldrb	r3, [r7, #15]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00f      	beq.n	8007062 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f918 	bl	800727a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	b2db      	uxtb	r3, r3
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7fe ff7b 	bl	8005f4e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007060:	e014      	b.n	800708c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f9d4 	bl	8007410 <USBD_CtlSendStatus>
      break;
 8007068:	e010      	b.n	800708c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f9d0 	bl	8007410 <USBD_CtlSendStatus>
      break;
 8007070:	e00c      	b.n	800708c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f900 	bl	800727a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800707a:	4b07      	ldr	r3, [pc, #28]	@ (8007098 <USBD_SetConfig+0x150>)
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7fe ff64 	bl	8005f4e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007086:	2303      	movs	r3, #3
 8007088:	73fb      	strb	r3, [r7, #15]
      break;
 800708a:	bf00      	nop
  }

  return ret;
 800708c:	7bfb      	ldrb	r3, [r7, #15]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	200003c0 	.word	0x200003c0

0800709c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	88db      	ldrh	r3, [r3, #6]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d004      	beq.n	80070b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f8e2 	bl	800727a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80070b6:	e023      	b.n	8007100 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	dc02      	bgt.n	80070ca <USBD_GetConfig+0x2e>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	dc03      	bgt.n	80070d0 <USBD_GetConfig+0x34>
 80070c8:	e015      	b.n	80070f6 <USBD_GetConfig+0x5a>
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d00b      	beq.n	80070e6 <USBD_GetConfig+0x4a>
 80070ce:	e012      	b.n	80070f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	3308      	adds	r3, #8
 80070da:	2201      	movs	r2, #1
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f93c 	bl	800735c <USBD_CtlSendData>
        break;
 80070e4:	e00c      	b.n	8007100 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3304      	adds	r3, #4
 80070ea:	2201      	movs	r2, #1
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f934 	bl	800735c <USBD_CtlSendData>
        break;
 80070f4:	e004      	b.n	8007100 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f8be 	bl	800727a <USBD_CtlError>
        break;
 80070fe:	bf00      	nop
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007118:	b2db      	uxtb	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	2b02      	cmp	r3, #2
 800711e:	d81e      	bhi.n	800715e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	88db      	ldrh	r3, [r3, #6]
 8007124:	2b02      	cmp	r3, #2
 8007126:	d004      	beq.n	8007132 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f8a5 	bl	800727a <USBD_CtlError>
        break;
 8007130:	e01a      	b.n	8007168 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800713e:	2b00      	cmp	r3, #0
 8007140:	d005      	beq.n	800714e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f043 0202 	orr.w	r2, r3, #2
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	330c      	adds	r3, #12
 8007152:	2202      	movs	r2, #2
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f900 	bl	800735c <USBD_CtlSendData>
      break;
 800715c:	e004      	b.n	8007168 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f88a 	bl	800727a <USBD_CtlError>
      break;
 8007166:	bf00      	nop
  }
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	885b      	ldrh	r3, [r3, #2]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d107      	bne.n	8007192 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f940 	bl	8007410 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007190:	e013      	b.n	80071ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	885b      	ldrh	r3, [r3, #2]
 8007196:	2b02      	cmp	r3, #2
 8007198:	d10b      	bne.n	80071b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	889b      	ldrh	r3, [r3, #4]
 800719e:	0a1b      	lsrs	r3, r3, #8
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f930 	bl	8007410 <USBD_CtlSendStatus>
}
 80071b0:	e003      	b.n	80071ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f860 	bl	800727a <USBD_CtlError>
}
 80071ba:	bf00      	nop
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	3b01      	subs	r3, #1
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d80b      	bhi.n	80071f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	885b      	ldrh	r3, [r3, #2]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d10c      	bne.n	80071fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f910 	bl	8007410 <USBD_CtlSendStatus>
      }
      break;
 80071f0:	e004      	b.n	80071fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f840 	bl	800727a <USBD_CtlError>
      break;
 80071fa:	e000      	b.n	80071fe <USBD_ClrFeature+0x3c>
      break;
 80071fc:	bf00      	nop
  }
}
 80071fe:	bf00      	nop
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	781a      	ldrb	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3301      	adds	r3, #1
 8007220:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	781a      	ldrb	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3301      	adds	r3, #1
 800722e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7ff fa16 	bl	8006662 <SWAPBYTE>
 8007236:	4603      	mov	r3, r0
 8007238:	461a      	mov	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3301      	adds	r3, #1
 8007242:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3301      	adds	r3, #1
 8007248:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f7ff fa09 	bl	8006662 <SWAPBYTE>
 8007250:	4603      	mov	r3, r0
 8007252:	461a      	mov	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3301      	adds	r3, #1
 800725c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3301      	adds	r3, #1
 8007262:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f7ff f9fc 	bl	8006662 <SWAPBYTE>
 800726a:	4603      	mov	r3, r0
 800726c:	461a      	mov	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	80da      	strh	r2, [r3, #6]
}
 8007272:	bf00      	nop
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b082      	sub	sp, #8
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007284:	2180      	movs	r1, #128	@ 0x80
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fde8 	bl	8007e5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800728c:	2100      	movs	r1, #0
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fde4 	bl	8007e5c <USBD_LL_StallEP>
}
 8007294:	bf00      	nop
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d036      	beq.n	8007320 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80072b6:	6938      	ldr	r0, [r7, #16]
 80072b8:	f000 f836 	bl	8007328 <USBD_GetLen>
 80072bc:	4603      	mov	r3, r0
 80072be:	3301      	adds	r3, #1
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	005b      	lsls	r3, r3, #1
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	4413      	add	r3, r2
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	7812      	ldrb	r2, [r2, #0]
 80072d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80072d6:	7dfb      	ldrb	r3, [r7, #23]
 80072d8:	3301      	adds	r3, #1
 80072da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	4413      	add	r3, r2
 80072e2:	2203      	movs	r2, #3
 80072e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
 80072e8:	3301      	adds	r3, #1
 80072ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80072ec:	e013      	b.n	8007316 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80072ee:	7dfb      	ldrb	r3, [r7, #23]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	4413      	add	r3, r2
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	7812      	ldrb	r2, [r2, #0]
 80072f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	3301      	adds	r3, #1
 80072fe:	613b      	str	r3, [r7, #16]
    idx++;
 8007300:	7dfb      	ldrb	r3, [r7, #23]
 8007302:	3301      	adds	r3, #1
 8007304:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007306:	7dfb      	ldrb	r3, [r7, #23]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	4413      	add	r3, r2
 800730c:	2200      	movs	r2, #0
 800730e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	3301      	adds	r3, #1
 8007314:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1e7      	bne.n	80072ee <USBD_GetString+0x52>
 800731e:	e000      	b.n	8007322 <USBD_GetString+0x86>
    return;
 8007320:	bf00      	nop
  }
}
 8007322:	3718      	adds	r7, #24
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007338:	e005      	b.n	8007346 <USBD_GetLen+0x1e>
  {
    len++;
 800733a:	7bfb      	ldrb	r3, [r7, #15]
 800733c:	3301      	adds	r3, #1
 800733e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	3301      	adds	r3, #1
 8007344:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1f5      	bne.n	800733a <USBD_GetLen+0x12>
  }

  return len;
 800734e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2202      	movs	r2, #2
 800736c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	2100      	movs	r1, #0
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 fdf3 	bl	8007f6e <USBD_LL_Transmit>

  return USBD_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	2100      	movs	r1, #0
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fde2 	bl	8007f6e <USBD_LL_Transmit>

  return USBD_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2203      	movs	r2, #3
 80073c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	2100      	movs	r1, #0
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f000 fde6 	bl	8007fb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	2100      	movs	r1, #0
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 fdd5 	bl	8007fb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2204      	movs	r2, #4
 800741c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007420:	2300      	movs	r3, #0
 8007422:	2200      	movs	r2, #0
 8007424:	2100      	movs	r1, #0
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fda1 	bl	8007f6e <USBD_LL_Transmit>

  return USBD_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b082      	sub	sp, #8
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2205      	movs	r2, #5
 8007442:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007446:	2300      	movs	r3, #0
 8007448:	2200      	movs	r2, #0
 800744a:	2100      	movs	r1, #0
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fdaf 	bl	8007fb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <tp_set_contact>:
		memset(&contacts_by_ID[id], 0, sizeof (Contact));
	}
}

void tp_set_contact(uint8_t contact_ID, uint16_t x, uint16_t y)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	4603      	mov	r3, r0
 8007464:	71fb      	strb	r3, [r7, #7]
 8007466:	460b      	mov	r3, r1
 8007468:	80bb      	strh	r3, [r7, #4]
 800746a:	4613      	mov	r3, r2
 800746c:	807b      	strh	r3, [r7, #2]
	contacts_by_ID[contact_ID].confidence = 1;
 800746e:	79fa      	ldrb	r2, [r7, #7]
 8007470:	491c      	ldr	r1, [pc, #112]	@ (80074e4 <tp_set_contact+0x88>)
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	18ca      	adds	r2, r1, r3
 800747a:	7813      	ldrb	r3, [r2, #0]
 800747c:	f043 0301 	orr.w	r3, r3, #1
 8007480:	7013      	strb	r3, [r2, #0]
	contacts_by_ID[contact_ID].tip_switch = 1;
 8007482:	79fa      	ldrb	r2, [r7, #7]
 8007484:	4917      	ldr	r1, [pc, #92]	@ (80074e4 <tp_set_contact+0x88>)
 8007486:	4613      	mov	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	18ca      	adds	r2, r1, r3
 800748e:	7813      	ldrb	r3, [r2, #0]
 8007490:	f043 0302 	orr.w	r3, r3, #2
 8007494:	7013      	strb	r3, [r2, #0]
	contacts_by_ID[contact_ID].contact_ID = contact_ID;
 8007496:	79fa      	ldrb	r2, [r7, #7]
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	b2d9      	uxtb	r1, r3
 80074a0:	4810      	ldr	r0, [pc, #64]	@ (80074e4 <tp_set_contact+0x88>)
 80074a2:	4613      	mov	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	18c2      	adds	r2, r0, r3
 80074aa:	7813      	ldrb	r3, [r2, #0]
 80074ac:	f361 0385 	bfi	r3, r1, #2, #4
 80074b0:	7013      	strb	r3, [r2, #0]
	contacts_by_ID[contact_ID].x = x;
 80074b2:	79fa      	ldrb	r2, [r7, #7]
 80074b4:	490b      	ldr	r1, [pc, #44]	@ (80074e4 <tp_set_contact+0x88>)
 80074b6:	4613      	mov	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	440b      	add	r3, r1
 80074be:	88ba      	ldrh	r2, [r7, #4]
 80074c0:	f8a3 2001 	strh.w	r2, [r3, #1]
	contacts_by_ID[contact_ID].y = y;
 80074c4:	79fa      	ldrb	r2, [r7, #7]
 80074c6:	4907      	ldr	r1, [pc, #28]	@ (80074e4 <tp_set_contact+0x88>)
 80074c8:	4613      	mov	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	440b      	add	r3, r1
 80074d0:	887a      	ldrh	r2, [r7, #2]
 80074d2:	f8a3 2003 	strh.w	r2, [r3, #3]
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	200003c4 	.word	0x200003c4

080074e8 <tp_set_reset_buttons>:
{
	contacts_by_ID[contact_ID].tip_switch = 0;
}

void tp_set_reset_buttons(uint8_t left_click, uint8_t middle_click, uint8_t right_click)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	4603      	mov	r3, r0
 80074f0:	71fb      	strb	r3, [r7, #7]
 80074f2:	460b      	mov	r3, r1
 80074f4:	71bb      	strb	r3, [r7, #6]
 80074f6:	4613      	mov	r3, r2
 80074f8:	717b      	strb	r3, [r7, #5]
	button_states[0] = left_click;
 80074fa:	4a07      	ldr	r2, [pc, #28]	@ (8007518 <tp_set_reset_buttons+0x30>)
 80074fc:	79fb      	ldrb	r3, [r7, #7]
 80074fe:	7013      	strb	r3, [r2, #0]
	button_states[1] = middle_click;
 8007500:	4a05      	ldr	r2, [pc, #20]	@ (8007518 <tp_set_reset_buttons+0x30>)
 8007502:	79bb      	ldrb	r3, [r7, #6]
 8007504:	7053      	strb	r3, [r2, #1]
	button_states[2] = right_click;
 8007506:	4a04      	ldr	r2, [pc, #16]	@ (8007518 <tp_set_reset_buttons+0x30>)
 8007508:	797b      	ldrb	r3, [r7, #5]
 800750a:	7093      	strb	r3, [r2, #2]
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	200003e0 	.word	0x200003e0

0800751c <tp_update>:

void tp_update(int scan_time_ms)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
	TouchpadConfiguration tc = get_touchpad_configuration();
 8007524:	f000 f952 	bl	80077cc <get_touchpad_configuration>
 8007528:	4603      	mov	r3, r0
 800752a:	461a      	mov	r2, r3
 800752c:	733a      	strb	r2, [r7, #12]
 800752e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007532:	737a      	strb	r2, [r7, #13]
 8007534:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007538:	73bb      	strb	r3, [r7, #14]
	if (tc.input_mode == TP_INPUT_MODE_TOUCHPAD)
 800753a:	7b3b      	ldrb	r3, [r7, #12]
 800753c:	2b03      	cmp	r3, #3
 800753e:	d103      	bne.n	8007548 <tp_update+0x2c>
	{
		tp_send_touchpad_report(scan_time_ms);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f80b 	bl	800755c <tp_send_touchpad_report>
//				return;
//			}
//		}
		tp_send_mouse_report(0, 0, 0, 0);	// No contact is set, so send empty report
	}
}
 8007546:	e005      	b.n	8007554 <tp_update+0x38>
		tp_send_mouse_report(0, 0, 0, 0);	// No contact is set, so send empty report
 8007548:	2300      	movs	r3, #0
 800754a:	2200      	movs	r2, #0
 800754c:	2100      	movs	r1, #0
 800754e:	2000      	movs	r0, #0
 8007550:	f000 f89c 	bl	800768c <tp_send_mouse_report>
}
 8007554:	bf00      	nop
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <tp_send_touchpad_report>:

// Direct usage discouraged!
void tp_send_touchpad_report(int scan_time_ms)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b08e      	sub	sp, #56	@ 0x38
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
	TouchpadReport report;
	report.report_ID = REPORTID_TOUCHPAD;
 8007564:	2301      	movs	r3, #1
 8007566:	733b      	strb	r3, [r7, #12]
	report.scan_time = (uint16_t) (scan_time_ms * 10);	// Convert 100μs units to 1ms units and let overflow wrap around
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	b29b      	uxth	r3, r3
 800756c:	461a      	mov	r2, r3
 800756e:	0092      	lsls	r2, r2, #2
 8007570:	4413      	add	r3, r2
 8007572:	005b      	lsls	r3, r3, #1
 8007574:	b29b      	uxth	r3, r3
 8007576:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int count = 0;
 8007578:	2300      	movs	r3, #0
 800757a:	637b      	str	r3, [r7, #52]	@ 0x34
	TouchpadConfiguration tc = get_touchpad_configuration();
 800757c:	f000 f926 	bl	80077cc <get_touchpad_configuration>
 8007580:	4603      	mov	r3, r0
 8007582:	461a      	mov	r2, r3
 8007584:	723a      	strb	r2, [r7, #8]
 8007586:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800758a:	727a      	strb	r2, [r7, #9]
 800758c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007590:	72bb      	strb	r3, [r7, #10]
	if (tc.surface_switch)	// Contacts are to be reported
 8007592:	7a7b      	ldrb	r3, [r7, #9]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d040      	beq.n	800761a <tp_send_touchpad_report+0xbe>
	{
		for (int id = 0; id < TP_MAX_CONTACTS; id++)
 8007598:	2300      	movs	r3, #0
 800759a:	633b      	str	r3, [r7, #48]	@ 0x30
 800759c:	e024      	b.n	80075e8 <tp_send_touchpad_report+0x8c>
		{
			if (contacts_by_ID[id].tip_switch)
 800759e:	4938      	ldr	r1, [pc, #224]	@ (8007680 <tp_send_touchpad_report+0x124>)
 80075a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075a2:	4613      	mov	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	440b      	add	r3, r1
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d015      	beq.n	80075e2 <tp_send_touchpad_report+0x86>
			{
				report.reported_contacts[count] = contacts_by_ID[id];
 80075b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075b8:	4613      	mov	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	3338      	adds	r3, #56	@ 0x38
 80075c0:	443b      	add	r3, r7
 80075c2:	f1a3 012c 	sub.w	r1, r3, #44	@ 0x2c
 80075c6:	482e      	ldr	r0, [pc, #184]	@ (8007680 <tp_send_touchpad_report+0x124>)
 80075c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ca:	4613      	mov	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	18c2      	adds	r2, r0, r3
 80075d2:	1c4b      	adds	r3, r1, #1
 80075d4:	6811      	ldr	r1, [r2, #0]
 80075d6:	6019      	str	r1, [r3, #0]
 80075d8:	7912      	ldrb	r2, [r2, #4]
 80075da:	711a      	strb	r2, [r3, #4]
				count++;
 80075dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075de:	3301      	adds	r3, #1
 80075e0:	637b      	str	r3, [r7, #52]	@ 0x34
		for (int id = 0; id < TP_MAX_CONTACTS; id++)
 80075e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e4:	3301      	adds	r3, #1
 80075e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80075e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	ddd7      	ble.n	800759e <tp_send_touchpad_report+0x42>
			}
		}
		for (int j = count; j < TP_MAX_CONTACTS; j++)
 80075ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075f2:	e00f      	b.n	8007614 <tp_send_touchpad_report+0xb8>
		{
			memset(&report.reported_contacts[j], 0, sizeof (Contact));
 80075f4:	f107 010c 	add.w	r1, r7, #12
 80075f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075fa:	4613      	mov	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	440b      	add	r3, r1
 8007602:	3301      	adds	r3, #1
 8007604:	2205      	movs	r2, #5
 8007606:	2100      	movs	r1, #0
 8007608:	4618      	mov	r0, r3
 800760a:	f000 fd85 	bl	8008118 <memset>
		for (int j = count; j < TP_MAX_CONTACTS; j++)
 800760e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007610:	3301      	adds	r3, #1
 8007612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007616:	2b04      	cmp	r3, #4
 8007618:	ddec      	ble.n	80075f4 <tp_send_touchpad_report+0x98>
		}
	}
	report.contact_count = count;
 800761a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761c:	b2db      	uxtb	r3, r3
 800761e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	if (tc.button_switch)
 8007622:	7abb      	ldrb	r3, [r7, #10]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d020      	beq.n	800766a <tp_send_touchpad_report+0x10e>
	{
		report.left_click = button_states[0];
 8007628:	4b16      	ldr	r3, [pc, #88]	@ (8007684 <tp_send_touchpad_report+0x128>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	f003 0301 	and.w	r3, r3, #1
 8007630:	b2da      	uxtb	r2, r3
 8007632:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007636:	f362 0300 	bfi	r3, r2, #0, #1
 800763a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		report.middle_click = button_states[1];
 800763e:	4b11      	ldr	r3, [pc, #68]	@ (8007684 <tp_send_touchpad_report+0x128>)
 8007640:	785b      	ldrb	r3, [r3, #1]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	b2da      	uxtb	r2, r3
 8007648:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800764c:	f362 0341 	bfi	r3, r2, #1, #1
 8007650:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		report.right_click = button_states[2];
 8007654:	4b0b      	ldr	r3, [pc, #44]	@ (8007684 <tp_send_touchpad_report+0x128>)
 8007656:	789b      	ldrb	r3, [r3, #2]
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	b2da      	uxtb	r2, r3
 800765e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007662:	f362 0382 	bfi	r3, r2, #2, #1
 8007666:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	}
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *) &report, sizeof (report));
 800766a:	f107 030c 	add.w	r3, r7, #12
 800766e:	221e      	movs	r2, #30
 8007670:	4619      	mov	r1, r3
 8007672:	4805      	ldr	r0, [pc, #20]	@ (8007688 <tp_send_touchpad_report+0x12c>)
 8007674:	f7fe fa4a 	bl	8005b0c <USBD_CUSTOM_HID_SendReport>
}
 8007678:	bf00      	nop
 800767a:	3738      	adds	r7, #56	@ 0x38
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	200003c4 	.word	0x200003c4
 8007684:	200003e0 	.word	0x200003e0
 8007688:	200003e4 	.word	0x200003e4

0800768c <tp_send_mouse_report>:

// Direct usage discouraged!
void tp_send_mouse_report(uint16_t x, uint16_t y, uint8_t left_click, uint8_t right_click)
{
 800768c:	b590      	push	{r4, r7, lr}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	4604      	mov	r4, r0
 8007694:	4608      	mov	r0, r1
 8007696:	4611      	mov	r1, r2
 8007698:	461a      	mov	r2, r3
 800769a:	4623      	mov	r3, r4
 800769c:	80fb      	strh	r3, [r7, #6]
 800769e:	4603      	mov	r3, r0
 80076a0:	80bb      	strh	r3, [r7, #4]
 80076a2:	460b      	mov	r3, r1
 80076a4:	70fb      	strb	r3, [r7, #3]
 80076a6:	4613      	mov	r3, r2
 80076a8:	70bb      	strb	r3, [r7, #2]
	MouseReport report;
	report.x = x;
 80076aa:	88fb      	ldrh	r3, [r7, #6]
 80076ac:	817b      	strh	r3, [r7, #10]
	report.y = y;
 80076ae:	88bb      	ldrh	r3, [r7, #4]
 80076b0:	81bb      	strh	r3, [r7, #12]
	report.left_click = left_click;
 80076b2:	78fb      	ldrb	r3, [r7, #3]
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	7a7b      	ldrb	r3, [r7, #9]
 80076bc:	f362 0300 	bfi	r3, r2, #0, #1
 80076c0:	727b      	strb	r3, [r7, #9]
	report.right_click = right_click;
 80076c2:	78bb      	ldrb	r3, [r7, #2]
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	7a7b      	ldrb	r3, [r7, #9]
 80076cc:	f362 0341 	bfi	r3, r2, #1, #1
 80076d0:	727b      	strb	r3, [r7, #9]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *) &report, sizeof (report));
 80076d2:	f107 0308 	add.w	r3, r7, #8
 80076d6:	2206      	movs	r2, #6
 80076d8:	4619      	mov	r1, r3
 80076da:	4803      	ldr	r0, [pc, #12]	@ (80076e8 <tp_send_mouse_report+0x5c>)
 80076dc:	f7fe fa16 	bl	8005b0c <USBD_CUSTOM_HID_SendReport>
}
 80076e0:	bf00      	nop
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd90      	pop	{r4, r7, pc}
 80076e8:	200003e4 	.word	0x200003e4

080076ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80076f0:	2200      	movs	r2, #0
 80076f2:	4912      	ldr	r1, [pc, #72]	@ (800773c <MX_USB_DEVICE_Init+0x50>)
 80076f4:	4812      	ldr	r0, [pc, #72]	@ (8007740 <MX_USB_DEVICE_Init+0x54>)
 80076f6:	f7fe fb91 	bl	8005e1c <USBD_Init>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007700:	f7f9 f904 	bl	800090c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007704:	490f      	ldr	r1, [pc, #60]	@ (8007744 <MX_USB_DEVICE_Init+0x58>)
 8007706:	480e      	ldr	r0, [pc, #56]	@ (8007740 <MX_USB_DEVICE_Init+0x54>)
 8007708:	f7fe fbb8 	bl	8005e7c <USBD_RegisterClass>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007712:	f7f9 f8fb 	bl	800090c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007716:	490c      	ldr	r1, [pc, #48]	@ (8007748 <MX_USB_DEVICE_Init+0x5c>)
 8007718:	4809      	ldr	r0, [pc, #36]	@ (8007740 <MX_USB_DEVICE_Init+0x54>)
 800771a:	f7fe fb65 	bl	8005de8 <USBD_CUSTOM_HID_RegisterInterface>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007724:	f7f9 f8f2 	bl	800090c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007728:	4805      	ldr	r0, [pc, #20]	@ (8007740 <MX_USB_DEVICE_Init+0x54>)
 800772a:	f7fe fbdd 	bl	8005ee8 <USBD_Start>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007734:	f7f9 f8ea 	bl	800090c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007738:	bf00      	nop
 800773a:	bd80      	pop	{r7, pc}
 800773c:	200002b0 	.word	0x200002b0
 8007740:	200003e4 	.word	0x200003e4
 8007744:	2000000c 	.word	0x2000000c
 8007748:	200002a0 	.word	0x200002a0

0800774c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800774c:	b480      	push	{r7}
 800774e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007750:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007752:	4618      	mov	r0, r3
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800775c:	b480      	push	{r7}
 800775e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007760:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007762:	4618      	mov	r0, r3
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t report_ID, uint8_t data)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	4603      	mov	r3, r0
 8007774:	460a      	mov	r2, r1
 8007776:	71fb      	strb	r3, [r7, #7]
 8007778:	4613      	mov	r3, r2
 800777a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */

	/*
	 * Receive feature reports from host
	 */
	if (report_ID == REPORTID_INPUT_MODE)
 800777c:	79fb      	ldrb	r3, [r7, #7]
 800777e:	2b04      	cmp	r3, #4
 8007780:	d103      	bne.n	800778a <CUSTOM_HID_OutEvent_FS+0x1e>
	{
		touchpadConfiguration.input_mode = data;
 8007782:	4a10      	ldr	r2, [pc, #64]	@ (80077c4 <CUSTOM_HID_OutEvent_FS+0x58>)
 8007784:	79bb      	ldrb	r3, [r7, #6]
 8007786:	7013      	strb	r3, [r2, #0]
 8007788:	e00d      	b.n	80077a6 <CUSTOM_HID_OutEvent_FS+0x3a>
	}
	else if (report_ID == REPORTID_FUNCTION_SWITCH)
 800778a:	79fb      	ldrb	r3, [r7, #7]
 800778c:	2b05      	cmp	r3, #5
 800778e:	d10a      	bne.n	80077a6 <CUSTOM_HID_OutEvent_FS+0x3a>
	{
		touchpadConfiguration.surface_switch = data & 0b00000001;
 8007790:	79bb      	ldrb	r3, [r7, #6]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	b2da      	uxtb	r2, r3
 8007798:	4b0a      	ldr	r3, [pc, #40]	@ (80077c4 <CUSTOM_HID_OutEvent_FS+0x58>)
 800779a:	705a      	strb	r2, [r3, #1]
		touchpadConfiguration.button_switch = data >> 1;
 800779c:	79bb      	ldrb	r3, [r7, #6]
 800779e:	085b      	lsrs	r3, r3, #1
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	4b08      	ldr	r3, [pc, #32]	@ (80077c4 <CUSTOM_HID_OutEvent_FS+0x58>)
 80077a4:	709a      	strb	r2, [r3, #2]
	}

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 80077a6:	4808      	ldr	r0, [pc, #32]	@ (80077c8 <CUSTOM_HID_OutEvent_FS+0x5c>)
 80077a8:	f7fe fabc 	bl	8005d24 <USBD_CUSTOM_HID_ReceivePacket>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <CUSTOM_HID_OutEvent_FS+0x4c>
  {
    return -1;
 80077b2:	f04f 33ff 	mov.w	r3, #4294967295
 80077b6:	e000      	b.n	80077ba <CUSTOM_HID_OutEvent_FS+0x4e>
  }

  return (USBD_OK);
 80077b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	200006c0 	.word	0x200006c0
 80077c8:	200003e4 	.word	0x200003e4

080077cc <get_touchpad_configuration>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */


TouchpadConfiguration get_touchpad_configuration(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
	return touchpadConfiguration;
 80077d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007804 <get_touchpad_configuration+0x38>)
 80077d4:	1d3b      	adds	r3, r7, #4
 80077d6:	6812      	ldr	r2, [r2, #0]
 80077d8:	4611      	mov	r1, r2
 80077da:	8019      	strh	r1, [r3, #0]
 80077dc:	3302      	adds	r3, #2
 80077de:	0c12      	lsrs	r2, r2, #16
 80077e0:	701a      	strb	r2, [r3, #0]
 80077e2:	2300      	movs	r3, #0
 80077e4:	793a      	ldrb	r2, [r7, #4]
 80077e6:	f362 0307 	bfi	r3, r2, #0, #8
 80077ea:	797a      	ldrb	r2, [r7, #5]
 80077ec:	f362 230f 	bfi	r3, r2, #8, #8
 80077f0:	79ba      	ldrb	r2, [r7, #6]
 80077f2:	f362 4317 	bfi	r3, r2, #16, #8
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	200006c0 	.word	0x200006c0

08007808 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	4603      	mov	r3, r0
 8007810:	6039      	str	r1, [r7, #0]
 8007812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2212      	movs	r2, #18
 8007818:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800781a:	4b03      	ldr	r3, [pc, #12]	@ (8007828 <USBD_FS_DeviceDescriptor+0x20>)
}
 800781c:	4618      	mov	r0, r3
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	200002d0 	.word	0x200002d0

0800782c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	4603      	mov	r3, r0
 8007834:	6039      	str	r1, [r7, #0]
 8007836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2204      	movs	r2, #4
 800783c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800783e:	4b03      	ldr	r3, [pc, #12]	@ (800784c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007840:	4618      	mov	r0, r3
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	200002f0 	.word	0x200002f0

08007850 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	4603      	mov	r3, r0
 8007858:	6039      	str	r1, [r7, #0]
 800785a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800785c:	79fb      	ldrb	r3, [r7, #7]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d105      	bne.n	800786e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	4907      	ldr	r1, [pc, #28]	@ (8007884 <USBD_FS_ProductStrDescriptor+0x34>)
 8007866:	4808      	ldr	r0, [pc, #32]	@ (8007888 <USBD_FS_ProductStrDescriptor+0x38>)
 8007868:	f7ff fd18 	bl	800729c <USBD_GetString>
 800786c:	e004      	b.n	8007878 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	4904      	ldr	r1, [pc, #16]	@ (8007884 <USBD_FS_ProductStrDescriptor+0x34>)
 8007872:	4805      	ldr	r0, [pc, #20]	@ (8007888 <USBD_FS_ProductStrDescriptor+0x38>)
 8007874:	f7ff fd12 	bl	800729c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007878:	4b02      	ldr	r3, [pc, #8]	@ (8007884 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	200006c4 	.word	0x200006c4
 8007888:	08008188 	.word	0x08008188

0800788c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	4603      	mov	r3, r0
 8007894:	6039      	str	r1, [r7, #0]
 8007896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	4904      	ldr	r1, [pc, #16]	@ (80078ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800789c:	4804      	ldr	r0, [pc, #16]	@ (80078b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800789e:	f7ff fcfd 	bl	800729c <USBD_GetString>
  return USBD_StrDesc;
 80078a2:	4b02      	ldr	r3, [pc, #8]	@ (80078ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	200006c4 	.word	0x200006c4
 80078b0:	080081a8 	.word	0x080081a8

080078b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	4603      	mov	r3, r0
 80078bc:	6039      	str	r1, [r7, #0]
 80078be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	221a      	movs	r2, #26
 80078c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80078c6:	f000 f855 	bl	8007974 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80078ca:	4b02      	ldr	r3, [pc, #8]	@ (80078d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	200002f4 	.word	0x200002f4

080078d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4603      	mov	r3, r0
 80078e0:	6039      	str	r1, [r7, #0]
 80078e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80078e4:	79fb      	ldrb	r3, [r7, #7]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d105      	bne.n	80078f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	4907      	ldr	r1, [pc, #28]	@ (800790c <USBD_FS_ConfigStrDescriptor+0x34>)
 80078ee:	4808      	ldr	r0, [pc, #32]	@ (8007910 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078f0:	f7ff fcd4 	bl	800729c <USBD_GetString>
 80078f4:	e004      	b.n	8007900 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	4904      	ldr	r1, [pc, #16]	@ (800790c <USBD_FS_ConfigStrDescriptor+0x34>)
 80078fa:	4805      	ldr	r0, [pc, #20]	@ (8007910 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078fc:	f7ff fcce 	bl	800729c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007900:	4b02      	ldr	r3, [pc, #8]	@ (800790c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	200006c4 	.word	0x200006c4
 8007910:	080081bc 	.word	0x080081bc

08007914 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	6039      	str	r1, [r7, #0]
 800791e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007920:	79fb      	ldrb	r3, [r7, #7]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d105      	bne.n	8007932 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	4907      	ldr	r1, [pc, #28]	@ (8007948 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800792a:	4808      	ldr	r0, [pc, #32]	@ (800794c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800792c:	f7ff fcb6 	bl	800729c <USBD_GetString>
 8007930:	e004      	b.n	800793c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	4904      	ldr	r1, [pc, #16]	@ (8007948 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007936:	4805      	ldr	r0, [pc, #20]	@ (800794c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007938:	f7ff fcb0 	bl	800729c <USBD_GetString>
  }
  return USBD_StrDesc;
 800793c:	4b02      	ldr	r3, [pc, #8]	@ (8007948 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800793e:	4618      	mov	r0, r3
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	200006c4 	.word	0x200006c4
 800794c:	080081d0 	.word	0x080081d0

08007950 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	4603      	mov	r3, r0
 8007958:	6039      	str	r1, [r7, #0]
 800795a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	220c      	movs	r2, #12
 8007960:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007962:	4b03      	ldr	r3, [pc, #12]	@ (8007970 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	200002e4 	.word	0x200002e4

08007974 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800797a:	4b0f      	ldr	r3, [pc, #60]	@ (80079b8 <Get_SerialNum+0x44>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007980:	4b0e      	ldr	r3, [pc, #56]	@ (80079bc <Get_SerialNum+0x48>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007986:	4b0e      	ldr	r3, [pc, #56]	@ (80079c0 <Get_SerialNum+0x4c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4413      	add	r3, r2
 8007992:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d009      	beq.n	80079ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800799a:	2208      	movs	r2, #8
 800799c:	4909      	ldr	r1, [pc, #36]	@ (80079c4 <Get_SerialNum+0x50>)
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 f814 	bl	80079cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079a4:	2204      	movs	r2, #4
 80079a6:	4908      	ldr	r1, [pc, #32]	@ (80079c8 <Get_SerialNum+0x54>)
 80079a8:	68b8      	ldr	r0, [r7, #8]
 80079aa:	f000 f80f 	bl	80079cc <IntToUnicode>
  }
}
 80079ae:	bf00      	nop
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	1fff7a10 	.word	0x1fff7a10
 80079bc:	1fff7a14 	.word	0x1fff7a14
 80079c0:	1fff7a18 	.word	0x1fff7a18
 80079c4:	200002f6 	.word	0x200002f6
 80079c8:	20000306 	.word	0x20000306

080079cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	4613      	mov	r3, r2
 80079d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80079da:	2300      	movs	r3, #0
 80079dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80079de:	2300      	movs	r3, #0
 80079e0:	75fb      	strb	r3, [r7, #23]
 80079e2:	e027      	b.n	8007a34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	0f1b      	lsrs	r3, r3, #28
 80079e8:	2b09      	cmp	r3, #9
 80079ea:	d80b      	bhi.n	8007a04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	0f1b      	lsrs	r3, r3, #28
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	4619      	mov	r1, r3
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	440b      	add	r3, r1
 80079fc:	3230      	adds	r2, #48	@ 0x30
 80079fe:	b2d2      	uxtb	r2, r2
 8007a00:	701a      	strb	r2, [r3, #0]
 8007a02:	e00a      	b.n	8007a1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	0f1b      	lsrs	r3, r3, #28
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	4619      	mov	r1, r3
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	440b      	add	r3, r1
 8007a14:	3237      	adds	r2, #55	@ 0x37
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	011b      	lsls	r3, r3, #4
 8007a1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	3301      	adds	r3, #1
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	4413      	add	r3, r2
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a2e:	7dfb      	ldrb	r3, [r7, #23]
 8007a30:	3301      	adds	r3, #1
 8007a32:	75fb      	strb	r3, [r7, #23]
 8007a34:	7dfa      	ldrb	r2, [r7, #23]
 8007a36:	79fb      	ldrb	r3, [r7, #7]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d3d3      	bcc.n	80079e4 <IntToUnicode+0x18>
  }
}
 8007a3c:	bf00      	nop
 8007a3e:	bf00      	nop
 8007a40:	371c      	adds	r7, #28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
	...

08007a4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b0a0      	sub	sp, #128	@ 0x80
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a54:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	605a      	str	r2, [r3, #4]
 8007a5e:	609a      	str	r2, [r3, #8]
 8007a60:	60da      	str	r2, [r3, #12]
 8007a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007a64:	f107 0310 	add.w	r3, r7, #16
 8007a68:	225c      	movs	r2, #92	@ 0x5c
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 fb53 	bl	8008118 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a7a:	d149      	bne.n	8007b10 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007a7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a80:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007a82:	2300      	movs	r3, #0
 8007a84:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007a86:	f107 0310 	add.w	r3, r7, #16
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fb f99e 	bl	8002dcc <HAL_RCCEx_PeriphCLKConfig>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8007a96:	f7f8 ff39 	bl	800090c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60fb      	str	r3, [r7, #12]
 8007a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8007b18 <HAL_PCD_MspInit+0xcc>)
 8007aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8007b18 <HAL_PCD_MspInit+0xcc>)
 8007aa4:	f043 0301 	orr.w	r3, r3, #1
 8007aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8007b18 <HAL_PCD_MspInit+0xcc>)
 8007aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ab6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007aba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007abc:	2302      	movs	r3, #2
 8007abe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ac8:	230a      	movs	r3, #10
 8007aca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007acc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	4812      	ldr	r0, [pc, #72]	@ (8007b1c <HAL_PCD_MspInit+0xd0>)
 8007ad4:	f7f9 fc3e 	bl	8001354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8007b18 <HAL_PCD_MspInit+0xcc>)
 8007ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007adc:	4a0e      	ldr	r2, [pc, #56]	@ (8007b18 <HAL_PCD_MspInit+0xcc>)
 8007ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ae2:	6353      	str	r3, [r2, #52]	@ 0x34
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	60bb      	str	r3, [r7, #8]
 8007ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8007b18 <HAL_PCD_MspInit+0xcc>)
 8007aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aec:	4a0a      	ldr	r2, [pc, #40]	@ (8007b18 <HAL_PCD_MspInit+0xcc>)
 8007aee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007af2:	6453      	str	r3, [r2, #68]	@ 0x44
 8007af4:	4b08      	ldr	r3, [pc, #32]	@ (8007b18 <HAL_PCD_MspInit+0xcc>)
 8007af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007afc:	60bb      	str	r3, [r7, #8]
 8007afe:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b00:	2200      	movs	r2, #0
 8007b02:	2100      	movs	r1, #0
 8007b04:	2043      	movs	r0, #67	@ 0x43
 8007b06:	f7f9 fbee 	bl	80012e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b0a:	2043      	movs	r0, #67	@ 0x43
 8007b0c:	f7f9 fc07 	bl	800131e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b10:	bf00      	nop
 8007b12:	3780      	adds	r7, #128	@ 0x80
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	40023800 	.word	0x40023800
 8007b1c:	40020000 	.word	0x40020000

08007b20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b34:	4619      	mov	r1, r3
 8007b36:	4610      	mov	r0, r2
 8007b38:	f7fe fa23 	bl	8005f82 <USBD_LL_SetupStage>
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007b56:	78fa      	ldrb	r2, [r7, #3]
 8007b58:	6879      	ldr	r1, [r7, #4]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	00db      	lsls	r3, r3, #3
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	78fb      	ldrb	r3, [r7, #3]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	f7fe fa5d 	bl	800602c <USBD_LL_DataOutStage>
}
 8007b72:	bf00      	nop
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b082      	sub	sp, #8
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007b8c:	78fa      	ldrb	r2, [r7, #3]
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	4613      	mov	r3, r2
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	4413      	add	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	440b      	add	r3, r1
 8007b9a:	3320      	adds	r3, #32
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	78fb      	ldrb	r3, [r7, #3]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	f7fe faf6 	bl	8006192 <USBD_LL_DataInStage>
}
 8007ba6:	bf00      	nop
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fe fc30 	bl	8006422 <USBD_LL_SOF>
}
 8007bc2:	bf00      	nop
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b084      	sub	sp, #16
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	79db      	ldrb	r3, [r3, #7]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d102      	bne.n	8007be4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]
 8007be2:	e008      	b.n	8007bf6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	79db      	ldrb	r3, [r3, #7]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d102      	bne.n	8007bf2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007bec:	2301      	movs	r3, #1
 8007bee:	73fb      	strb	r3, [r7, #15]
 8007bf0:	e001      	b.n	8007bf6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007bf2:	f7f8 fe8b 	bl	800090c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007bfc:	7bfa      	ldrb	r2, [r7, #15]
 8007bfe:	4611      	mov	r1, r2
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fe fbca 	bl	800639a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fe fb72 	bl	80062f6 <USBD_LL_Reset>
}
 8007c12:	bf00      	nop
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe fbc5 	bl	80063ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	6812      	ldr	r2, [r2, #0]
 8007c3e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c42:	f043 0301 	orr.w	r3, r3, #1
 8007c46:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	7adb      	ldrb	r3, [r3, #11]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c50:	4b04      	ldr	r3, [pc, #16]	@ (8007c64 <HAL_PCD_SuspendCallback+0x48>)
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	4a03      	ldr	r2, [pc, #12]	@ (8007c64 <HAL_PCD_SuspendCallback+0x48>)
 8007c56:	f043 0306 	orr.w	r3, r3, #6
 8007c5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c5c:	bf00      	nop
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	e000ed00 	.word	0xe000ed00

08007c68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe fbbb 	bl	80063f2 <USBD_LL_Resume>
}
 8007c7c:	bf00      	nop
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c96:	78fa      	ldrb	r2, [r7, #3]
 8007c98:	4611      	mov	r1, r2
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe fc13 	bl	80064c6 <USBD_LL_IsoOUTIncomplete>
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cba:	78fa      	ldrb	r2, [r7, #3]
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fe fbcf 	bl	8006462 <USBD_LL_IsoINIncomplete>
}
 8007cc4:	bf00      	nop
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fe fc25 	bl	800652a <USBD_LL_DevConnected>
}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe fc22 	bl	8006540 <USBD_LL_DevDisconnected>
}
 8007cfc:	bf00      	nop
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d13c      	bne.n	8007d8e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d14:	4a20      	ldr	r2, [pc, #128]	@ (8007d98 <USBD_LL_Init+0x94>)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8007d98 <USBD_LL_Init+0x94>)
 8007d20:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d24:	4b1c      	ldr	r3, [pc, #112]	@ (8007d98 <USBD_LL_Init+0x94>)
 8007d26:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007d2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8007d98 <USBD_LL_Init+0x94>)
 8007d2e:	2206      	movs	r2, #6
 8007d30:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d32:	4b19      	ldr	r3, [pc, #100]	@ (8007d98 <USBD_LL_Init+0x94>)
 8007d34:	2202      	movs	r2, #2
 8007d36:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d38:	4b17      	ldr	r3, [pc, #92]	@ (8007d98 <USBD_LL_Init+0x94>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d3e:	4b16      	ldr	r3, [pc, #88]	@ (8007d98 <USBD_LL_Init+0x94>)
 8007d40:	2202      	movs	r2, #2
 8007d42:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d44:	4b14      	ldr	r3, [pc, #80]	@ (8007d98 <USBD_LL_Init+0x94>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d4a:	4b13      	ldr	r3, [pc, #76]	@ (8007d98 <USBD_LL_Init+0x94>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d50:	4b11      	ldr	r3, [pc, #68]	@ (8007d98 <USBD_LL_Init+0x94>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d56:	4b10      	ldr	r3, [pc, #64]	@ (8007d98 <USBD_LL_Init+0x94>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8007d98 <USBD_LL_Init+0x94>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d62:	480d      	ldr	r0, [pc, #52]	@ (8007d98 <USBD_LL_Init+0x94>)
 8007d64:	f7f9 fcbb 	bl	80016de <HAL_PCD_Init>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d6e:	f7f8 fdcd 	bl	800090c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d72:	2180      	movs	r1, #128	@ 0x80
 8007d74:	4808      	ldr	r0, [pc, #32]	@ (8007d98 <USBD_LL_Init+0x94>)
 8007d76:	f7fa ff02 	bl	8002b7e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d7a:	2240      	movs	r2, #64	@ 0x40
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	4806      	ldr	r0, [pc, #24]	@ (8007d98 <USBD_LL_Init+0x94>)
 8007d80:	f7fa feb6 	bl	8002af0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d84:	2280      	movs	r2, #128	@ 0x80
 8007d86:	2101      	movs	r1, #1
 8007d88:	4803      	ldr	r0, [pc, #12]	@ (8007d98 <USBD_LL_Init+0x94>)
 8007d8a:	f7fa feb1 	bl	8002af0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	200008c4 	.word	0x200008c4

08007d9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7f9 fda9 	bl	800190a <HAL_PCD_Start>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 f97e 	bl	80080c0 <USBD_Get_USB_Status>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	4608      	mov	r0, r1
 8007ddc:	4611      	mov	r1, r2
 8007dde:	461a      	mov	r2, r3
 8007de0:	4603      	mov	r3, r0
 8007de2:	70fb      	strb	r3, [r7, #3]
 8007de4:	460b      	mov	r3, r1
 8007de6:	70bb      	strb	r3, [r7, #2]
 8007de8:	4613      	mov	r3, r2
 8007dea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007dfa:	78bb      	ldrb	r3, [r7, #2]
 8007dfc:	883a      	ldrh	r2, [r7, #0]
 8007dfe:	78f9      	ldrb	r1, [r7, #3]
 8007e00:	f7fa faaa 	bl	8002358 <HAL_PCD_EP_Open>
 8007e04:	4603      	mov	r3, r0
 8007e06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 f958 	bl	80080c0 <USBD_Get_USB_Status>
 8007e10:	4603      	mov	r3, r0
 8007e12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	460b      	mov	r3, r1
 8007e28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e38:	78fa      	ldrb	r2, [r7, #3]
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fa faf3 	bl	8002428 <HAL_PCD_EP_Close>
 8007e42:	4603      	mov	r3, r0
 8007e44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 f939 	bl	80080c0 <USBD_Get_USB_Status>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e76:	78fa      	ldrb	r2, [r7, #3]
 8007e78:	4611      	mov	r1, r2
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fa fb93 	bl	80025a6 <HAL_PCD_EP_SetStall>
 8007e80:	4603      	mov	r3, r0
 8007e82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 f91a 	bl	80080c0 <USBD_Get_USB_Status>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b084      	sub	sp, #16
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007eb4:	78fa      	ldrb	r2, [r7, #3]
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fa fbd7 	bl	800266c <HAL_PCD_EP_ClrStall>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 f8fb 	bl	80080c0 <USBD_Get_USB_Status>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007eea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	da0b      	bge.n	8007f0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ef4:	78fb      	ldrb	r3, [r7, #3]
 8007ef6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007efa:	68f9      	ldr	r1, [r7, #12]
 8007efc:	4613      	mov	r3, r2
 8007efe:	00db      	lsls	r3, r3, #3
 8007f00:	4413      	add	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	440b      	add	r3, r1
 8007f06:	3316      	adds	r3, #22
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	e00b      	b.n	8007f24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f12:	68f9      	ldr	r1, [r7, #12]
 8007f14:	4613      	mov	r3, r2
 8007f16:	00db      	lsls	r3, r3, #3
 8007f18:	4413      	add	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007f22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f4a:	78fa      	ldrb	r2, [r7, #3]
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fa f9de 	bl	8002310 <HAL_PCD_SetAddress>
 8007f54:	4603      	mov	r3, r0
 8007f56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 f8b0 	bl	80080c0 <USBD_Get_USB_Status>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b086      	sub	sp, #24
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	60f8      	str	r0, [r7, #12]
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007f8c:	7af9      	ldrb	r1, [r7, #11]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	f7fa face 	bl	8002532 <HAL_PCD_EP_Transmit>
 8007f96:	4603      	mov	r3, r0
 8007f98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 f88f 	bl	80080c0 <USBD_Get_USB_Status>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fa6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3718      	adds	r7, #24
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	607a      	str	r2, [r7, #4]
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007fce:	7af9      	ldrb	r1, [r7, #11]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	f7fa fa72 	bl	80024bc <HAL_PCD_EP_Receive>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fdc:	7dfb      	ldrb	r3, [r7, #23]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 f86e 	bl	80080c0 <USBD_Get_USB_Status>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fe8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <HAL_PCDEx_LPM_Callback+0x18>
 8008006:	2b01      	cmp	r3, #1
 8008008:	d01f      	beq.n	800804a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800800a:	e03b      	b.n	8008084 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	7adb      	ldrb	r3, [r3, #11]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d007      	beq.n	8008024 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008014:	f7f8 fab4 	bl	8000580 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008018:	4b1c      	ldr	r3, [pc, #112]	@ (800808c <HAL_PCDEx_LPM_Callback+0x98>)
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	4a1b      	ldr	r2, [pc, #108]	@ (800808c <HAL_PCDEx_LPM_Callback+0x98>)
 800801e:	f023 0306 	bic.w	r3, r3, #6
 8008022:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	6812      	ldr	r2, [r2, #0]
 8008032:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008036:	f023 0301 	bic.w	r3, r3, #1
 800803a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008042:	4618      	mov	r0, r3
 8008044:	f7fe f9d5 	bl	80063f2 <USBD_LL_Resume>
    break;
 8008048:	e01c      	b.n	8008084 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	6812      	ldr	r2, [r2, #0]
 8008058:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800805c:	f043 0301 	orr.w	r3, r3, #1
 8008060:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008068:	4618      	mov	r0, r3
 800806a:	f7fe f9a6 	bl	80063ba <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	7adb      	ldrb	r3, [r3, #11]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d005      	beq.n	8008082 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008076:	4b05      	ldr	r3, [pc, #20]	@ (800808c <HAL_PCDEx_LPM_Callback+0x98>)
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	4a04      	ldr	r2, [pc, #16]	@ (800808c <HAL_PCDEx_LPM_Callback+0x98>)
 800807c:	f043 0306 	orr.w	r3, r3, #6
 8008080:	6113      	str	r3, [r2, #16]
    break;
 8008082:	bf00      	nop
}
 8008084:	bf00      	nop
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	e000ed00 	.word	0xe000ed00

08008090 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008098:	4b03      	ldr	r3, [pc, #12]	@ (80080a8 <USBD_static_malloc+0x18>)
}
 800809a:	4618      	mov	r0, r3
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	20000da8 	.word	0x20000da8

080080ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]

}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	d817      	bhi.n	8008104 <USBD_Get_USB_Status+0x44>
 80080d4:	a201      	add	r2, pc, #4	@ (adr r2, 80080dc <USBD_Get_USB_Status+0x1c>)
 80080d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080da:	bf00      	nop
 80080dc:	080080ed 	.word	0x080080ed
 80080e0:	080080f3 	.word	0x080080f3
 80080e4:	080080f9 	.word	0x080080f9
 80080e8:	080080ff 	.word	0x080080ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	73fb      	strb	r3, [r7, #15]
    break;
 80080f0:	e00b      	b.n	800810a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080f2:	2303      	movs	r3, #3
 80080f4:	73fb      	strb	r3, [r7, #15]
    break;
 80080f6:	e008      	b.n	800810a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080f8:	2301      	movs	r3, #1
 80080fa:	73fb      	strb	r3, [r7, #15]
    break;
 80080fc:	e005      	b.n	800810a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080fe:	2303      	movs	r3, #3
 8008100:	73fb      	strb	r3, [r7, #15]
    break;
 8008102:	e002      	b.n	800810a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008104:	2303      	movs	r3, #3
 8008106:	73fb      	strb	r3, [r7, #15]
    break;
 8008108:	bf00      	nop
  }
  return usb_status;
 800810a:	7bfb      	ldrb	r3, [r7, #15]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <memset>:
 8008118:	4402      	add	r2, r0
 800811a:	4603      	mov	r3, r0
 800811c:	4293      	cmp	r3, r2
 800811e:	d100      	bne.n	8008122 <memset+0xa>
 8008120:	4770      	bx	lr
 8008122:	f803 1b01 	strb.w	r1, [r3], #1
 8008126:	e7f9      	b.n	800811c <memset+0x4>

08008128 <__libc_init_array>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	4d0d      	ldr	r5, [pc, #52]	@ (8008160 <__libc_init_array+0x38>)
 800812c:	4c0d      	ldr	r4, [pc, #52]	@ (8008164 <__libc_init_array+0x3c>)
 800812e:	1b64      	subs	r4, r4, r5
 8008130:	10a4      	asrs	r4, r4, #2
 8008132:	2600      	movs	r6, #0
 8008134:	42a6      	cmp	r6, r4
 8008136:	d109      	bne.n	800814c <__libc_init_array+0x24>
 8008138:	4d0b      	ldr	r5, [pc, #44]	@ (8008168 <__libc_init_array+0x40>)
 800813a:	4c0c      	ldr	r4, [pc, #48]	@ (800816c <__libc_init_array+0x44>)
 800813c:	f000 f818 	bl	8008170 <_init>
 8008140:	1b64      	subs	r4, r4, r5
 8008142:	10a4      	asrs	r4, r4, #2
 8008144:	2600      	movs	r6, #0
 8008146:	42a6      	cmp	r6, r4
 8008148:	d105      	bne.n	8008156 <__libc_init_array+0x2e>
 800814a:	bd70      	pop	{r4, r5, r6, pc}
 800814c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008150:	4798      	blx	r3
 8008152:	3601      	adds	r6, #1
 8008154:	e7ee      	b.n	8008134 <__libc_init_array+0xc>
 8008156:	f855 3b04 	ldr.w	r3, [r5], #4
 800815a:	4798      	blx	r3
 800815c:	3601      	adds	r6, #1
 800815e:	e7f2      	b.n	8008146 <__libc_init_array+0x1e>
 8008160:	08008304 	.word	0x08008304
 8008164:	08008304 	.word	0x08008304
 8008168:	08008304 	.word	0x08008304
 800816c:	08008308 	.word	0x08008308

08008170 <_init>:
 8008170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008172:	bf00      	nop
 8008174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008176:	bc08      	pop	{r3}
 8008178:	469e      	mov	lr, r3
 800817a:	4770      	bx	lr

0800817c <_fini>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	bf00      	nop
 8008180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008182:	bc08      	pop	{r3}
 8008184:	469e      	mov	lr, r3
 8008186:	4770      	bx	lr
