
stm32-usb-touchpad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007590  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08007754  08007754  00008754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078c8  080078c8  000091fc  2**0
                  CONTENTS
  4 .ARM          00000008  080078c8  080078c8  000088c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078d0  080078d0  000091fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078d0  080078d0  000088d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078d4  080078d4  000088d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  080078d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a04  200001fc  08007ad4  000091fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c00  08007ad4  00009c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dee8  00000000  00000000  0000922c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bbf  00000000  00000000  00017114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00019cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008aa  00000000  00000000  0001a898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023548  00000000  00000000  0001b142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109e3  00000000  00000000  0003e68a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9cea  00000000  00000000  0004f06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118d57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ec4  00000000  00000000  00118d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0011bc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001fc 	.word	0x200001fc
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800773c 	.word	0x0800773c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000200 	.word	0x20000200
 8000200:	0800773c 	.word	0x0800773c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 f9b7 	bl	800086c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f837 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8a1 	bl	8000648 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000506:	f006 fbc9 	bl	8006c9c <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	touchpadConfiguration = get_touchpad_configuration();
 800050a:	f006 fc37 	bl	8006d7c <get_touchpad_configuration>
 800050e:	4603      	mov	r3, r0
 8000510:	461a      	mov	r2, r3
 8000512:	703a      	strb	r2, [r7, #0]
 8000514:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000518:	707a      	strb	r2, [r7, #1]
 800051a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800051e:	70bb      	strb	r3, [r7, #2]

			if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8000520:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000524:	4810      	ldr	r0, [pc, #64]	@ (8000568 <main+0x74>)
 8000526:	f000 fcdd 	bl	8000ee4 <HAL_GPIO_ReadPin>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d002      	beq.n	8000536 <main+0x42>
			{
				user_button_pressed = 1;
 8000530:	2301      	movs	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	e7e9      	b.n	800050a <main+0x16>
			}
			else if (user_button_pressed)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0e6      	beq.n	800050a <main+0x16>
			{
				HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2101      	movs	r1, #1
 8000540:	480a      	ldr	r0, [pc, #40]	@ (800056c <main+0x78>)
 8000542:	f000 fce7 	bl	8000f14 <HAL_GPIO_WritePin>
				HAL_Delay(250);
 8000546:	20fa      	movs	r0, #250	@ 0xfa
 8000548:	f000 fa02 	bl	8000950 <HAL_Delay>
				HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2101      	movs	r1, #1
 8000550:	4806      	ldr	r0, [pc, #24]	@ (800056c <main+0x78>)
 8000552:	f000 fcdf 	bl	8000f14 <HAL_GPIO_WritePin>
				user_button_pressed = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]

				input_test();
 800055a:	f006 fb89 	bl	8006c70 <input_test>

				HAL_Delay(250);
 800055e:	20fa      	movs	r0, #250	@ 0xfa
 8000560:	f000 f9f6 	bl	8000950 <HAL_Delay>
  	touchpadConfiguration = get_touchpad_configuration();
 8000564:	e7d1      	b.n	800050a <main+0x16>
 8000566:	bf00      	nop
 8000568:	40020800 	.word	0x40020800
 800056c:	40020400 	.word	0x40020400

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	@ 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2234      	movs	r2, #52	@ 0x34
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f007 f8a2 	bl	80076c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b29      	ldr	r3, [pc, #164]	@ (8000640 <SystemClock_Config+0xd0>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059c:	4a28      	ldr	r2, [pc, #160]	@ (8000640 <SystemClock_Config+0xd0>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a4:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <SystemClock_Config+0xd0>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	2300      	movs	r3, #0
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <SystemClock_Config+0xd4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a22      	ldr	r2, [pc, #136]	@ (8000644 <SystemClock_Config+0xd4>)
 80005ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b20      	ldr	r3, [pc, #128]	@ (8000644 <SystemClock_Config+0xd4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005e4:	23a8      	movs	r3, #168	@ 0xa8
 80005e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ec:	2307      	movs	r3, #7
 80005ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 fd75 	bl	80030e8 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000604:	f000 f88e 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2302      	movs	r3, #2
 800060e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000614:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000618:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	2105      	movs	r1, #5
 8000626:	4618      	mov	r0, r3
 8000628:	f001 ff12 	bl	8002450 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000632:	f000 f877 	bl	8000724 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	@ 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	4b2d      	ldr	r3, [pc, #180]	@ (8000718 <MX_GPIO_Init+0xd0>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a2c      	ldr	r2, [pc, #176]	@ (8000718 <MX_GPIO_Init+0xd0>)
 8000668:	f043 0304 	orr.w	r3, r3, #4
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b2a      	ldr	r3, [pc, #168]	@ (8000718 <MX_GPIO_Init+0xd0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0304 	and.w	r3, r3, #4
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	4b26      	ldr	r3, [pc, #152]	@ (8000718 <MX_GPIO_Init+0xd0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a25      	ldr	r2, [pc, #148]	@ (8000718 <MX_GPIO_Init+0xd0>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <MX_GPIO_Init+0xd0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <MX_GPIO_Init+0xd0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a1e      	ldr	r2, [pc, #120]	@ (8000718 <MX_GPIO_Init+0xd0>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <MX_GPIO_Init+0xd0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_GPIO_Init+0xd0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a17      	ldr	r2, [pc, #92]	@ (8000718 <MX_GPIO_Init+0xd0>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_GPIO_Init+0xd0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2101      	movs	r1, #1
 80006d2:	4812      	ldr	r0, [pc, #72]	@ (800071c <MX_GPIO_Init+0xd4>)
 80006d4:	f000 fc1e 	bl	8000f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80006d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	480c      	ldr	r0, [pc, #48]	@ (8000720 <MX_GPIO_Init+0xd8>)
 80006f0:	f000 fa64 	bl	8000bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80006f4:	2301      	movs	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	4804      	ldr	r0, [pc, #16]	@ (800071c <MX_GPIO_Init+0xd4>)
 800070c:	f000 fa56 	bl	8000bbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	@ 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40020400 	.word	0x40020400
 8000720:	40020800 	.word	0x40020800

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <Error_Handler+0x8>

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <HAL_MspInit+0x4c>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800073e:	4a0f      	ldr	r2, [pc, #60]	@ (800077c <HAL_MspInit+0x4c>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6453      	str	r3, [r2, #68]	@ 0x44
 8000746:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <HAL_MspInit+0x4c>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800074a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <HAL_MspInit+0x4c>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075a:	4a08      	ldr	r2, [pc, #32]	@ (800077c <HAL_MspInit+0x4c>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000760:	6413      	str	r3, [r2, #64]	@ 0x40
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <HAL_MspInit+0x4c>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <NMI_Handler+0x4>

08000788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <HardFault_Handler+0x4>

08000790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <MemManage_Handler+0x4>

08000798 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d6:	f000 f89b 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007e4:	4802      	ldr	r0, [pc, #8]	@ (80007f0 <OTG_FS_IRQHandler+0x10>)
 80007e6:	f000 fcf9 	bl	80011dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000700 	.word	0x20000700

080007f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <SystemInit+0x20>)
 80007fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007fe:	4a05      	ldr	r2, [pc, #20]	@ (8000814 <SystemInit+0x20>)
 8000800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000818:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000850 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800081c:	f7ff ffea 	bl	80007f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000820:	480c      	ldr	r0, [pc, #48]	@ (8000854 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000822:	490d      	ldr	r1, [pc, #52]	@ (8000858 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000824:	4a0d      	ldr	r2, [pc, #52]	@ (800085c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000828:	e002      	b.n	8000830 <LoopCopyDataInit>

0800082a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800082c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082e:	3304      	adds	r3, #4

08000830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000834:	d3f9      	bcc.n	800082a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000836:	4a0a      	ldr	r2, [pc, #40]	@ (8000860 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000838:	4c0a      	ldr	r4, [pc, #40]	@ (8000864 <LoopFillZerobss+0x22>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800083c:	e001      	b.n	8000842 <LoopFillZerobss>

0800083e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000840:	3204      	adds	r2, #4

08000842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000844:	d3fb      	bcc.n	800083e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000846:	f006 ff47 	bl	80076d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800084a:	f7ff fe53 	bl	80004f4 <main>
  bx  lr    
 800084e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 800085c:	080078d8 	.word	0x080078d8
  ldr r2, =_sbss
 8000860:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8000864:	20000c00 	.word	0x20000c00

08000868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC_IRQHandler>
	...

0800086c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000870:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <HAL_Init+0x40>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0d      	ldr	r2, [pc, #52]	@ (80008ac <HAL_Init+0x40>)
 8000876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800087a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800087c:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <HAL_Init+0x40>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0a      	ldr	r2, [pc, #40]	@ (80008ac <HAL_Init+0x40>)
 8000882:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000888:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <HAL_Init+0x40>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a07      	ldr	r2, [pc, #28]	@ (80008ac <HAL_Init+0x40>)
 800088e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000894:	2003      	movs	r0, #3
 8000896:	f000 f94f 	bl	8000b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089a:	2000      	movs	r0, #0
 800089c:	f000 f808 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a0:	f7ff ff46 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023c00 	.word	0x40023c00

080008b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <HAL_InitTick+0x54>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_InitTick+0x58>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f967 	bl	8000ba2 <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e00e      	b.n	80008fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d80a      	bhi.n	80008fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f000 f92f 	bl	8000b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f0:	4a06      	ldr	r2, [pc, #24]	@ (800090c <HAL_InitTick+0x5c>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000000 	.word	0x20000000
 8000908:	20000008 	.word	0x20000008
 800090c:	20000004 	.word	0x20000004

08000910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_IncTick+0x20>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_IncTick+0x24>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a04      	ldr	r2, [pc, #16]	@ (8000934 <HAL_IncTick+0x24>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000008 	.word	0x20000008
 8000934:	20000218 	.word	0x20000218

08000938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b03      	ldr	r3, [pc, #12]	@ (800094c <HAL_GetTick+0x14>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000218 	.word	0x20000218

08000950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000958:	f7ff ffee 	bl	8000938 <HAL_GetTick>
 800095c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000968:	d005      	beq.n	8000976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <HAL_Delay+0x44>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4413      	add	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000976:	bf00      	nop
 8000978:	f7ff ffde 	bl	8000938 <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	429a      	cmp	r2, r3
 8000986:	d8f7      	bhi.n	8000978 <HAL_Delay+0x28>
  {
  }
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008

08000998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ca:	4a04      	ldr	r2, [pc, #16]	@ (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	60d3      	str	r3, [r2, #12]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	@ (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0b      	blt.n	8000a26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	4907      	ldr	r1, [pc, #28]	@ (8000a34 <__NVIC_EnableIRQ+0x38>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	@ (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	@ (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	@ 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	@ 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b04:	d301      	bcc.n	8000b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00f      	b.n	8000b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <SysTick_Config+0x40>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b12:	210f      	movs	r1, #15
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f7ff ff8e 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <SysTick_Config+0x40>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b22:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <SysTick_Config+0x40>)
 8000b24:	2207      	movs	r2, #7
 8000b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	e000e010 	.word	0xe000e010

08000b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ff29 	bl	8000998 <__NVIC_SetPriorityGrouping>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b60:	f7ff ff3e 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	6978      	ldr	r0, [r7, #20]
 8000b6c:	f7ff ff8e 	bl	8000a8c <NVIC_EncodePriority>
 8000b70:	4602      	mov	r2, r0
 8000b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff5d 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff31 	bl	80009fc <__NVIC_EnableIRQ>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ffa2 	bl	8000af4 <SysTick_Config>
 8000bb0:	4603      	mov	r3, r0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	@ 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	e165      	b.n	8000ea4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	f040 8154 	bne.w	8000e9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 0303 	and.w	r3, r3, #3
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d005      	beq.n	8000c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d130      	bne.n	8000c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4013      	ands	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c44:	2201      	movs	r2, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	091b      	lsrs	r3, r3, #4
 8000c5a:	f003 0201 	and.w	r2, r3, #1
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d017      	beq.n	8000cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	2203      	movs	r2, #3
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4013      	ands	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 0303 	and.w	r3, r3, #3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d123      	bne.n	8000d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	08da      	lsrs	r2, r3, #3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3208      	adds	r2, #8
 8000cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	f003 0307 	and.w	r3, r3, #7
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	220f      	movs	r2, #15
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	691a      	ldr	r2, [r3, #16]
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	08da      	lsrs	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3208      	adds	r2, #8
 8000cfa:	69b9      	ldr	r1, [r7, #24]
 8000cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0203 	and.w	r2, r3, #3
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f000 80ae 	beq.w	8000e9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b5d      	ldr	r3, [pc, #372]	@ (8000ebc <HAL_GPIO_Init+0x300>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	4a5c      	ldr	r2, [pc, #368]	@ (8000ebc <HAL_GPIO_Init+0x300>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d52:	4b5a      	ldr	r3, [pc, #360]	@ (8000ebc <HAL_GPIO_Init+0x300>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d5e:	4a58      	ldr	r2, [pc, #352]	@ (8000ec0 <HAL_GPIO_Init+0x304>)
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	3302      	adds	r3, #2
 8000d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	220f      	movs	r2, #15
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4f      	ldr	r2, [pc, #316]	@ (8000ec4 <HAL_GPIO_Init+0x308>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d025      	beq.n	8000dd6 <HAL_GPIO_Init+0x21a>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4e      	ldr	r2, [pc, #312]	@ (8000ec8 <HAL_GPIO_Init+0x30c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d01f      	beq.n	8000dd2 <HAL_GPIO_Init+0x216>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4d      	ldr	r2, [pc, #308]	@ (8000ecc <HAL_GPIO_Init+0x310>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d019      	beq.n	8000dce <HAL_GPIO_Init+0x212>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4c      	ldr	r2, [pc, #304]	@ (8000ed0 <HAL_GPIO_Init+0x314>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d013      	beq.n	8000dca <HAL_GPIO_Init+0x20e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4b      	ldr	r2, [pc, #300]	@ (8000ed4 <HAL_GPIO_Init+0x318>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d00d      	beq.n	8000dc6 <HAL_GPIO_Init+0x20a>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4a      	ldr	r2, [pc, #296]	@ (8000ed8 <HAL_GPIO_Init+0x31c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d007      	beq.n	8000dc2 <HAL_GPIO_Init+0x206>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a49      	ldr	r2, [pc, #292]	@ (8000edc <HAL_GPIO_Init+0x320>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d101      	bne.n	8000dbe <HAL_GPIO_Init+0x202>
 8000dba:	2306      	movs	r3, #6
 8000dbc:	e00c      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	e00a      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	e008      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e004      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	69fa      	ldr	r2, [r7, #28]
 8000dda:	f002 0203 	and.w	r2, r2, #3
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	4093      	lsls	r3, r2
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de8:	4935      	ldr	r1, [pc, #212]	@ (8000ec0 <HAL_GPIO_Init+0x304>)
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee0 <HAL_GPIO_Init+0x324>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e1a:	4a31      	ldr	r2, [pc, #196]	@ (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e20:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e44:	4a26      	ldr	r2, [pc, #152]	@ (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e98:	4a11      	ldr	r2, [pc, #68]	@ (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	2b0f      	cmp	r3, #15
 8000ea8:	f67f ae96 	bls.w	8000bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3724      	adds	r7, #36	@ 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40013800 	.word	0x40013800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020c00 	.word	0x40020c00
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40021400 	.word	0x40021400
 8000edc:	40021800 	.word	0x40021800
 8000ee0:	40013c00 	.word	0x40013c00

08000ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691a      	ldr	r2, [r3, #16]
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	e001      	b.n	8000f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
 8000f20:	4613      	mov	r3, r2
 8000f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f24:	787b      	ldrb	r3, [r7, #1]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f2a:	887a      	ldrh	r2, [r7, #2]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f30:	e003      	b.n	8000f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f32:	887b      	ldrh	r3, [r7, #2]
 8000f34:	041a      	lsls	r2, r3, #16
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	619a      	str	r2, [r3, #24]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af02      	add	r7, sp, #8
 8000f4c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e108      	b.n	800116a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d106      	bne.n	8000f78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f006 f842 	bl	8006ffc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f86:	d102      	bne.n	8000f8e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fc5d 	bl	8003852 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7c1a      	ldrb	r2, [r3, #16]
 8000fa0:	f88d 2000 	strb.w	r2, [sp]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fa8:	f002 fb3c 	bl	8003624 <USB_CoreInit>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e0d5      	b.n	800116a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 fc55 	bl	8003874 <USB_SetCurrentMode>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e0c6      	b.n	800116a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e04a      	b.n	8001078 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	4413      	add	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	3315      	adds	r3, #21
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	4413      	add	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	3314      	adds	r3, #20
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	b298      	uxth	r0, r3
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4413      	add	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	332e      	adds	r3, #46	@ 0x2e
 800101e:	4602      	mov	r2, r0
 8001020:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	3318      	adds	r3, #24
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4413      	add	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	331c      	adds	r3, #28
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	3320      	adds	r3, #32
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	3324      	adds	r3, #36	@ 0x24
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	3301      	adds	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	791b      	ldrb	r3, [r3, #4]
 800107c:	7bfa      	ldrb	r2, [r7, #15]
 800107e:	429a      	cmp	r2, r3
 8001080:	d3af      	bcc.n	8000fe2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001082:	2300      	movs	r3, #0
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	e044      	b.n	8001112 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4413      	add	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	3301      	adds	r3, #1
 8001110:	73fb      	strb	r3, [r7, #15]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	429a      	cmp	r2, r3
 800111a:	d3b5      	bcc.n	8001088 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7c1a      	ldrb	r2, [r3, #16]
 8001124:	f88d 2000 	strb.w	r2, [sp]
 8001128:	3304      	adds	r3, #4
 800112a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800112c:	f002 fbee 	bl	800390c <USB_DevInit>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2202      	movs	r2, #2
 800113a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e013      	b.n	800116a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7b1b      	ldrb	r3, [r3, #12]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d102      	bne.n	800115e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f001 f955 	bl	8002408 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f003 fc25 	bl	80049b2 <USB_DevDisconnect>

  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001186:	2b01      	cmp	r3, #1
 8001188:	d101      	bne.n	800118e <HAL_PCD_Start+0x1c>
 800118a:	2302      	movs	r3, #2
 800118c:	e022      	b.n	80011d4 <HAL_PCD_Start+0x62>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d009      	beq.n	80011b6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d105      	bne.n	80011b6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 fb38 	bl	8003830 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 fbd3 	bl	8004970 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b08d      	sub	sp, #52	@ 0x34
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 fc91 	bl	8004b1a <USB_GetMode>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f040 84b9 	bne.w	8001b72 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fbf5 	bl	80049f4 <USB_ReadInterrupts>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 84af 	beq.w	8001b70 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	0a1b      	lsrs	r3, r3, #8
 800121c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f003 fbe2 	bl	80049f4 <USB_ReadInterrupts>
 8001230:	4603      	mov	r3, r0
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b02      	cmp	r3, #2
 8001238:	d107      	bne.n	800124a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	695a      	ldr	r2, [r3, #20]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f002 0202 	and.w	r2, r2, #2
 8001248:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f003 fbd0 	bl	80049f4 <USB_ReadInterrupts>
 8001254:	4603      	mov	r3, r0
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	2b10      	cmp	r3, #16
 800125c:	d161      	bne.n	8001322 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	699a      	ldr	r2, [r3, #24]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0210 	bic.w	r2, r2, #16
 800126c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	f003 020f 	and.w	r2, r3, #15
 800127a:	4613      	mov	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	3304      	adds	r3, #4
 800128c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	0c5b      	lsrs	r3, r3, #17
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	2b02      	cmp	r3, #2
 8001298:	d124      	bne.n	80012e4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d035      	beq.n	8001312 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	461a      	mov	r2, r3
 80012b8:	6a38      	ldr	r0, [r7, #32]
 80012ba:	f003 fa07 	bl	80046cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ca:	441a      	add	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	695a      	ldr	r2, [r3, #20]
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	091b      	lsrs	r3, r3, #4
 80012d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012dc:	441a      	add	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	615a      	str	r2, [r3, #20]
 80012e2:	e016      	b.n	8001312 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	0c5b      	lsrs	r3, r3, #17
 80012e8:	f003 030f 	and.w	r3, r3, #15
 80012ec:	2b06      	cmp	r3, #6
 80012ee:	d110      	bne.n	8001312 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80012f6:	2208      	movs	r2, #8
 80012f8:	4619      	mov	r1, r3
 80012fa:	6a38      	ldr	r0, [r7, #32]
 80012fc:	f003 f9e6 	bl	80046cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	695a      	ldr	r2, [r3, #20]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800130c:	441a      	add	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	699a      	ldr	r2, [r3, #24]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f042 0210 	orr.w	r2, r2, #16
 8001320:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f003 fb64 	bl	80049f4 <USB_ReadInterrupts>
 800132c:	4603      	mov	r3, r0
 800132e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001332:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001336:	f040 80a7 	bne.w	8001488 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f003 fb69 	bl	8004a1a <USB_ReadDevAllOutEpInterrupt>
 8001348:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800134a:	e099      	b.n	8001480 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800134c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 808e 	beq.w	8001474 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f003 fb8d 	bl	8004a82 <USB_ReadDevOutEPInterrupt>
 8001368:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00c      	beq.n	800138e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001376:	015a      	lsls	r2, r3, #5
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	4413      	add	r3, r2
 800137c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001380:	461a      	mov	r2, r3
 8001382:	2301      	movs	r3, #1
 8001384:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001386:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 feb7 	bl	80020fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00c      	beq.n	80013b2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	015a      	lsls	r2, r3, #5
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	4413      	add	r3, r2
 80013a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013a4:	461a      	mov	r2, r3
 80013a6:	2308      	movs	r3, #8
 80013a8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 ff8d 	bl	80022cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d008      	beq.n	80013ce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013be:	015a      	lsls	r2, r3, #5
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	4413      	add	r3, r2
 80013c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013c8:	461a      	mov	r2, r3
 80013ca:	2310      	movs	r3, #16
 80013cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d030      	beq.n	800143a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013e0:	2b80      	cmp	r3, #128	@ 0x80
 80013e2:	d109      	bne.n	80013f8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80013f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013f6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80013f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013fa:	4613      	mov	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	3304      	adds	r3, #4
 800140c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	78db      	ldrb	r3, [r3, #3]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d108      	bne.n	8001428 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2200      	movs	r2, #0
 800141a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4619      	mov	r1, r3
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f005 ff06 	bl	8007234 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	015a      	lsls	r2, r3, #5
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	4413      	add	r3, r2
 8001430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001434:	461a      	mov	r2, r3
 8001436:	2302      	movs	r3, #2
 8001438:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	f003 0320 	and.w	r3, r3, #32
 8001440:	2b00      	cmp	r3, #0
 8001442:	d008      	beq.n	8001456 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001446:	015a      	lsls	r2, r3, #5
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	4413      	add	r3, r2
 800144c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001450:	461a      	mov	r2, r3
 8001452:	2320      	movs	r3, #32
 8001454:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d009      	beq.n	8001474 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001462:	015a      	lsls	r2, r3, #5
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	4413      	add	r3, r2
 8001468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800146c:	461a      	mov	r2, r3
 800146e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001472:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	3301      	adds	r3, #1
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800147a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800147c:	085b      	lsrs	r3, r3, #1
 800147e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001482:	2b00      	cmp	r3, #0
 8001484:	f47f af62 	bne.w	800134c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f003 fab1 	bl	80049f4 <USB_ReadInterrupts>
 8001492:	4603      	mov	r3, r0
 8001494:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001498:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800149c:	f040 80db 	bne.w	8001656 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f003 fad2 	bl	8004a4e <USB_ReadDevAllInEpInterrupt>
 80014aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80014b0:	e0cd      	b.n	800164e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80c2 	beq.w	8001642 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 faf8 	bl	8004abe <USB_ReadDevInEPInterrupt>
 80014ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d057      	beq.n	800158a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	2201      	movs	r2, #1
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69f9      	ldr	r1, [r7, #28]
 80014f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80014fa:	4013      	ands	r3, r2
 80014fc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	015a      	lsls	r2, r3, #5
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	4413      	add	r3, r2
 8001506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800150a:	461a      	mov	r2, r3
 800150c:	2301      	movs	r3, #1
 800150e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	799b      	ldrb	r3, [r3, #6]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d132      	bne.n	800157e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	3320      	adds	r3, #32
 8001528:	6819      	ldr	r1, [r3, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800152e:	4613      	mov	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4413      	add	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4403      	add	r3, r0
 8001538:	331c      	adds	r3, #28
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4419      	add	r1, r3
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001542:	4613      	mov	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4403      	add	r3, r0
 800154c:	3320      	adds	r3, #32
 800154e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001552:	2b00      	cmp	r3, #0
 8001554:	d113      	bne.n	800157e <HAL_PCD_IRQHandler+0x3a2>
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	3324      	adds	r3, #36	@ 0x24
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d108      	bne.n	800157e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001576:	461a      	mov	r2, r3
 8001578:	2101      	movs	r1, #1
 800157a:	f003 faff 	bl	8004b7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4619      	mov	r1, r3
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f005 fdd0 	bl	800712a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001596:	015a      	lsls	r2, r3, #5
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	4413      	add	r3, r2
 800159c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015a0:	461a      	mov	r2, r3
 80015a2:	2308      	movs	r3, #8
 80015a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b2:	015a      	lsls	r2, r3, #5
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015bc:	461a      	mov	r2, r3
 80015be:	2310      	movs	r3, #16
 80015c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ce:	015a      	lsls	r2, r3, #5
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	4413      	add	r3, r2
 80015d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015d8:	461a      	mov	r2, r3
 80015da:	2340      	movs	r3, #64	@ 0x40
 80015dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d023      	beq.n	8001630 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015ea:	6a38      	ldr	r0, [r7, #32]
 80015ec:	f002 faec 	bl	8003bc8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80015f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015f2:	4613      	mov	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4413      	add	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	3310      	adds	r3, #16
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	4413      	add	r3, r2
 8001600:	3304      	adds	r3, #4
 8001602:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	78db      	ldrb	r3, [r3, #3]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d108      	bne.n	800161e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2200      	movs	r2, #0
 8001610:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	b2db      	uxtb	r3, r3
 8001616:	4619      	mov	r1, r3
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f005 fe1d 	bl	8007258 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	015a      	lsls	r2, r3, #5
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	4413      	add	r3, r2
 8001626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800162a:	461a      	mov	r2, r3
 800162c:	2302      	movs	r3, #2
 800162e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800163a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 fcd0 	bl	8001fe2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	3301      	adds	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164a:	085b      	lsrs	r3, r3, #1
 800164c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800164e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001650:	2b00      	cmp	r3, #0
 8001652:	f47f af2e 	bne.w	80014b2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f003 f9ca 	bl	80049f4 <USB_ReadInterrupts>
 8001660:	4603      	mov	r3, r0
 8001662:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001666:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800166a:	d122      	bne.n	80016b2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001686:	2b01      	cmp	r3, #1
 8001688:	d108      	bne.n	800169c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001692:	2100      	movs	r1, #0
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f005 ff85 	bl	80075a4 <HAL_PCDEx_LPM_Callback>
 800169a:	e002      	b.n	80016a2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f005 fdbb 	bl	8007218 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	695a      	ldr	r2, [r3, #20]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80016b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 f99c 	bl	80049f4 <USB_ReadInterrupts>
 80016bc:	4603      	mov	r3, r0
 80016be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016c6:	d112      	bne.n	80016ee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d102      	bne.n	80016de <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f005 fd77 	bl	80071cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	695a      	ldr	r2, [r3, #20]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80016ec:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 f97e 	bl	80049f4 <USB_ReadInterrupts>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001702:	d121      	bne.n	8001748 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001712:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800171a:	2b00      	cmp	r3, #0
 800171c:	d111      	bne.n	8001742 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	f003 020f 	and.w	r2, r3, #15
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001738:	2101      	movs	r1, #1
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f005 ff32 	bl	80075a4 <HAL_PCDEx_LPM_Callback>
 8001740:	e002      	b.n	8001748 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f005 fd42 	bl	80071cc <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f003 f951 	bl	80049f4 <USB_ReadInterrupts>
 8001752:	4603      	mov	r3, r0
 8001754:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800175c:	f040 80b7 	bne.w	80018ce <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800176e:	f023 0301 	bic.w	r3, r3, #1
 8001772:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2110      	movs	r1, #16
 800177a:	4618      	mov	r0, r3
 800177c:	f002 fa24 	bl	8003bc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001784:	e046      	b.n	8001814 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001788:	015a      	lsls	r2, r3, #5
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	4413      	add	r3, r2
 800178e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001792:	461a      	mov	r2, r3
 8001794:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001798:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800179a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800179c:	015a      	lsls	r2, r3, #5
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017aa:	0151      	lsls	r1, r2, #5
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	440a      	add	r2, r1
 80017b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80017b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017bc:	015a      	lsls	r2, r3, #5
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	4413      	add	r3, r2
 80017c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017c6:	461a      	mov	r2, r3
 80017c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80017cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d0:	015a      	lsls	r2, r3, #5
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017de:	0151      	lsls	r1, r2, #5
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	440a      	add	r2, r1
 80017e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80017e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f0:	015a      	lsls	r2, r3, #5
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017fe:	0151      	lsls	r1, r2, #5
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	440a      	add	r2, r1
 8001804:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001808:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800180c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001810:	3301      	adds	r3, #1
 8001812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	791b      	ldrb	r3, [r3, #4]
 8001818:	461a      	mov	r2, r3
 800181a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800181c:	4293      	cmp	r3, r2
 800181e:	d3b2      	bcc.n	8001786 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800182e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001832:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7bdb      	ldrb	r3, [r3, #15]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d016      	beq.n	800186a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800184c:	f043 030b 	orr.w	r3, r3, #11
 8001850:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800185a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001862:	f043 030b 	orr.w	r3, r3, #11
 8001866:	6453      	str	r3, [r2, #68]	@ 0x44
 8001868:	e015      	b.n	8001896 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001878:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800187c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001880:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001890:	f043 030b 	orr.w	r3, r3, #11
 8001894:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018a4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80018a8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018b8:	461a      	mov	r2, r3
 80018ba:	f003 f95f 	bl	8004b7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80018cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f003 f88e 	bl	80049f4 <USB_ReadInterrupts>
 80018d8:	4603      	mov	r3, r0
 80018da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018e2:	d123      	bne.n	800192c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 f924 	bl	8004b36 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 f9e1 	bl	8003cba <USB_GetDevSpeed>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681c      	ldr	r4, [r3, #0]
 8001904:	f000 fe8a 	bl	800261c <HAL_RCC_GetHCLKFreq>
 8001908:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800190e:	461a      	mov	r2, r3
 8001910:	4620      	mov	r0, r4
 8001912:	f001 feeb 	bl	80036ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f005 fc2f 	bl	800717a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800192a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f003 f85f 	bl	80049f4 <USB_ReadInterrupts>
 8001936:	4603      	mov	r3, r0
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b08      	cmp	r3, #8
 800193e:	d10a      	bne.n	8001956 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f005 fc0c 	bl	800715e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f002 0208 	and.w	r2, r2, #8
 8001954:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f003 f84a 	bl	80049f4 <USB_ReadInterrupts>
 8001960:	4603      	mov	r3, r0
 8001962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001966:	2b80      	cmp	r3, #128	@ 0x80
 8001968:	d123      	bne.n	80019b2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001976:	2301      	movs	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
 800197a:	e014      	b.n	80019a6 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001980:	4613      	mov	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4619      	mov	r1, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 faf0 	bl	8001f80 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	3301      	adds	r3, #1
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	791b      	ldrb	r3, [r3, #4]
 80019aa:	461a      	mov	r2, r3
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d3e4      	bcc.n	800197c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f003 f81c 	bl	80049f4 <USB_ReadInterrupts>
 80019bc:	4603      	mov	r3, r0
 80019be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019c6:	d13c      	bne.n	8001a42 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019c8:	2301      	movs	r3, #1
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80019cc:	e02b      	b.n	8001a26 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	015a      	lsls	r2, r3, #5
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	4413      	add	r3, r2
 80019d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019e2:	4613      	mov	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	3318      	adds	r3, #24
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d115      	bne.n	8001a20 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	da12      	bge.n	8001a20 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019fe:	4613      	mov	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	3317      	adds	r3, #23
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	4619      	mov	r1, r3
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 fab0 	bl	8001f80 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a22:	3301      	adds	r3, #1
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	791b      	ldrb	r3, [r3, #4]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d3cd      	bcc.n	80019ce <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001a40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 ffd4 	bl	80049f4 <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a56:	d156      	bne.n	8001b06 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a58:	2301      	movs	r3, #1
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a5c:	e045      	b.n	8001aea <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	015a      	lsls	r2, r3, #5
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	4413      	add	r3, r2
 8001a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a72:	4613      	mov	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d12e      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a86:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	da2b      	bge.n	8001ae4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001a98:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d121      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10a      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001adc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ae0:	6053      	str	r3, [r2, #4]
            break;
 8001ae2:	e008      	b.n	8001af6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	791b      	ldrb	r3, [r3, #4]
 8001aee:	461a      	mov	r2, r3
 8001af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d3b3      	bcc.n	8001a5e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 ff72 	bl	80049f4 <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b1a:	d10a      	bne.n	8001b32 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f005 fbad 	bl	800727c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 ff5c 	bl	80049f4 <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d115      	bne.n	8001b72 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f005 fb9d 	bl	8007298 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6859      	ldr	r1, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	e000      	b.n	8001b72 <HAL_PCD_IRQHandler+0x996>
      return;
 8001b70:	bf00      	nop
    }
  }
}
 8001b72:	3734      	adds	r7, #52	@ 0x34
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd90      	pop	{r4, r7, pc}

08001b78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_PCD_SetAddress+0x1a>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e012      	b.n	8001bb8 <HAL_PCD_SetAddress+0x40>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	78fa      	ldrb	r2, [r7, #3]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f002 febb 	bl	8004924 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	4608      	mov	r0, r1
 8001bca:	4611      	mov	r1, r2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4603      	mov	r3, r0
 8001bd0:	70fb      	strb	r3, [r7, #3]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	803b      	strh	r3, [r7, #0]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	da0f      	bge.n	8001c06 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	f003 020f 	and.w	r2, r3, #15
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	3310      	adds	r3, #16
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	705a      	strb	r2, [r3, #1]
 8001c04:	e00f      	b.n	8001c26 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	f003 020f 	and.w	r2, r3, #15
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c32:	883a      	ldrh	r2, [r7, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	78ba      	ldrb	r2, [r7, #2]
 8001c3c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	785b      	ldrb	r3, [r3, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d004      	beq.n	8001c50 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c50:	78bb      	ldrb	r3, [r7, #2]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d102      	bne.n	8001c5c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_PCD_EP_Open+0xaa>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e00e      	b.n	8001c88 <HAL_PCD_EP_Open+0xc8>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68f9      	ldr	r1, [r7, #12]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f002 f843 	bl	8003d04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001c86:	7afb      	ldrb	r3, [r7, #11]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	da0f      	bge.n	8001cc4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	f003 020f 	and.w	r2, r3, #15
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	3310      	adds	r3, #16
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	705a      	strb	r2, [r3, #1]
 8001cc2:	e00f      	b.n	8001ce4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	f003 020f 	and.w	r2, r3, #15
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4413      	add	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	3304      	adds	r3, #4
 8001cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_PCD_EP_Close+0x6e>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e00e      	b.n	8001d1c <HAL_PCD_EP_Close+0x8c>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68f9      	ldr	r1, [r7, #12]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f002 f881 	bl	8003e14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	460b      	mov	r3, r1
 8001d32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d34:	7afb      	ldrb	r3, [r7, #11]
 8001d36:	f003 020f 	and.w	r2, r3, #15
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4413      	add	r3, r2
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2200      	movs	r2, #0
 8001d64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d66:	7afb      	ldrb	r3, [r7, #11]
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	799b      	ldrb	r3, [r3, #6]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d102      	bne.n	8001d80 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	799b      	ldrb	r3, [r3, #6]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	6979      	ldr	r1, [r7, #20]
 8001d8c:	f002 f91e 	bl	8003fcc <USB_EPStartXfer>

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
 8001da6:	460b      	mov	r3, r1
 8001da8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001daa:	7afb      	ldrb	r3, [r7, #11]
 8001dac:	f003 020f 	and.w	r2, r3, #15
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	3310      	adds	r3, #16
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dda:	7afb      	ldrb	r3, [r7, #11]
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	799b      	ldrb	r3, [r3, #6]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d102      	bne.n	8001df4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	799b      	ldrb	r3, [r3, #6]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	6979      	ldr	r1, [r7, #20]
 8001e00:	f002 f8e4 	bl	8003fcc <USB_EPStartXfer>

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e1a:	78fb      	ldrb	r3, [r7, #3]
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	7912      	ldrb	r2, [r2, #4]
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e04f      	b.n	8001ecc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	da0f      	bge.n	8001e54 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	f003 020f 	and.w	r2, r3, #15
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	3310      	adds	r3, #16
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	3304      	adds	r3, #4
 8001e4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	705a      	strb	r2, [r3, #1]
 8001e52:	e00d      	b.n	8001e70 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e54:	78fa      	ldrb	r2, [r7, #3]
 8001e56:	4613      	mov	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	3304      	adds	r3, #4
 8001e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2201      	movs	r2, #1
 8001e74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	f003 030f 	and.w	r3, r3, #15
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_PCD_EP_SetStall+0x82>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e01d      	b.n	8001ecc <HAL_PCD_EP_SetStall+0xbe>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68f9      	ldr	r1, [r7, #12]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f002 fc6c 	bl	800477c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7999      	ldrb	r1, [r3, #6]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	f002 fe5d 	bl	8004b7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	7912      	ldrb	r2, [r2, #4]
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e042      	b.n	8001f78 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	da0f      	bge.n	8001f1a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	f003 020f 	and.w	r2, r3, #15
 8001f00:	4613      	mov	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	3310      	adds	r3, #16
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3304      	adds	r3, #4
 8001f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	705a      	strb	r2, [r3, #1]
 8001f18:	e00f      	b.n	8001f3a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 020f 	and.w	r2, r3, #15
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	3304      	adds	r3, #4
 8001f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_PCD_EP_ClrStall+0x86>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e00e      	b.n	8001f78 <HAL_PCD_EP_ClrStall+0xa4>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68f9      	ldr	r1, [r7, #12]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 fc75 	bl	8004858 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	da0c      	bge.n	8001fae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	f003 020f 	and.w	r2, r3, #15
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	3310      	adds	r3, #16
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3304      	adds	r3, #4
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	e00c      	b.n	8001fc8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	f003 020f 	and.w	r2, r3, #15
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68f9      	ldr	r1, [r7, #12]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f002 fa94 	bl	80044fc <USB_EPStopXfer>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001fd8:	7afb      	ldrb	r3, [r7, #11]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b08a      	sub	sp, #40	@ 0x28
 8001fe6:	af02      	add	r7, sp, #8
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	3310      	adds	r3, #16
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	3304      	adds	r3, #4
 8002008:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	429a      	cmp	r2, r3
 8002014:	d901      	bls.n	800201a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e06b      	b.n	80020f2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	429a      	cmp	r2, r3
 800202e:	d902      	bls.n	8002036 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3303      	adds	r3, #3
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800203e:	e02a      	b.n	8002096 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	429a      	cmp	r2, r3
 8002054:	d902      	bls.n	800205c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	3303      	adds	r3, #3
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	68d9      	ldr	r1, [r3, #12]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	b2da      	uxtb	r2, r3
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	4603      	mov	r3, r0
 8002078:	6978      	ldr	r0, [r7, #20]
 800207a:	f002 fae9 	bl	8004650 <USB_WritePacket>

    ep->xfer_buff  += len;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	441a      	add	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	441a      	add	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d809      	bhi.n	80020c0 <PCD_WriteEmptyTxFifo+0xde>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	695a      	ldr	r2, [r3, #20]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d203      	bcs.n	80020c0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1bf      	bne.n	8002040 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d811      	bhi.n	80020f0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	2201      	movs	r2, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	6939      	ldr	r1, [r7, #16]
 80020e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80020ec:	4013      	ands	r3, r2
 80020ee:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3720      	adds	r7, #32
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	333c      	adds	r3, #60	@ 0x3c
 8002114:	3304      	adds	r3, #4
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	4413      	add	r3, r2
 8002122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	799b      	ldrb	r3, [r3, #6]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d17b      	bne.n	800222a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d015      	beq.n	8002168 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	4a61      	ldr	r2, [pc, #388]	@ (80022c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	f240 80b9 	bls.w	80022b8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80b3 	beq.w	80022b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	4413      	add	r3, r2
 800215a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800215e:	461a      	mov	r2, r3
 8002160:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002164:	6093      	str	r3, [r2, #8]
 8002166:	e0a7      	b.n	80022b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	f003 0320 	and.w	r3, r3, #32
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4413      	add	r3, r2
 800217a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800217e:	461a      	mov	r2, r3
 8002180:	2320      	movs	r3, #32
 8002182:	6093      	str	r3, [r2, #8]
 8002184:	e098      	b.n	80022b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800218c:	2b00      	cmp	r3, #0
 800218e:	f040 8093 	bne.w	80022b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	4a4b      	ldr	r2, [pc, #300]	@ (80022c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d90f      	bls.n	80021ba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021b0:	461a      	mov	r2, r3
 80021b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021b6:	6093      	str	r3, [r2, #8]
 80021b8:	e07e      	b.n	80022b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	3304      	adds	r3, #4
 80021ce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a1a      	ldr	r2, [r3, #32]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	0159      	lsls	r1, r3, #5
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	440b      	add	r3, r1
 80021dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e6:	1ad2      	subs	r2, r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d114      	bne.n	800221c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002204:	461a      	mov	r2, r3
 8002206:	2101      	movs	r1, #1
 8002208:	f002 fcb8 	bl	8004b7c <USB_EP0_OutStart>
 800220c:	e006      	b.n	800221c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	441a      	add	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	4619      	mov	r1, r3
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f004 ff66 	bl	80070f4 <HAL_PCD_DataOutStageCallback>
 8002228:	e046      	b.n	80022b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	4a26      	ldr	r2, [pc, #152]	@ (80022c8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d124      	bne.n	800227c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	4413      	add	r3, r2
 8002244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002248:	461a      	mov	r2, r3
 800224a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800224e:	6093      	str	r3, [r2, #8]
 8002250:	e032      	b.n	80022b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	4413      	add	r3, r2
 8002264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002268:	461a      	mov	r2, r3
 800226a:	2320      	movs	r3, #32
 800226c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	4619      	mov	r1, r3
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f004 ff3d 	bl	80070f4 <HAL_PCD_DataOutStageCallback>
 800227a:	e01d      	b.n	80022b8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d114      	bne.n	80022ac <PCD_EP_OutXfrComplete_int+0x1b0>
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d108      	bne.n	80022ac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022a4:	461a      	mov	r2, r3
 80022a6:	2100      	movs	r1, #0
 80022a8:	f002 fc68 	bl	8004b7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	4619      	mov	r1, r3
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f004 ff1e 	bl	80070f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	4f54300a 	.word	0x4f54300a
 80022c8:	4f54310a 	.word	0x4f54310a

080022cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	333c      	adds	r3, #60	@ 0x3c
 80022e4:	3304      	adds	r3, #4
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4a15      	ldr	r2, [pc, #84]	@ (8002354 <PCD_EP_OutSetupPacket_int+0x88>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d90e      	bls.n	8002320 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002308:	2b00      	cmp	r3, #0
 800230a:	d009      	beq.n	8002320 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	015a      	lsls	r2, r3, #5
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4413      	add	r3, r2
 8002314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002318:	461a      	mov	r2, r3
 800231a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800231e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f004 fed5 	bl	80070d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <PCD_EP_OutSetupPacket_int+0x88>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d90c      	bls.n	8002348 <PCD_EP_OutSetupPacket_int+0x7c>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	799b      	ldrb	r3, [r3, #6]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d108      	bne.n	8002348 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002340:	461a      	mov	r2, r3
 8002342:	2101      	movs	r1, #1
 8002344:	f002 fc1a 	bl	8004b7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	4f54300a 	.word	0x4f54300a

08002358 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	70fb      	strb	r3, [r7, #3]
 8002364:	4613      	mov	r3, r2
 8002366:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d107      	bne.n	8002386 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002376:	883b      	ldrh	r3, [r7, #0]
 8002378:	0419      	lsls	r1, r3, #16
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	430a      	orrs	r2, r1
 8002382:	629a      	str	r2, [r3, #40]	@ 0x28
 8002384:	e028      	b.n	80023d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238c:	0c1b      	lsrs	r3, r3, #16
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	4413      	add	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002394:	2300      	movs	r3, #0
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	e00d      	b.n	80023b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	3340      	adds	r3, #64	@ 0x40
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	0c1b      	lsrs	r3, r3, #16
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	4413      	add	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	3301      	adds	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	429a      	cmp	r2, r3
 80023be:	d3ec      	bcc.n	800239a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023c0:	883b      	ldrh	r3, [r7, #0]
 80023c2:	0418      	lsls	r0, r3, #16
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6819      	ldr	r1, [r3, #0]
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	4302      	orrs	r2, r0
 80023d0:	3340      	adds	r3, #64	@ 0x40
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	460b      	mov	r3, r1
 80023f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	887a      	ldrh	r2, [r7, #2]
 80023f8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800243a:	f043 0303 	orr.w	r3, r3, #3
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0cc      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002464:	4b68      	ldr	r3, [pc, #416]	@ (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d90c      	bls.n	800248c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b65      	ldr	r3, [pc, #404]	@ (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b63      	ldr	r3, [pc, #396]	@ (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0b8      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a4:	4b59      	ldr	r3, [pc, #356]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	4a58      	ldr	r2, [pc, #352]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024bc:	4b53      	ldr	r3, [pc, #332]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4a52      	ldr	r2, [pc, #328]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c8:	4b50      	ldr	r3, [pc, #320]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	494d      	ldr	r1, [pc, #308]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d044      	beq.n	8002570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d107      	bne.n	80024fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b47      	ldr	r3, [pc, #284]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d119      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e07f      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d003      	beq.n	800250e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800250a:	2b03      	cmp	r3, #3
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250e:	4b3f      	ldr	r3, [pc, #252]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e06f      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251e:	4b3b      	ldr	r3, [pc, #236]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e067      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252e:	4b37      	ldr	r3, [pc, #220]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f023 0203 	bic.w	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4934      	ldr	r1, [pc, #208]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	4313      	orrs	r3, r2
 800253e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002540:	f7fe f9fa 	bl	8000938 <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	e00a      	b.n	800255e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002548:	f7fe f9f6 	bl	8000938 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e04f      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	4b2b      	ldr	r3, [pc, #172]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 020c 	and.w	r2, r3, #12
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	429a      	cmp	r2, r3
 800256e:	d1eb      	bne.n	8002548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002570:	4b25      	ldr	r3, [pc, #148]	@ (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d20c      	bcs.n	8002598 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b22      	ldr	r3, [pc, #136]	@ (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b20      	ldr	r3, [pc, #128]	@ (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e032      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a4:	4b19      	ldr	r3, [pc, #100]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4916      	ldr	r1, [pc, #88]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025c2:	4b12      	ldr	r3, [pc, #72]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	490e      	ldr	r1, [pc, #56]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025d6:	f000 fb57 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 80025da:	4602      	mov	r2, r0
 80025dc:	4b0b      	ldr	r3, [pc, #44]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	490a      	ldr	r1, [pc, #40]	@ (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	5ccb      	ldrb	r3, [r1, r3]
 80025ea:	fa22 f303 	lsr.w	r3, r2, r3
 80025ee:	4a09      	ldr	r2, [pc, #36]	@ (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025f2:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <HAL_RCC_ClockConfig+0x1c8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe f95a 	bl	80008b0 <HAL_InitTick>

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023c00 	.word	0x40023c00
 800260c:	40023800 	.word	0x40023800
 8002610:	080077b4 	.word	0x080077b4
 8002614:	20000000 	.word	0x20000000
 8002618:	20000004 	.word	0x20000004

0800261c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002620:	4b03      	ldr	r3, [pc, #12]	@ (8002630 <HAL_RCC_GetHCLKFreq+0x14>)
 8002622:	681b      	ldr	r3, [r3, #0]
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20000000 	.word	0x20000000

08002634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08c      	sub	sp, #48	@ 0x30
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d010      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800266c:	4b6f      	ldr	r3, [pc, #444]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800266e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002672:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800267a:	496c      	ldr	r1, [pc, #432]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800268a:	2301      	movs	r3, #1
 800268c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d010      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800269a:	4b64      	ldr	r3, [pc, #400]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800269c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026a0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a8:	4960      	ldr	r1, [pc, #384]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80026b8:	2301      	movs	r3, #1
 80026ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d017      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026c8:	4b58      	ldr	r3, [pc, #352]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	4955      	ldr	r1, [pc, #340]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026e6:	d101      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80026e8:	2301      	movs	r3, #1
 80026ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80026f4:	2301      	movs	r3, #1
 80026f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b00      	cmp	r3, #0
 8002702:	d017      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002704:	4b49      	ldr	r3, [pc, #292]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800270a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002712:	4946      	ldr	r1, [pc, #280]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800271e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002722:	d101      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002724:	2301      	movs	r3, #1
 8002726:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002730:	2301      	movs	r3, #1
 8002732:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 808a 	beq.w	8002856 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	4b39      	ldr	r3, [pc, #228]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	4a38      	ldr	r2, [pc, #224]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800274c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002750:	6413      	str	r3, [r2, #64]	@ 0x40
 8002752:	4b36      	ldr	r3, [pc, #216]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800275e:	4b34      	ldr	r3, [pc, #208]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a33      	ldr	r2, [pc, #204]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002768:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800276a:	f7fe f8e5 	bl	8000938 <HAL_GetTick>
 800276e:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002772:	f7fe f8e1 	bl	8000938 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e278      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002784:	4b2a      	ldr	r3, [pc, #168]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002790:	4b26      	ldr	r3, [pc, #152]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002794:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002798:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d02f      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027a8:	6a3a      	ldr	r2, [r7, #32]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d028      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027ae:	4b1f      	ldr	r3, [pc, #124]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027b6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027be:	4b1d      	ldr	r3, [pc, #116]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80027c4:	4a19      	ldr	r2, [pc, #100]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027ca:	4b18      	ldr	r3, [pc, #96]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d114      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80027d6:	f7fe f8af 	bl	8000938 <HAL_GetTick>
 80027da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027dc:	e00a      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7fe f8ab 	bl	8000938 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e240      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f4:	4b0d      	ldr	r3, [pc, #52]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0ee      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002808:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800280c:	d114      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800280e:	4b07      	ldr	r3, [pc, #28]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800281e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002822:	4902      	ldr	r1, [pc, #8]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002824:	4313      	orrs	r3, r2
 8002826:	608b      	str	r3, [r1, #8]
 8002828:	e00c      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40007000 	.word	0x40007000
 8002834:	42470e40 	.word	0x42470e40
 8002838:	4b4a      	ldr	r3, [pc, #296]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4a49      	ldr	r2, [pc, #292]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800283e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002842:	6093      	str	r3, [r2, #8]
 8002844:	4b47      	ldr	r3, [pc, #284]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002846:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002850:	4944      	ldr	r1, [pc, #272]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002852:	4313      	orrs	r3, r2
 8002854:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0310 	and.w	r3, r3, #16
 800285e:	2b00      	cmp	r3, #0
 8002860:	d004      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002868:	4b3f      	ldr	r3, [pc, #252]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800286a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002878:	4b3a      	ldr	r3, [pc, #232]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800287a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800287e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002886:	4937      	ldr	r1, [pc, #220]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800289a:	4b32      	ldr	r3, [pc, #200]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800289c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028a0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a8:	492e      	ldr	r1, [pc, #184]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d011      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028bc:	4b29      	ldr	r3, [pc, #164]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ca:	4926      	ldr	r1, [pc, #152]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028da:	d101      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80028dc:	2301      	movs	r3, #1
 80028de:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80028ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028f2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	491a      	ldr	r1, [pc, #104]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800290a:	2b00      	cmp	r3, #0
 800290c:	d011      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800290e:	4b15      	ldr	r3, [pc, #84]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002914:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800291c:	4911      	ldr	r1, [pc, #68]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800292c:	d101      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800292e:	2301      	movs	r3, #1
 8002930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002934:	2b01      	cmp	r3, #1
 8002936:	d005      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002940:	f040 80ff 	bne.w	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002944:	4b09      	ldr	r3, [pc, #36]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800294a:	f7fd fff5 	bl	8000938 <HAL_GetTick>
 800294e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002950:	e00e      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002952:	f7fd fff1 	bl	8000938 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d907      	bls.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e188      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002964:	40023800 	.word	0x40023800
 8002968:	424711e0 	.word	0x424711e0
 800296c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002970:	4b7e      	ldr	r3, [pc, #504]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1ea      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298c:	2b00      	cmp	r3, #0
 800298e:	d009      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002998:	2b00      	cmp	r3, #0
 800299a:	d028      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d124      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80029a4:	4b71      	ldr	r3, [pc, #452]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029aa:	0c1b      	lsrs	r3, r3, #16
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	3301      	adds	r3, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029b6:	4b6d      	ldr	r3, [pc, #436]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029bc:	0e1b      	lsrs	r3, r3, #24
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	019b      	lsls	r3, r3, #6
 80029ce:	431a      	orrs	r2, r3
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	085b      	lsrs	r3, r3, #1
 80029d4:	3b01      	subs	r3, #1
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	431a      	orrs	r2, r3
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	061b      	lsls	r3, r3, #24
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	071b      	lsls	r3, r3, #28
 80029e6:	4961      	ldr	r1, [pc, #388]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d004      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d035      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a18:	d130      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a1a:	4b54      	ldr	r3, [pc, #336]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	3301      	adds	r3, #1
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a2c:	4b4f      	ldr	r3, [pc, #316]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a32:	0f1b      	lsrs	r3, r3, #28
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	019b      	lsls	r3, r3, #6
 8002a44:	431a      	orrs	r2, r3
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	085b      	lsrs	r3, r3, #1
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	041b      	lsls	r3, r3, #16
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	061b      	lsls	r3, r3, #24
 8002a56:	431a      	orrs	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	071b      	lsls	r3, r3, #28
 8002a5c:	4943      	ldr	r1, [pc, #268]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a64:	4b41      	ldr	r3, [pc, #260]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a6a:	f023 021f 	bic.w	r2, r3, #31
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a72:	3b01      	subs	r3, #1
 8002a74:	493d      	ldr	r1, [pc, #244]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d029      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a90:	d124      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a92:	4b36      	ldr	r3, [pc, #216]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002aa4:	4b31      	ldr	r3, [pc, #196]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aaa:	0f1b      	lsrs	r3, r3, #28
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	019b      	lsls	r3, r3, #6
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	085b      	lsrs	r3, r3, #1
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	041b      	lsls	r3, r3, #16
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	061b      	lsls	r3, r3, #24
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	071b      	lsls	r3, r3, #28
 8002ad4:	4925      	ldr	r1, [pc, #148]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d016      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	019b      	lsls	r3, r3, #6
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	085b      	lsrs	r3, r3, #1
 8002afa:	3b01      	subs	r3, #1
 8002afc:	041b      	lsls	r3, r3, #16
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	061b      	lsls	r3, r3, #24
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	071b      	lsls	r3, r3, #28
 8002b0e:	4917      	ldr	r1, [pc, #92]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b16:	4b16      	ldr	r3, [pc, #88]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b1c:	f7fd ff0c 	bl	8000938 <HAL_GetTick>
 8002b20:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b24:	f7fd ff08 	bl	8000938 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e09f      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b36:	4b0d      	ldr	r3, [pc, #52]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	f040 8095 	bne.w	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b50:	f7fd fef2 	bl	8000938 <HAL_GetTick>
 8002b54:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b56:	e00f      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b58:	f7fd feee 	bl	8000938 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d908      	bls.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e085      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	42470068 	.word	0x42470068
 8002b74:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b78:	4b41      	ldr	r3, [pc, #260]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b84:	d0e8      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d02b      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d127      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002bae:	4b34      	ldr	r3, [pc, #208]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699a      	ldr	r2, [r3, #24]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	019b      	lsls	r3, r3, #6
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	085b      	lsrs	r3, r3, #1
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	041b      	lsls	r3, r3, #16
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	061b      	lsls	r3, r3, #24
 8002bdc:	4928      	ldr	r1, [pc, #160]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002be4:	4b26      	ldr	r3, [pc, #152]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bea:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	4922      	ldr	r1, [pc, #136]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d01d      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c12:	d118      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c14:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1a:	0e1b      	lsrs	r3, r3, #24
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	019b      	lsls	r3, r3, #6
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	085b      	lsrs	r3, r3, #1
 8002c34:	3b01      	subs	r3, #1
 8002c36:	041b      	lsls	r3, r3, #16
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	061b      	lsls	r3, r3, #24
 8002c3e:	4910      	ldr	r1, [pc, #64]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c46:	4b0f      	ldr	r3, [pc, #60]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c4c:	f7fd fe74 	bl	8000938 <HAL_GetTick>
 8002c50:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c54:	f7fd fe70 	bl	8000938 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e007      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c66:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c72:	d1ef      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3730      	adds	r7, #48	@ 0x30
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	42470070 	.word	0x42470070

08002c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c8c:	b0ae      	sub	sp, #184	@ 0xb8
 8002c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cae:	4bcb      	ldr	r3, [pc, #812]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	f200 8206 	bhi.w	80030c8 <HAL_RCC_GetSysClockFreq+0x440>
 8002cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002cf9 	.word	0x08002cf9
 8002cc8:	080030c9 	.word	0x080030c9
 8002ccc:	080030c9 	.word	0x080030c9
 8002cd0:	080030c9 	.word	0x080030c9
 8002cd4:	08002d01 	.word	0x08002d01
 8002cd8:	080030c9 	.word	0x080030c9
 8002cdc:	080030c9 	.word	0x080030c9
 8002ce0:	080030c9 	.word	0x080030c9
 8002ce4:	08002d09 	.word	0x08002d09
 8002ce8:	080030c9 	.word	0x080030c9
 8002cec:	080030c9 	.word	0x080030c9
 8002cf0:	080030c9 	.word	0x080030c9
 8002cf4:	08002ef9 	.word	0x08002ef9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4bb9      	ldr	r3, [pc, #740]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002cfe:	e1e7      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d00:	4bb8      	ldr	r3, [pc, #736]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d06:	e1e3      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d08:	4bb4      	ldr	r3, [pc, #720]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d14:	4bb1      	ldr	r3, [pc, #708]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d071      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d20:	4bae      	ldr	r3, [pc, #696]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	099b      	lsrs	r3, r3, #6
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d2c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d46:	4622      	mov	r2, r4
 8002d48:	462b      	mov	r3, r5
 8002d4a:	f04f 0000 	mov.w	r0, #0
 8002d4e:	f04f 0100 	mov.w	r1, #0
 8002d52:	0159      	lsls	r1, r3, #5
 8002d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d58:	0150      	lsls	r0, r2, #5
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4621      	mov	r1, r4
 8002d60:	1a51      	subs	r1, r2, r1
 8002d62:	6439      	str	r1, [r7, #64]	@ 0x40
 8002d64:	4629      	mov	r1, r5
 8002d66:	eb63 0301 	sbc.w	r3, r3, r1
 8002d6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002d78:	4649      	mov	r1, r9
 8002d7a:	018b      	lsls	r3, r1, #6
 8002d7c:	4641      	mov	r1, r8
 8002d7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d82:	4641      	mov	r1, r8
 8002d84:	018a      	lsls	r2, r1, #6
 8002d86:	4641      	mov	r1, r8
 8002d88:	1a51      	subs	r1, r2, r1
 8002d8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d8c:	4649      	mov	r1, r9
 8002d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002da0:	4649      	mov	r1, r9
 8002da2:	00cb      	lsls	r3, r1, #3
 8002da4:	4641      	mov	r1, r8
 8002da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002daa:	4641      	mov	r1, r8
 8002dac:	00ca      	lsls	r2, r1, #3
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	4622      	mov	r2, r4
 8002db6:	189b      	adds	r3, r3, r2
 8002db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dba:	462b      	mov	r3, r5
 8002dbc:	460a      	mov	r2, r1
 8002dbe:	eb42 0303 	adc.w	r3, r2, r3
 8002dc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002dd0:	4629      	mov	r1, r5
 8002dd2:	024b      	lsls	r3, r1, #9
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dda:	4621      	mov	r1, r4
 8002ddc:	024a      	lsls	r2, r1, #9
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002dec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002df0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002df4:	f7fd fa06 	bl	8000204 <__aeabi_uldivmod>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e02:	e067      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e04:	4b75      	ldr	r3, [pc, #468]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	099b      	lsrs	r3, r3, #6
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e10:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002e14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e1e:	2300      	movs	r3, #0
 8002e20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002e26:	4622      	mov	r2, r4
 8002e28:	462b      	mov	r3, r5
 8002e2a:	f04f 0000 	mov.w	r0, #0
 8002e2e:	f04f 0100 	mov.w	r1, #0
 8002e32:	0159      	lsls	r1, r3, #5
 8002e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e38:	0150      	lsls	r0, r2, #5
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4621      	mov	r1, r4
 8002e40:	1a51      	subs	r1, r2, r1
 8002e42:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002e44:	4629      	mov	r1, r5
 8002e46:	eb63 0301 	sbc.w	r3, r3, r1
 8002e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002e58:	4649      	mov	r1, r9
 8002e5a:	018b      	lsls	r3, r1, #6
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e62:	4641      	mov	r1, r8
 8002e64:	018a      	lsls	r2, r1, #6
 8002e66:	4641      	mov	r1, r8
 8002e68:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e86:	4692      	mov	sl, r2
 8002e88:	469b      	mov	fp, r3
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	eb1a 0303 	adds.w	r3, sl, r3
 8002e90:	623b      	str	r3, [r7, #32]
 8002e92:	462b      	mov	r3, r5
 8002e94:	eb4b 0303 	adc.w	r3, fp, r3
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	028b      	lsls	r3, r1, #10
 8002eaa:	4621      	mov	r1, r4
 8002eac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	028a      	lsls	r2, r1, #10
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ec0:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ec2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002ec6:	f7fd f99d 	bl	8000204 <__aeabi_uldivmod>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4613      	mov	r3, r2
 8002ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ed4:	4b41      	ldr	r3, [pc, #260]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002eea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ef6:	e0eb      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef8:	4b38      	ldr	r3, [pc, #224]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f04:	4b35      	ldr	r3, [pc, #212]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d06b      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f10:	4b32      	ldr	r3, [pc, #200]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	2200      	movs	r2, #0
 8002f18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f22:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f24:	2300      	movs	r3, #0
 8002f26:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f28:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002f2c:	4622      	mov	r2, r4
 8002f2e:	462b      	mov	r3, r5
 8002f30:	f04f 0000 	mov.w	r0, #0
 8002f34:	f04f 0100 	mov.w	r1, #0
 8002f38:	0159      	lsls	r1, r3, #5
 8002f3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f3e:	0150      	lsls	r0, r2, #5
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4621      	mov	r1, r4
 8002f46:	1a51      	subs	r1, r2, r1
 8002f48:	61b9      	str	r1, [r7, #24]
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	eb63 0301 	sbc.w	r3, r3, r1
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f5e:	4659      	mov	r1, fp
 8002f60:	018b      	lsls	r3, r1, #6
 8002f62:	4651      	mov	r1, sl
 8002f64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f68:	4651      	mov	r1, sl
 8002f6a:	018a      	lsls	r2, r1, #6
 8002f6c:	4651      	mov	r1, sl
 8002f6e:	ebb2 0801 	subs.w	r8, r2, r1
 8002f72:	4659      	mov	r1, fp
 8002f74:	eb63 0901 	sbc.w	r9, r3, r1
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f8c:	4690      	mov	r8, r2
 8002f8e:	4699      	mov	r9, r3
 8002f90:	4623      	mov	r3, r4
 8002f92:	eb18 0303 	adds.w	r3, r8, r3
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	462b      	mov	r3, r5
 8002f9a:	eb49 0303 	adc.w	r3, r9, r3
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002fac:	4629      	mov	r1, r5
 8002fae:	024b      	lsls	r3, r1, #9
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	024a      	lsls	r2, r1, #9
 8002fba:	4610      	mov	r0, r2
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fc6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002fc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fcc:	f7fd f91a 	bl	8000204 <__aeabi_uldivmod>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fda:	e065      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x420>
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	00f42400 	.word	0x00f42400
 8002fe4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	2200      	movs	r2, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ff8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ffe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003002:	4642      	mov	r2, r8
 8003004:	464b      	mov	r3, r9
 8003006:	f04f 0000 	mov.w	r0, #0
 800300a:	f04f 0100 	mov.w	r1, #0
 800300e:	0159      	lsls	r1, r3, #5
 8003010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003014:	0150      	lsls	r0, r2, #5
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4641      	mov	r1, r8
 800301c:	1a51      	subs	r1, r2, r1
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	4649      	mov	r1, r9
 8003022:	eb63 0301 	sbc.w	r3, r3, r1
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003034:	4659      	mov	r1, fp
 8003036:	018b      	lsls	r3, r1, #6
 8003038:	4651      	mov	r1, sl
 800303a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800303e:	4651      	mov	r1, sl
 8003040:	018a      	lsls	r2, r1, #6
 8003042:	4651      	mov	r1, sl
 8003044:	1a54      	subs	r4, r2, r1
 8003046:	4659      	mov	r1, fp
 8003048:	eb63 0501 	sbc.w	r5, r3, r1
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	00eb      	lsls	r3, r5, #3
 8003056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800305a:	00e2      	lsls	r2, r4, #3
 800305c:	4614      	mov	r4, r2
 800305e:	461d      	mov	r5, r3
 8003060:	4643      	mov	r3, r8
 8003062:	18e3      	adds	r3, r4, r3
 8003064:	603b      	str	r3, [r7, #0]
 8003066:	464b      	mov	r3, r9
 8003068:	eb45 0303 	adc.w	r3, r5, r3
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	e9d7 4500 	ldrd	r4, r5, [r7]
 800307a:	4629      	mov	r1, r5
 800307c:	028b      	lsls	r3, r1, #10
 800307e:	4621      	mov	r1, r4
 8003080:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003084:	4621      	mov	r1, r4
 8003086:	028a      	lsls	r2, r1, #10
 8003088:	4610      	mov	r0, r2
 800308a:	4619      	mov	r1, r3
 800308c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003090:	2200      	movs	r2, #0
 8003092:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003094:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003096:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800309a:	f7fd f8b3 	bl	8000204 <__aeabi_uldivmod>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4613      	mov	r3, r2
 80030a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80030a8:	4b0d      	ldr	r3, [pc, #52]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	0f1b      	lsrs	r3, r3, #28
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80030b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030be:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030c6:	e003      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030c8:	4b06      	ldr	r3, [pc, #24]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80030ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	37b8      	adds	r7, #184	@ 0xb8
 80030d8:	46bd      	mov	sp, r7
 80030da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	00f42400 	.word	0x00f42400

080030e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e28d      	b.n	8003616 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 8083 	beq.w	800320e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003108:	4b94      	ldr	r3, [pc, #592]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b04      	cmp	r3, #4
 8003112:	d019      	beq.n	8003148 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003114:	4b91      	ldr	r3, [pc, #580]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800311c:	2b08      	cmp	r3, #8
 800311e:	d106      	bne.n	800312e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003120:	4b8e      	ldr	r3, [pc, #568]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003128:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800312c:	d00c      	beq.n	8003148 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312e:	4b8b      	ldr	r3, [pc, #556]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003136:	2b0c      	cmp	r3, #12
 8003138:	d112      	bne.n	8003160 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800313a:	4b88      	ldr	r3, [pc, #544]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003142:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003146:	d10b      	bne.n	8003160 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	4b84      	ldr	r3, [pc, #528]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d05b      	beq.n	800320c <HAL_RCC_OscConfig+0x124>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d157      	bne.n	800320c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e25a      	b.n	8003616 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003168:	d106      	bne.n	8003178 <HAL_RCC_OscConfig+0x90>
 800316a:	4b7c      	ldr	r3, [pc, #496]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a7b      	ldr	r2, [pc, #492]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e01d      	b.n	80031b4 <HAL_RCC_OscConfig+0xcc>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003180:	d10c      	bne.n	800319c <HAL_RCC_OscConfig+0xb4>
 8003182:	4b76      	ldr	r3, [pc, #472]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a75      	ldr	r2, [pc, #468]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 8003188:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	4b73      	ldr	r3, [pc, #460]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a72      	ldr	r2, [pc, #456]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e00b      	b.n	80031b4 <HAL_RCC_OscConfig+0xcc>
 800319c:	4b6f      	ldr	r3, [pc, #444]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a6e      	ldr	r2, [pc, #440]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 80031a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	4b6c      	ldr	r3, [pc, #432]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a6b      	ldr	r2, [pc, #428]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 80031ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d013      	beq.n	80031e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031bc:	f7fd fbbc 	bl	8000938 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c4:	f7fd fbb8 	bl	8000938 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b64      	cmp	r3, #100	@ 0x64
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e21f      	b.n	8003616 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b61      	ldr	r3, [pc, #388]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCC_OscConfig+0xdc>
 80031e2:	e014      	b.n	800320e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fd fba8 	bl	8000938 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fd fba4 	bl	8000938 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	@ 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e20b      	b.n	8003616 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fe:	4b57      	ldr	r3, [pc, #348]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x104>
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d06f      	beq.n	80032fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800321a:	4b50      	ldr	r3, [pc, #320]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b00      	cmp	r3, #0
 8003224:	d017      	beq.n	8003256 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003226:	4b4d      	ldr	r3, [pc, #308]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800322e:	2b08      	cmp	r3, #8
 8003230:	d105      	bne.n	800323e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003232:	4b4a      	ldr	r3, [pc, #296]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323e:	4b47      	ldr	r3, [pc, #284]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003246:	2b0c      	cmp	r3, #12
 8003248:	d11c      	bne.n	8003284 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324a:	4b44      	ldr	r3, [pc, #272]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d116      	bne.n	8003284 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003256:	4b41      	ldr	r3, [pc, #260]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_RCC_OscConfig+0x186>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e1d3      	b.n	8003616 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326e:	4b3b      	ldr	r3, [pc, #236]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4937      	ldr	r1, [pc, #220]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003282:	e03a      	b.n	80032fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d020      	beq.n	80032ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800328c:	4b34      	ldr	r3, [pc, #208]	@ (8003360 <HAL_RCC_OscConfig+0x278>)
 800328e:	2201      	movs	r2, #1
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003292:	f7fd fb51 	bl	8000938 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800329a:	f7fd fb4d 	bl	8000938 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e1b4      	b.n	8003616 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ac:	4b2b      	ldr	r3, [pc, #172]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b8:	4b28      	ldr	r3, [pc, #160]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4925      	ldr	r1, [pc, #148]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]
 80032cc:	e015      	b.n	80032fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ce:	4b24      	ldr	r3, [pc, #144]	@ (8003360 <HAL_RCC_OscConfig+0x278>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fd fb30 	bl	8000938 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032dc:	f7fd fb2c 	bl	8000938 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e193      	b.n	8003616 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	4b1b      	ldr	r3, [pc, #108]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d036      	beq.n	8003374 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800330e:	4b15      	ldr	r3, [pc, #84]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7fd fb10 	bl	8000938 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800331c:	f7fd fb0c 	bl	8000938 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e173      	b.n	8003616 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332e:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <HAL_RCC_OscConfig+0x274>)
 8003330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x234>
 800333a:	e01b      	b.n	8003374 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800333c:	4b09      	ldr	r3, [pc, #36]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003342:	f7fd faf9 	bl	8000938 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003348:	e00e      	b.n	8003368 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800334a:	f7fd faf5 	bl	8000938 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d907      	bls.n	8003368 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e15c      	b.n	8003616 <HAL_RCC_OscConfig+0x52e>
 800335c:	40023800 	.word	0x40023800
 8003360:	42470000 	.word	0x42470000
 8003364:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003368:	4b8a      	ldr	r3, [pc, #552]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 800336a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ea      	bne.n	800334a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8097 	beq.w	80034b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003382:	2300      	movs	r3, #0
 8003384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003386:	4b83      	ldr	r3, [pc, #524]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10f      	bne.n	80033b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	4b7f      	ldr	r3, [pc, #508]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	4a7e      	ldr	r2, [pc, #504]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 800339c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ae:	2301      	movs	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b2:	4b79      	ldr	r3, [pc, #484]	@ (8003598 <HAL_RCC_OscConfig+0x4b0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d118      	bne.n	80033f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033be:	4b76      	ldr	r3, [pc, #472]	@ (8003598 <HAL_RCC_OscConfig+0x4b0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a75      	ldr	r2, [pc, #468]	@ (8003598 <HAL_RCC_OscConfig+0x4b0>)
 80033c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ca:	f7fd fab5 	bl	8000938 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d2:	f7fd fab1 	bl	8000938 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e118      	b.n	8003616 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003598 <HAL_RCC_OscConfig+0x4b0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d106      	bne.n	8003406 <HAL_RCC_OscConfig+0x31e>
 80033f8:	4b66      	ldr	r3, [pc, #408]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fc:	4a65      	ldr	r2, [pc, #404]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	6713      	str	r3, [r2, #112]	@ 0x70
 8003404:	e01c      	b.n	8003440 <HAL_RCC_OscConfig+0x358>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b05      	cmp	r3, #5
 800340c:	d10c      	bne.n	8003428 <HAL_RCC_OscConfig+0x340>
 800340e:	4b61      	ldr	r3, [pc, #388]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003412:	4a60      	ldr	r2, [pc, #384]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 8003414:	f043 0304 	orr.w	r3, r3, #4
 8003418:	6713      	str	r3, [r2, #112]	@ 0x70
 800341a:	4b5e      	ldr	r3, [pc, #376]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341e:	4a5d      	ldr	r2, [pc, #372]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	6713      	str	r3, [r2, #112]	@ 0x70
 8003426:	e00b      	b.n	8003440 <HAL_RCC_OscConfig+0x358>
 8003428:	4b5a      	ldr	r3, [pc, #360]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342c:	4a59      	ldr	r2, [pc, #356]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	6713      	str	r3, [r2, #112]	@ 0x70
 8003434:	4b57      	ldr	r3, [pc, #348]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003438:	4a56      	ldr	r2, [pc, #344]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 800343a:	f023 0304 	bic.w	r3, r3, #4
 800343e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d015      	beq.n	8003474 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7fd fa76 	bl	8000938 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344e:	e00a      	b.n	8003466 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003450:	f7fd fa72 	bl	8000938 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e0d7      	b.n	8003616 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003466:	4b4b      	ldr	r3, [pc, #300]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0ee      	beq.n	8003450 <HAL_RCC_OscConfig+0x368>
 8003472:	e014      	b.n	800349e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003474:	f7fd fa60 	bl	8000938 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800347a:	e00a      	b.n	8003492 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347c:	f7fd fa5c 	bl	8000938 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0c1      	b.n	8003616 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003492:	4b40      	ldr	r3, [pc, #256]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1ee      	bne.n	800347c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800349e:	7dfb      	ldrb	r3, [r7, #23]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d105      	bne.n	80034b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 80034aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80ad 	beq.w	8003614 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ba:	4b36      	ldr	r3, [pc, #216]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d060      	beq.n	8003588 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d145      	bne.n	800355a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ce:	4b33      	ldr	r3, [pc, #204]	@ (800359c <HAL_RCC_OscConfig+0x4b4>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fd fa30 	bl	8000938 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fd fa2c 	bl	8000938 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e093      	b.n	8003616 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	4b29      	ldr	r3, [pc, #164]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	019b      	lsls	r3, r3, #6
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003510:	085b      	lsrs	r3, r3, #1
 8003512:	3b01      	subs	r3, #1
 8003514:	041b      	lsls	r3, r3, #16
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351c:	061b      	lsls	r3, r3, #24
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003524:	071b      	lsls	r3, r3, #28
 8003526:	491b      	ldr	r1, [pc, #108]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 8003528:	4313      	orrs	r3, r2
 800352a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800352c:	4b1b      	ldr	r3, [pc, #108]	@ (800359c <HAL_RCC_OscConfig+0x4b4>)
 800352e:	2201      	movs	r2, #1
 8003530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003532:	f7fd fa01 	bl	8000938 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800353a:	f7fd f9fd 	bl	8000938 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e064      	b.n	8003616 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354c:	4b11      	ldr	r3, [pc, #68]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x452>
 8003558:	e05c      	b.n	8003614 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355a:	4b10      	ldr	r3, [pc, #64]	@ (800359c <HAL_RCC_OscConfig+0x4b4>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fd f9ea 	bl	8000938 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003568:	f7fd f9e6 	bl	8000938 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e04d      	b.n	8003616 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357a:	4b06      	ldr	r3, [pc, #24]	@ (8003594 <HAL_RCC_OscConfig+0x4ac>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x480>
 8003586:	e045      	b.n	8003614 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d107      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e040      	b.n	8003616 <HAL_RCC_OscConfig+0x52e>
 8003594:	40023800 	.word	0x40023800
 8003598:	40007000 	.word	0x40007000
 800359c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003620 <HAL_RCC_OscConfig+0x538>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d030      	beq.n	8003610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d129      	bne.n	8003610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d122      	bne.n	8003610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035d0:	4013      	ands	r3, r2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d8:	4293      	cmp	r3, r2
 80035da:	d119      	bne.n	8003610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e6:	085b      	lsrs	r3, r3, #1
 80035e8:	3b01      	subs	r3, #1
 80035ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d10f      	bne.n	8003610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d107      	bne.n	8003610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800

08003624 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003624:	b084      	sub	sp, #16
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	f107 001c 	add.w	r0, r7, #28
 8003632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003636:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800363a:	2b01      	cmp	r3, #1
 800363c:	d123      	bne.n	8003686 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003642:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003666:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800366a:	2b01      	cmp	r3, #1
 800366c:	d105      	bne.n	800367a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f001 fadc 	bl	8004c38 <USB_CoreReset>
 8003680:	4603      	mov	r3, r0
 8003682:	73fb      	strb	r3, [r7, #15]
 8003684:	e01b      	b.n	80036be <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f001 fad0 	bl	8004c38 <USB_CoreReset>
 8003698:	4603      	mov	r3, r0
 800369a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800369c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d106      	bne.n	80036b2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80036b0:	e005      	b.n	80036be <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036be:	7fbb      	ldrb	r3, [r7, #30]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d10b      	bne.n	80036dc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f043 0206 	orr.w	r2, r3, #6
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f043 0220 	orr.w	r2, r3, #32
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036e8:	b004      	add	sp, #16
 80036ea:	4770      	bx	lr

080036ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d165      	bne.n	80037cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4a41      	ldr	r2, [pc, #260]	@ (8003808 <USB_SetTurnaroundTime+0x11c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d906      	bls.n	8003716 <USB_SetTurnaroundTime+0x2a>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4a40      	ldr	r2, [pc, #256]	@ (800380c <USB_SetTurnaroundTime+0x120>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d202      	bcs.n	8003716 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003710:	230f      	movs	r3, #15
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	e062      	b.n	80037dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	4a3c      	ldr	r2, [pc, #240]	@ (800380c <USB_SetTurnaroundTime+0x120>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d306      	bcc.n	800372c <USB_SetTurnaroundTime+0x40>
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4a3b      	ldr	r2, [pc, #236]	@ (8003810 <USB_SetTurnaroundTime+0x124>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d202      	bcs.n	800372c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003726:	230e      	movs	r3, #14
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	e057      	b.n	80037dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4a38      	ldr	r2, [pc, #224]	@ (8003810 <USB_SetTurnaroundTime+0x124>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d306      	bcc.n	8003742 <USB_SetTurnaroundTime+0x56>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4a37      	ldr	r2, [pc, #220]	@ (8003814 <USB_SetTurnaroundTime+0x128>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d202      	bcs.n	8003742 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800373c:	230d      	movs	r3, #13
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	e04c      	b.n	80037dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4a33      	ldr	r2, [pc, #204]	@ (8003814 <USB_SetTurnaroundTime+0x128>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d306      	bcc.n	8003758 <USB_SetTurnaroundTime+0x6c>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	4a32      	ldr	r2, [pc, #200]	@ (8003818 <USB_SetTurnaroundTime+0x12c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d802      	bhi.n	8003758 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003752:	230c      	movs	r3, #12
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e041      	b.n	80037dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4a2f      	ldr	r2, [pc, #188]	@ (8003818 <USB_SetTurnaroundTime+0x12c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d906      	bls.n	800376e <USB_SetTurnaroundTime+0x82>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4a2e      	ldr	r2, [pc, #184]	@ (800381c <USB_SetTurnaroundTime+0x130>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d802      	bhi.n	800376e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003768:	230b      	movs	r3, #11
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	e036      	b.n	80037dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4a2a      	ldr	r2, [pc, #168]	@ (800381c <USB_SetTurnaroundTime+0x130>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d906      	bls.n	8003784 <USB_SetTurnaroundTime+0x98>
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4a29      	ldr	r2, [pc, #164]	@ (8003820 <USB_SetTurnaroundTime+0x134>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d802      	bhi.n	8003784 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800377e:	230a      	movs	r3, #10
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	e02b      	b.n	80037dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4a26      	ldr	r2, [pc, #152]	@ (8003820 <USB_SetTurnaroundTime+0x134>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d906      	bls.n	800379a <USB_SetTurnaroundTime+0xae>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4a25      	ldr	r2, [pc, #148]	@ (8003824 <USB_SetTurnaroundTime+0x138>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d202      	bcs.n	800379a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003794:	2309      	movs	r3, #9
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	e020      	b.n	80037dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4a21      	ldr	r2, [pc, #132]	@ (8003824 <USB_SetTurnaroundTime+0x138>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d306      	bcc.n	80037b0 <USB_SetTurnaroundTime+0xc4>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	4a20      	ldr	r2, [pc, #128]	@ (8003828 <USB_SetTurnaroundTime+0x13c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d802      	bhi.n	80037b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80037aa:	2308      	movs	r3, #8
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	e015      	b.n	80037dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003828 <USB_SetTurnaroundTime+0x13c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d906      	bls.n	80037c6 <USB_SetTurnaroundTime+0xda>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4a1c      	ldr	r2, [pc, #112]	@ (800382c <USB_SetTurnaroundTime+0x140>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d202      	bcs.n	80037c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80037c0:	2307      	movs	r3, #7
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	e00a      	b.n	80037dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80037c6:	2306      	movs	r3, #6
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e007      	b.n	80037dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d102      	bne.n	80037d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80037d2:	2309      	movs	r3, #9
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	e001      	b.n	80037dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80037d8:	2309      	movs	r3, #9
 80037da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	029b      	lsls	r3, r3, #10
 80037f0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80037f4:	431a      	orrs	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	00d8acbf 	.word	0x00d8acbf
 800380c:	00e4e1c0 	.word	0x00e4e1c0
 8003810:	00f42400 	.word	0x00f42400
 8003814:	01067380 	.word	0x01067380
 8003818:	011a499f 	.word	0x011a499f
 800381c:	01312cff 	.word	0x01312cff
 8003820:	014ca43f 	.word	0x014ca43f
 8003824:	016e3600 	.word	0x016e3600
 8003828:	01a6ab1f 	.word	0x01a6ab1f
 800382c:	01e84800 	.word	0x01e84800

08003830 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f043 0201 	orr.w	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f023 0201 	bic.w	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d115      	bne.n	80038c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80038a2:	200a      	movs	r0, #10
 80038a4:	f7fd f854 	bl	8000950 <HAL_Delay>
      ms += 10U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	330a      	adds	r3, #10
 80038ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f001 f933 	bl	8004b1a <USB_GetMode>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d01e      	beq.n	80038f8 <USB_SetCurrentMode+0x84>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80038be:	d9f0      	bls.n	80038a2 <USB_SetCurrentMode+0x2e>
 80038c0:	e01a      	b.n	80038f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d115      	bne.n	80038f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80038d4:	200a      	movs	r0, #10
 80038d6:	f7fd f83b 	bl	8000950 <HAL_Delay>
      ms += 10U;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	330a      	adds	r3, #10
 80038de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f001 f91a 	bl	8004b1a <USB_GetMode>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <USB_SetCurrentMode+0x84>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2bc7      	cmp	r3, #199	@ 0xc7
 80038f0:	d9f0      	bls.n	80038d4 <USB_SetCurrentMode+0x60>
 80038f2:	e001      	b.n	80038f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e005      	b.n	8003904 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2bc8      	cmp	r3, #200	@ 0xc8
 80038fc:	d101      	bne.n	8003902 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800390c:	b084      	sub	sp, #16
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800391a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	e009      	b.n	8003940 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	3340      	adds	r3, #64	@ 0x40
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	2200      	movs	r2, #0
 8003938:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	3301      	adds	r3, #1
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	2b0e      	cmp	r3, #14
 8003944:	d9f2      	bls.n	800392c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003946:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800394a:	2b00      	cmp	r3, #0
 800394c:	d11c      	bne.n	8003988 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800395c:	f043 0302 	orr.w	r3, r3, #2
 8003960:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003966:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	e005      	b.n	8003994 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800399a:	461a      	mov	r2, r3
 800399c:	2300      	movs	r3, #0
 800399e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d10d      	bne.n	80039c4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d104      	bne.n	80039ba <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039b0:	2100      	movs	r1, #0
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f968 	bl	8003c88 <USB_SetDevSpeed>
 80039b8:	e008      	b.n	80039cc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039ba:	2101      	movs	r1, #1
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f963 	bl	8003c88 <USB_SetDevSpeed>
 80039c2:	e003      	b.n	80039cc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039c4:	2103      	movs	r1, #3
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f95e 	bl	8003c88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039cc:	2110      	movs	r1, #16
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8fa 	bl	8003bc8 <USB_FlushTxFifo>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f924 	bl	8003c2c <USB_FlushRxFifo>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039f4:	461a      	mov	r2, r3
 80039f6:	2300      	movs	r3, #0
 80039f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a00:	461a      	mov	r2, r3
 8003a02:	2300      	movs	r3, #0
 8003a04:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	e043      	b.n	8003aa0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a2e:	d118      	bne.n	8003a62 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10a      	bne.n	8003a4c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a42:	461a      	mov	r2, r3
 8003a44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e013      	b.n	8003a74 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	e008      	b.n	8003a74 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2300      	movs	r3, #0
 8003a72:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a80:	461a      	mov	r2, r3
 8003a82:	2300      	movs	r3, #0
 8003a84:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a92:	461a      	mov	r2, r3
 8003a94:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d3b5      	bcc.n	8003a18 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aac:	2300      	movs	r3, #0
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	e043      	b.n	8003b3a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ac8:	d118      	bne.n	8003afc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003adc:	461a      	mov	r2, r3
 8003ade:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	e013      	b.n	8003b0e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af2:	461a      	mov	r2, r3
 8003af4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e008      	b.n	8003b0e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b08:	461a      	mov	r2, r3
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	3301      	adds	r3, #1
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b3e:	461a      	mov	r2, r3
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d3b5      	bcc.n	8003ab2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b58:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003b66:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f043 0210 	orr.w	r2, r3, #16
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699a      	ldr	r2, [r3, #24]
 8003b80:	4b10      	ldr	r3, [pc, #64]	@ (8003bc4 <USB_DevInit+0x2b8>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	f043 0208 	orr.w	r2, r3, #8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d107      	bne.n	8003bb4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003bac:	f043 0304 	orr.w	r3, r3, #4
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bc0:	b004      	add	sp, #16
 8003bc2:	4770      	bx	lr
 8003bc4:	803c3800 	.word	0x803c3800

08003bc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003be2:	d901      	bls.n	8003be8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e01b      	b.n	8003c20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	daf2      	bge.n	8003bd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	019b      	lsls	r3, r3, #6
 8003bf8:	f043 0220 	orr.w	r2, r3, #32
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3301      	adds	r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c0c:	d901      	bls.n	8003c12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e006      	b.n	8003c20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d0f0      	beq.n	8003c00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c44:	d901      	bls.n	8003c4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e018      	b.n	8003c7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	daf2      	bge.n	8003c38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2210      	movs	r2, #16
 8003c5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c68:	d901      	bls.n	8003c6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e006      	b.n	8003c7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b10      	cmp	r3, #16
 8003c78:	d0f0      	beq.n	8003c5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	68f9      	ldr	r1, [r7, #12]
 8003ca4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b087      	sub	sp, #28
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0306 	and.w	r3, r3, #6
 8003cd2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d102      	bne.n	8003ce0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	75fb      	strb	r3, [r7, #23]
 8003cde:	e00a      	b.n	8003cf6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d002      	beq.n	8003cec <USB_GetDevSpeed+0x32>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b06      	cmp	r3, #6
 8003cea:	d102      	bne.n	8003cf2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003cec:	2302      	movs	r3, #2
 8003cee:	75fb      	strb	r3, [r7, #23]
 8003cf0:	e001      	b.n	8003cf6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003cf2:	230f      	movs	r3, #15
 8003cf4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	785b      	ldrb	r3, [r3, #1]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d13a      	bne.n	8003d96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	2101      	movs	r1, #1
 8003d32:	fa01 f303 	lsl.w	r3, r1, r3
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	68f9      	ldr	r1, [r7, #12]
 8003d3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d155      	bne.n	8003e04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	791b      	ldrb	r3, [r3, #4]
 8003d72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	059b      	lsls	r3, r3, #22
 8003d7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	0151      	lsls	r1, r2, #5
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	440a      	add	r2, r1
 8003d86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	e036      	b.n	8003e04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d9c:	69da      	ldr	r2, [r3, #28]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	2101      	movs	r1, #1
 8003da8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	68f9      	ldr	r1, [r7, #12]
 8003db0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d11a      	bne.n	8003e04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	791b      	ldrb	r3, [r3, #4]
 8003de8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003dea:	430b      	orrs	r3, r1
 8003dec:	4313      	orrs	r3, r2
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	0151      	lsls	r1, r2, #5
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	440a      	add	r2, r1
 8003df6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	785b      	ldrb	r3, [r3, #1]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d161      	bne.n	8003ef4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e46:	d11f      	bne.n	8003e88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	0151      	lsls	r1, r2, #5
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	f003 030f 	and.w	r3, r3, #15
 8003e98:	2101      	movs	r1, #1
 8003e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	68f9      	ldr	r1, [r7, #12]
 8003ea4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eb2:	69da      	ldr	r2, [r3, #28]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	68f9      	ldr	r1, [r7, #12]
 8003ec8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	0159      	lsls	r1, r3, #5
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	440b      	add	r3, r1
 8003ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eea:	4619      	mov	r1, r3
 8003eec:	4b35      	ldr	r3, [pc, #212]	@ (8003fc4 <USB_DeactivateEndpoint+0x1b0>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]
 8003ef2:	e060      	b.n	8003fb6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f0a:	d11f      	bne.n	8003f4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	0151      	lsls	r1, r2, #5
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	440a      	add	r2, r1
 8003f22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	0151      	lsls	r1, r2, #5
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	440a      	add	r2, r1
 8003f42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f62:	041b      	lsls	r3, r3, #16
 8003f64:	43db      	mvns	r3, r3
 8003f66:	68f9      	ldr	r1, [r7, #12]
 8003f68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	2101      	movs	r1, #1
 8003f82:	fa01 f303 	lsl.w	r3, r1, r3
 8003f86:	041b      	lsls	r3, r3, #16
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	68f9      	ldr	r1, [r7, #12]
 8003f8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f90:	4013      	ands	r3, r2
 8003f92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	0159      	lsls	r1, r3, #5
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	440b      	add	r3, r1
 8003faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4b05      	ldr	r3, [pc, #20]	@ (8003fc8 <USB_DeactivateEndpoint+0x1b4>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	ec337800 	.word	0xec337800
 8003fc8:	eff37800 	.word	0xeff37800

08003fcc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	@ 0x28
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	785b      	ldrb	r3, [r3, #1]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	f040 817a 	bne.w	80042e2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d132      	bne.n	800405c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	0151      	lsls	r1, r2, #5
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	440a      	add	r2, r1
 800400c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004010:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004014:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004018:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	4413      	add	r3, r2
 8004022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	0151      	lsls	r1, r2, #5
 800402c:	69fa      	ldr	r2, [r7, #28]
 800402e:	440a      	add	r2, r1
 8004030:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004034:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004038:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	4413      	add	r3, r2
 8004042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	0151      	lsls	r1, r2, #5
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	440a      	add	r2, r1
 8004050:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004054:	0cdb      	lsrs	r3, r3, #19
 8004056:	04db      	lsls	r3, r3, #19
 8004058:	6113      	str	r3, [r2, #16]
 800405a:	e092      	b.n	8004182 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	0151      	lsls	r1, r2, #5
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	440a      	add	r2, r1
 8004072:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004076:	0cdb      	lsrs	r3, r3, #19
 8004078:	04db      	lsls	r3, r3, #19
 800407a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	0151      	lsls	r1, r2, #5
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	440a      	add	r2, r1
 8004092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004096:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800409a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800409e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d11a      	bne.n	80040dc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d903      	bls.n	80040ba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	0151      	lsls	r1, r2, #5
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	440a      	add	r2, r1
 80040d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80040d8:	6113      	str	r3, [r2, #16]
 80040da:	e01b      	b.n	8004114 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040e8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	6919      	ldr	r1, [r3, #16]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	440b      	add	r3, r1
 80040f4:	1e59      	subs	r1, r3, #1
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80040fe:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004100:	4ba2      	ldr	r3, [pc, #648]	@ (800438c <USB_EPStartXfer+0x3c0>)
 8004102:	400b      	ands	r3, r1
 8004104:	69b9      	ldr	r1, [r7, #24]
 8004106:	0148      	lsls	r0, r1, #5
 8004108:	69f9      	ldr	r1, [r7, #28]
 800410a:	4401      	add	r1, r0
 800410c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004110:	4313      	orrs	r3, r2
 8004112:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412a:	69b9      	ldr	r1, [r7, #24]
 800412c:	0148      	lsls	r0, r1, #5
 800412e:	69f9      	ldr	r1, [r7, #28]
 8004130:	4401      	add	r1, r0
 8004132:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004136:	4313      	orrs	r3, r2
 8004138:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	791b      	ldrb	r3, [r3, #4]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d11f      	bne.n	8004182 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	0151      	lsls	r1, r2, #5
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	440a      	add	r2, r1
 8004158:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800415c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004160:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	440a      	add	r2, r1
 8004178:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800417c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004180:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d14b      	bne.n	8004220 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d009      	beq.n	80041a4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800419c:	461a      	mov	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	791b      	ldrb	r3, [r3, #4]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d128      	bne.n	80041fe <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d110      	bne.n	80041de <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	0151      	lsls	r1, r2, #5
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	440a      	add	r2, r1
 80041d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	e00f      	b.n	80041fe <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	0151      	lsls	r1, r2, #5
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	440a      	add	r2, r1
 8004214:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004218:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e165      	b.n	80044ec <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	0151      	lsls	r1, r2, #5
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	440a      	add	r2, r1
 8004236:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800423a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800423e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	791b      	ldrb	r3, [r3, #4]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d015      	beq.n	8004274 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 814d 	beq.w	80044ec <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	2101      	movs	r1, #1
 8004264:	fa01 f303 	lsl.w	r3, r1, r3
 8004268:	69f9      	ldr	r1, [r7, #28]
 800426a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800426e:	4313      	orrs	r3, r2
 8004270:	634b      	str	r3, [r1, #52]	@ 0x34
 8004272:	e13b      	b.n	80044ec <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004280:	2b00      	cmp	r3, #0
 8004282:	d110      	bne.n	80042a6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	0151      	lsls	r1, r2, #5
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	440a      	add	r2, r1
 800429a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800429e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	e00f      	b.n	80042c6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	0151      	lsls	r1, r2, #5
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	440a      	add	r2, r1
 80042bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	68d9      	ldr	r1, [r3, #12]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	781a      	ldrb	r2, [r3, #0]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	b298      	uxth	r0, r3
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	4603      	mov	r3, r0
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f9b8 	bl	8004650 <USB_WritePacket>
 80042e0:	e104      	b.n	80044ec <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	0151      	lsls	r1, r2, #5
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	440a      	add	r2, r1
 80042f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042fc:	0cdb      	lsrs	r3, r3, #19
 80042fe:	04db      	lsls	r3, r3, #19
 8004300:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	0151      	lsls	r1, r2, #5
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	440a      	add	r2, r1
 8004318:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800431c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004320:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004324:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d131      	bne.n	8004390 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435a:	69b9      	ldr	r1, [r7, #24]
 800435c:	0148      	lsls	r0, r1, #5
 800435e:	69f9      	ldr	r1, [r7, #28]
 8004360:	4401      	add	r1, r0
 8004362:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004366:	4313      	orrs	r3, r2
 8004368:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	0151      	lsls	r1, r2, #5
 800437c:	69fa      	ldr	r2, [r7, #28]
 800437e:	440a      	add	r2, r1
 8004380:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004384:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004388:	6113      	str	r3, [r2, #16]
 800438a:	e061      	b.n	8004450 <USB_EPStartXfer+0x484>
 800438c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d123      	bne.n	80043e0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ae:	69b9      	ldr	r1, [r7, #24]
 80043b0:	0148      	lsls	r0, r1, #5
 80043b2:	69f9      	ldr	r1, [r7, #28]
 80043b4:	4401      	add	r1, r0
 80043b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043ba:	4313      	orrs	r3, r2
 80043bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	0151      	lsls	r1, r2, #5
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	440a      	add	r2, r1
 80043d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043dc:	6113      	str	r3, [r2, #16]
 80043de:	e037      	b.n	8004450 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	4413      	add	r3, r2
 80043ea:	1e5a      	subs	r2, r3, #1
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	8afa      	ldrh	r2, [r7, #22]
 80043fc:	fb03 f202 	mul.w	r2, r3, r2
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	8afb      	ldrh	r3, [r7, #22]
 8004414:	04d9      	lsls	r1, r3, #19
 8004416:	4b38      	ldr	r3, [pc, #224]	@ (80044f8 <USB_EPStartXfer+0x52c>)
 8004418:	400b      	ands	r3, r1
 800441a:	69b9      	ldr	r1, [r7, #24]
 800441c:	0148      	lsls	r0, r1, #5
 800441e:	69f9      	ldr	r1, [r7, #28]
 8004420:	4401      	add	r1, r0
 8004422:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004426:	4313      	orrs	r3, r2
 8004428:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004440:	69b9      	ldr	r1, [r7, #24]
 8004442:	0148      	lsls	r0, r1, #5
 8004444:	69f9      	ldr	r1, [r7, #28]
 8004446:	4401      	add	r1, r0
 8004448:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800444c:	4313      	orrs	r3, r2
 800444e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d10d      	bne.n	8004472 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	68d9      	ldr	r1, [r3, #12]
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446e:	460a      	mov	r2, r1
 8004470:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	791b      	ldrb	r3, [r3, #4]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d128      	bne.n	80044cc <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d110      	bne.n	80044ac <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e00f      	b.n	80044cc <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	0151      	lsls	r1, r2, #5
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	440a      	add	r2, r1
 80044c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	0151      	lsls	r1, r2, #5
 80044de:	69fa      	ldr	r2, [r7, #28]
 80044e0:	440a      	add	r2, r1
 80044e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80044ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3720      	adds	r7, #32
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	1ff80000 	.word	0x1ff80000

080044fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	785b      	ldrb	r3, [r3, #1]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d14a      	bne.n	80045b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800452e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004532:	f040 8086 	bne.w	8004642 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	7812      	ldrb	r2, [r2, #0]
 800454a:	0151      	lsls	r1, r2, #5
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	440a      	add	r2, r1
 8004550:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004554:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004558:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	7812      	ldrb	r2, [r2, #0]
 800456e:	0151      	lsls	r1, r2, #5
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	440a      	add	r2, r1
 8004574:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004578:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800457c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3301      	adds	r3, #1
 8004582:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f242 7210 	movw	r2, #10000	@ 0x2710
 800458a:	4293      	cmp	r3, r2
 800458c:	d902      	bls.n	8004594 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	75fb      	strb	r3, [r7, #23]
          break;
 8004592:	e056      	b.n	8004642 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045ac:	d0e7      	beq.n	800457e <USB_EPStopXfer+0x82>
 80045ae:	e048      	b.n	8004642 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045c8:	d13b      	bne.n	8004642 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	7812      	ldrb	r2, [r2, #0]
 80045de:	0151      	lsls	r1, r2, #5
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	440a      	add	r2, r1
 80045e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80045ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	7812      	ldrb	r2, [r2, #0]
 8004602:	0151      	lsls	r1, r2, #5
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	440a      	add	r2, r1
 8004608:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800460c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004610:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3301      	adds	r3, #1
 8004616:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800461e:	4293      	cmp	r3, r2
 8004620:	d902      	bls.n	8004628 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	75fb      	strb	r3, [r7, #23]
          break;
 8004626:	e00c      	b.n	8004642 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800463c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004640:	d0e7      	beq.n	8004612 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004642:	7dfb      	ldrb	r3, [r7, #23]
}
 8004644:	4618      	mov	r0, r3
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004650:	b480      	push	{r7}
 8004652:	b089      	sub	sp, #36	@ 0x24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	4611      	mov	r1, r2
 800465c:	461a      	mov	r2, r3
 800465e:	460b      	mov	r3, r1
 8004660:	71fb      	strb	r3, [r7, #7]
 8004662:	4613      	mov	r3, r2
 8004664:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800466e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004672:	2b00      	cmp	r3, #0
 8004674:	d123      	bne.n	80046be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004676:	88bb      	ldrh	r3, [r7, #4]
 8004678:	3303      	adds	r3, #3
 800467a:	089b      	lsrs	r3, r3, #2
 800467c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800467e:	2300      	movs	r3, #0
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	e018      	b.n	80046b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	031a      	lsls	r2, r3, #12
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	4413      	add	r3, r2
 800468c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004690:	461a      	mov	r2, r3
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	3301      	adds	r3, #1
 800469c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	3301      	adds	r3, #1
 80046a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	3301      	adds	r3, #1
 80046a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3301      	adds	r3, #1
 80046ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	3301      	adds	r3, #1
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d3e2      	bcc.n	8004684 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3724      	adds	r7, #36	@ 0x24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b08b      	sub	sp, #44	@ 0x2c
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	4613      	mov	r3, r2
 80046d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	089b      	lsrs	r3, r3, #2
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80046ea:	88fb      	ldrh	r3, [r7, #6]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80046f2:	2300      	movs	r3, #0
 80046f4:	623b      	str	r3, [r7, #32]
 80046f6:	e014      	b.n	8004722 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	601a      	str	r2, [r3, #0]
    pDest++;
 8004704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004706:	3301      	adds	r3, #1
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	3301      	adds	r3, #1
 800470e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004712:	3301      	adds	r3, #1
 8004714:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	3301      	adds	r3, #1
 800471a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	3301      	adds	r3, #1
 8004720:	623b      	str	r3, [r7, #32]
 8004722:	6a3a      	ldr	r2, [r7, #32]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	429a      	cmp	r2, r3
 8004728:	d3e6      	bcc.n	80046f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800472a:	8bfb      	ldrh	r3, [r7, #30]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01e      	beq.n	800476e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800473a:	461a      	mov	r2, r3
 800473c:	f107 0310 	add.w	r3, r7, #16
 8004740:	6812      	ldr	r2, [r2, #0]
 8004742:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	b2db      	uxtb	r3, r3
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	fa22 f303 	lsr.w	r3, r2, r3
 8004750:	b2da      	uxtb	r2, r3
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	701a      	strb	r2, [r3, #0]
      i++;
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	3301      	adds	r3, #1
 800475a:	623b      	str	r3, [r7, #32]
      pDest++;
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	3301      	adds	r3, #1
 8004760:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004762:	8bfb      	ldrh	r3, [r7, #30]
 8004764:	3b01      	subs	r3, #1
 8004766:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004768:	8bfb      	ldrh	r3, [r7, #30]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1ea      	bne.n	8004744 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800476e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004770:	4618      	mov	r0, r3
 8004772:	372c      	adds	r7, #44	@ 0x2c
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	785b      	ldrb	r3, [r3, #1]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d12c      	bne.n	80047f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	db12      	blt.n	80047d0 <USB_EPSetStall+0x54>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00f      	beq.n	80047d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	0151      	lsls	r1, r2, #5
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	440a      	add	r2, r1
 80047c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	0151      	lsls	r1, r2, #5
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	440a      	add	r2, r1
 80047e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	e02b      	b.n	800484a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	db12      	blt.n	800482a <USB_EPSetStall+0xae>
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00f      	beq.n	800482a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	0151      	lsls	r1, r2, #5
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	440a      	add	r2, r1
 8004820:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004824:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004828:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	0151      	lsls	r1, r2, #5
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	440a      	add	r2, r1
 8004840:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004844:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004848:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d128      	bne.n	80048c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	0151      	lsls	r1, r2, #5
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	440a      	add	r2, r1
 800488a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800488e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004892:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	791b      	ldrb	r3, [r3, #4]
 8004898:	2b03      	cmp	r3, #3
 800489a:	d003      	beq.n	80048a4 <USB_EPClearStall+0x4c>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	791b      	ldrb	r3, [r3, #4]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d138      	bne.n	8004916 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	0151      	lsls	r1, r2, #5
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	440a      	add	r2, r1
 80048ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	e027      	b.n	8004916 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	0151      	lsls	r1, r2, #5
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	440a      	add	r2, r1
 80048dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80048e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	791b      	ldrb	r3, [r3, #4]
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	d003      	beq.n	80048f6 <USB_EPClearStall+0x9e>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	791b      	ldrb	r3, [r3, #4]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d10f      	bne.n	8004916 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	0151      	lsls	r1, r2, #5
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	440a      	add	r2, r1
 800490c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004914:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004942:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004946:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004958:	68f9      	ldr	r1, [r7, #12]
 800495a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800495e:	4313      	orrs	r3, r2
 8004960:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800499e:	f023 0302 	bic.w	r3, r3, #2
 80049a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80049cc:	f023 0303 	bic.w	r3, r3, #3
 80049d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049e0:	f043 0302 	orr.w	r3, r3, #2
 80049e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b085      	sub	sp, #20
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	0c1b      	lsrs	r3, r3, #16
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b085      	sub	sp, #20
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	b29b      	uxth	r3, r3
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b085      	sub	sp, #20
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	4013      	ands	r3, r2
 8004aae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ab0:	68bb      	ldr	r3, [r7, #8]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b087      	sub	sp, #28
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004ae2:	78fb      	ldrb	r3, [r7, #3]
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	fa22 f303 	lsr.w	r3, r2, r3
 8004aee:	01db      	lsls	r3, r3, #7
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0301 	and.w	r3, r3, #1
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b085      	sub	sp, #20
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b50:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b54:	f023 0307 	bic.w	r3, r3, #7
 8004b58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	460b      	mov	r3, r1
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	333c      	adds	r3, #60	@ 0x3c
 8004b92:	3304      	adds	r3, #4
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	4a26      	ldr	r2, [pc, #152]	@ (8004c34 <USB_EP0_OutStart+0xb8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d90a      	bls.n	8004bb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bb0:	d101      	bne.n	8004bb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e037      	b.n	8004c26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004be4:	f043 0318 	orr.w	r3, r3, #24
 8004be8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bf8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004bfc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004bfe:	7afb      	ldrb	r3, [r7, #11]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d10f      	bne.n	8004c24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c1e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004c22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	4f54300a 	.word	0x4f54300a

08004c38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3301      	adds	r3, #1
 8004c48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c50:	d901      	bls.n	8004c56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e01b      	b.n	8004c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	daf2      	bge.n	8004c44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f043 0201 	orr.w	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3301      	adds	r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c7a:	d901      	bls.n	8004c80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e006      	b.n	8004c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d0f0      	beq.n	8004c6e <USB_CoreReset+0x36>

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004ca8:	2018      	movs	r0, #24
 8004caa:	f002 fcc9 	bl	8007640 <USBD_static_malloc>
 8004cae:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d109      	bne.n	8004cca <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	32b0      	adds	r2, #176	@ 0xb0
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e08a      	b.n	8004de0 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	32b0      	adds	r2, #176	@ 0xb0
 8004cd4:	68f9      	ldr	r1, [r7, #12]
 8004cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	32b0      	adds	r2, #176	@ 0xb0
 8004ce4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	7c1b      	ldrb	r3, [r3, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d11b      	bne.n	8004d2e <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8004de8 <USBD_CUSTOM_HID_Init+0x14c>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	f003 020f 	and.w	r2, r3, #15
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	3326      	adds	r3, #38	@ 0x26
 8004d0c:	2205      	movs	r2, #5
 8004d0e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004d10:	4b36      	ldr	r3, [pc, #216]	@ (8004dec <USBD_CUSTOM_HID_Init+0x150>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	f003 020f 	and.w	r2, r3, #15
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004d28:	2205      	movs	r2, #5
 8004d2a:	801a      	strh	r2, [r3, #0]
 8004d2c:	e01a      	b.n	8004d64 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8004de8 <USBD_CUSTOM_HID_Init+0x14c>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	f003 020f 	and.w	r2, r3, #15
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	3326      	adds	r3, #38	@ 0x26
 8004d44:	2205      	movs	r2, #5
 8004d46:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004d48:	4b28      	ldr	r3, [pc, #160]	@ (8004dec <USBD_CUSTOM_HID_Init+0x150>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	f003 020f 	and.w	r2, r3, #15
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004d60:	2205      	movs	r2, #5
 8004d62:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8004d64:	4b20      	ldr	r3, [pc, #128]	@ (8004de8 <USBD_CUSTOM_HID_Init+0x14c>)
 8004d66:	7819      	ldrb	r1, [r3, #0]
 8004d68:	230a      	movs	r3, #10
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f002 fb08 	bl	8007382 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8004d72:	4b1d      	ldr	r3, [pc, #116]	@ (8004de8 <USBD_CUSTOM_HID_Init+0x14c>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	f003 020f 	and.w	r2, r3, #15
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	3324      	adds	r3, #36	@ 0x24
 8004d88:	2201      	movs	r2, #1
 8004d8a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8004d8c:	4b17      	ldr	r3, [pc, #92]	@ (8004dec <USBD_CUSTOM_HID_Init+0x150>)
 8004d8e:	7819      	ldrb	r1, [r3, #0]
 8004d90:	2302      	movs	r3, #2
 8004d92:	2203      	movs	r2, #3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f002 faf4 	bl	8007382 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8004d9a:	4b14      	ldr	r3, [pc, #80]	@ (8004dec <USBD_CUSTOM_HID_Init+0x150>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	f003 020f 	and.w	r2, r3, #15
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004db2:	2201      	movs	r2, #1
 8004db4:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	33b0      	adds	r3, #176	@ 0xb0
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8004dd0:	4b06      	ldr	r3, [pc, #24]	@ (8004dec <USBD_CUSTOM_HID_Init+0x150>)
 8004dd2:	7819      	ldrb	r1, [r3, #0]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f002 fbc1 	bl	8007560 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20000086 	.word	0x20000086
 8004dec:	20000087 	.word	0x20000087

08004df0 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8004dfc:	4b37      	ldr	r3, [pc, #220]	@ (8004edc <USBD_CUSTOM_HID_DeInit+0xec>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	4619      	mov	r1, r3
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f002 fae3 	bl	80073ce <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8004e08:	4b34      	ldr	r3, [pc, #208]	@ (8004edc <USBD_CUSTOM_HID_DeInit+0xec>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	f003 020f 	and.w	r2, r3, #15
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3324      	adds	r3, #36	@ 0x24
 8004e1e:	2200      	movs	r2, #0
 8004e20:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8004e22:	4b2e      	ldr	r3, [pc, #184]	@ (8004edc <USBD_CUSTOM_HID_DeInit+0xec>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	f003 020f 	and.w	r2, r3, #15
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	3326      	adds	r3, #38	@ 0x26
 8004e38:	2200      	movs	r2, #0
 8004e3a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8004e3c:	4b28      	ldr	r3, [pc, #160]	@ (8004ee0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	4619      	mov	r1, r3
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f002 fac3 	bl	80073ce <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8004e48:	4b25      	ldr	r3, [pc, #148]	@ (8004ee0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	f003 020f 	and.w	r2, r3, #15
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004e60:	2200      	movs	r2, #0
 8004e62:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8004e64:	4b1e      	ldr	r3, [pc, #120]	@ (8004ee0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	f003 020f 	and.w	r2, r3, #15
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	32b0      	adds	r2, #176	@ 0xb0
 8004e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01f      	beq.n	8004ed2 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	33b0      	adds	r3, #176	@ 0xb0
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	32b0      	adds	r2, #176	@ 0xb0
 8004eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f002 fbd1 	bl	800765c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	32b0      	adds	r2, #176	@ 0xb0
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20000086 	.word	0x20000086
 8004ee0:	20000087 	.word	0x20000087

08004ee4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b0ca      	sub	sp, #296	@ 0x128
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004eee:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004ef2:	6018      	str	r0, [r3, #0]
 8004ef4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004ef8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004efc:	6019      	str	r1, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004efe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004f02:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f0c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004f10:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	32b0      	adds	r2, #176	@ 0xb0
 8004f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f1c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  uint16_t len = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
#warning "USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED not implemented; See original library code"
#endif
#ifdef USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED
#warning "USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED not implemented; See original library code"
#endif
  uint8_t  *pbuf = NULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  uint16_t status_info = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  USBD_StatusTypeDef ret = USBD_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

  if (hhid == NULL)
 8004f38:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <USBD_CUSTOM_HID_Setup+0x60>
  {
    return (uint8_t)USBD_FAIL;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e1e4      	b.n	800530e <USBD_CUSTOM_HID_Setup+0x42a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f44:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004f48:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80d0 	beq.w	80050fa <USBD_CUSTOM_HID_Setup+0x216>
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	f040 81c5 	bne.w	80052ea <USBD_CUSTOM_HID_Setup+0x406>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004f60:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004f64:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	785b      	ldrb	r3, [r3, #1]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	2b0a      	cmp	r3, #10
 8004f70:	f200 80b1 	bhi.w	80050d6 <USBD_CUSTOM_HID_Setup+0x1f2>
 8004f74:	a201      	add	r2, pc, #4	@ (adr r2, 8004f7c <USBD_CUSTOM_HID_Setup+0x98>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08005041 	.word	0x08005041
 8004f80:	08004ff5 	.word	0x08004ff5
 8004f84:	08004fc1 	.word	0x08004fc1
 8004f88:	080050d7 	.word	0x080050d7
 8004f8c:	080050d7 	.word	0x080050d7
 8004f90:	080050d7 	.word	0x080050d7
 8004f94:	080050d7 	.word	0x080050d7
 8004f98:	080050d7 	.word	0x080050d7
 8004f9c:	0800500f 	.word	0x0800500f
 8004fa0:	08004fd9 	.word	0x08004fd9
 8004fa4:	08004fa9 	.word	0x08004fa9
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004fa8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004fac:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	885b      	ldrh	r3, [r3, #2]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004fbc:	605a      	str	r2, [r3, #4]
          break;
 8004fbe:	e09b      	b.n	80050f8 <USBD_CUSTOM_HID_Setup+0x214>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004fc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004fc4:	1d19      	adds	r1, r3, #4
 8004fc6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004fca:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004fce:	2201      	movs	r2, #1
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	f001 fdcd 	bl	8006b70 <USBD_CtlSendData>
          break;
 8004fd6:	e08f      	b.n	80050f8 <USBD_CUSTOM_HID_Setup+0x214>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004fd8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004fdc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	885b      	ldrh	r3, [r3, #2]
 8004fe4:	0a1b      	lsrs	r3, r3, #8
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004ff0:	609a      	str	r2, [r3, #8]
          break;
 8004ff2:	e081      	b.n	80050f8 <USBD_CUSTOM_HID_Setup+0x214>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004ff4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004ff8:	f103 0108 	add.w	r1, r3, #8
 8004ffc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005000:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005004:	2201      	movs	r2, #1
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	f001 fdb2 	bl	8006b70 <USBD_CtlSendData>
          break;
 800500c:	e074      	b.n	80050f8 <USBD_CUSTOM_HID_Setup+0x214>

        case CUSTOM_HID_REQ_SET_REPORT:
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 800500e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005012:	2201      	movs	r2, #1
 8005014:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005016:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800501a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800501e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	88db      	ldrh	r3, [r3, #6]
 8005026:	2b02      	cmp	r3, #2
 8005028:	bf28      	it	cs
 800502a:	2302      	movcs	r3, #2
 800502c:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800502e:	461a      	mov	r2, r3
 8005030:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005034:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	f001 fdc5 	bl	8006bc8 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 800503e:	e05b      	b.n	80050f8 <USBD_CUSTOM_HID_Setup+0x214>
        /*
         * Send feature reports to host
         */
        const int FEATURE_REPORT_WVALUE_OFFSET = 0x300;		// High Byte of wValue is report type, Low Byte is report ID (HID 1.11, Section 7.2)
        case CUSTOM_HID_REQ_GET_REPORT:
        	if (req->wValue == (FEATURE_REPORT_WVALUE_OFFSET + REPORTID_CAPABILITIES))
 8005040:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005044:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	885b      	ldrh	r3, [r3, #2]
 800504c:	461a      	mov	r2, r3
 800504e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005052:	3302      	adds	r3, #2
 8005054:	429a      	cmp	r2, r3
 8005056:	d114      	bne.n	8005082 <USBD_CUSTOM_HID_Setup+0x19e>
        	{
        		CapabilitiesReport report;
        		report.report_ID = REPORTID_CAPABILITIES;
 8005058:	2302      	movs	r3, #2
 800505a:	f887 3110 	strb.w	r3, [r7, #272]	@ 0x110
        		report.contact_count_maximum = TP_MAX_CONTACTS;
 800505e:	f897 3111 	ldrb.w	r3, [r7, #273]	@ 0x111
 8005062:	2201      	movs	r2, #1
 8005064:	f362 0303 	bfi	r3, r2, #0, #4
 8005068:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
        		USBD_CtlSendData(pdev, (uint8_t*)&report, sizeof (report));
 800506c:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8005070:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005074:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005078:	2202      	movs	r2, #2
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	f001 fd78 	bl	8006b70 <USBD_CtlSendData>
        		CertificationStatusReport report;
        		report.report_ID = REPORTID_CERTIFICATION_STATUS;
        		memcpy(&report.certification_blob, &certification_blob, sizeof(certification_blob));
        		USBD_CtlSendData(pdev, (uint8_t*)&report, sizeof (report));
        	}
        	break;
 8005080:	e039      	b.n	80050f6 <USBD_CUSTOM_HID_Setup+0x212>
        	else if (req->wValue == (FEATURE_REPORT_WVALUE_OFFSET + REPORTID_CERTIFICATION_STATUS)){
 8005082:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005086:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	885b      	ldrh	r3, [r3, #2]
 800508e:	461a      	mov	r2, r3
 8005090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005094:	3303      	adds	r3, #3
 8005096:	429a      	cmp	r2, r3
 8005098:	d12d      	bne.n	80050f6 <USBD_CUSTOM_HID_Setup+0x212>
        		report.report_ID = REPORTID_CERTIFICATION_STATUS;
 800509a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800509e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80050a2:	2203      	movs	r2, #3
 80050a4:	701a      	strb	r2, [r3, #0]
        		memcpy(&report.certification_blob, &certification_blob, sizeof(certification_blob));
 80050a6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80050aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80050ae:	4a9a      	ldr	r2, [pc, #616]	@ (8005318 <USBD_CUSTOM_HID_Setup+0x434>)
 80050b0:	3301      	adds	r3, #1
 80050b2:	4611      	mov	r1, r2
 80050b4:	f240 1201 	movw	r2, #257	@ 0x101
 80050b8:	4618      	mov	r0, r3
 80050ba:	f002 fb31 	bl	8007720 <memcpy>
        		USBD_CtlSendData(pdev, (uint8_t*)&report, sizeof (report));
 80050be:	f107 010c 	add.w	r1, r7, #12
 80050c2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80050c6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80050ca:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80050ce:	6818      	ldr	r0, [r3, #0]
 80050d0:	f001 fd4e 	bl	8006b70 <USBD_CtlSendData>
        	break;
 80050d4:	e00f      	b.n	80050f6 <USBD_CUSTOM_HID_Setup+0x212>
        default:
          USBD_CtlError(pdev, req);
 80050d6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80050da:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80050de:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80050e2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80050e6:	6811      	ldr	r1, [r2, #0]
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	f001 fcd0 	bl	8006a8e <USBD_CtlError>
          ret = USBD_FAIL;
 80050ee:	2303      	movs	r3, #3
 80050f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
          break;
 80050f4:	e000      	b.n	80050f8 <USBD_CUSTOM_HID_Setup+0x214>
        	break;
 80050f6:	bf00      	nop
      }
      break;
 80050f8:	e107      	b.n	800530a <USBD_CUSTOM_HID_Setup+0x426>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80050fa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80050fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	785b      	ldrb	r3, [r3, #1]
 8005106:	2b0b      	cmp	r3, #11
 8005108:	f200 80dd 	bhi.w	80052c6 <USBD_CUSTOM_HID_Setup+0x3e2>
 800510c:	a201      	add	r2, pc, #4	@ (adr r2, 8005114 <USBD_CUSTOM_HID_Setup+0x230>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005145 	.word	0x08005145
 8005118:	080052e7 	.word	0x080052e7
 800511c:	080052c7 	.word	0x080052c7
 8005120:	080052c7 	.word	0x080052c7
 8005124:	080052c7 	.word	0x080052c7
 8005128:	080052c7 	.word	0x080052c7
 800512c:	0800518f 	.word	0x0800518f
 8005130:	080052c7 	.word	0x080052c7
 8005134:	080052c7 	.word	0x080052c7
 8005138:	080052c7 	.word	0x080052c7
 800513c:	0800522d 	.word	0x0800522d
 8005140:	0800527b 	.word	0x0800527b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005144:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005148:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b03      	cmp	r3, #3
 8005156:	d10a      	bne.n	800516e <USBD_CUSTOM_HID_Setup+0x28a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005158:	f507 7189 	add.w	r1, r7, #274	@ 0x112
 800515c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005160:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005164:	2202      	movs	r2, #2
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	f001 fd02 	bl	8006b70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800516c:	e0bc      	b.n	80052e8 <USBD_CUSTOM_HID_Setup+0x404>
            USBD_CtlError(pdev, req);
 800516e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005172:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8005176:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800517a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800517e:	6811      	ldr	r1, [r2, #0]
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	f001 fc84 	bl	8006a8e <USBD_CtlError>
            ret = USBD_FAIL;
 8005186:	2303      	movs	r3, #3
 8005188:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
          break;
 800518c:	e0ac      	b.n	80052e8 <USBD_CUSTOM_HID_Setup+0x404>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800518e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005192:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	885b      	ldrh	r3, [r3, #2]
 800519a:	0a1b      	lsrs	r3, r3, #8
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b22      	cmp	r3, #34	@ 0x22
 80051a0:	d120      	bne.n	80051e4 <USBD_CUSTOM_HID_Setup+0x300>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80051a2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80051a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	88db      	ldrh	r3, [r3, #6]
 80051ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051b2:	bf28      	it	cs
 80051b4:	f44f 7382 	movcs.w	r3, #260	@ 0x104
 80051b8:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80051bc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80051c0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051ca:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80051ce:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	33b0      	adds	r3, #176	@ 0xb0
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80051e2:	e017      	b.n	8005214 <USBD_CUSTOM_HID_Setup+0x330>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80051e4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80051e8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	885b      	ldrh	r3, [r3, #2]
 80051f0:	0a1b      	lsrs	r3, r3, #8
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b21      	cmp	r3, #33	@ 0x21
 80051f6:	d10d      	bne.n	8005214 <USBD_CUSTOM_HID_Setup+0x330>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80051f8:	4b48      	ldr	r3, [pc, #288]	@ (800531c <USBD_CUSTOM_HID_Setup+0x438>)
 80051fa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80051fe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005202:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	88db      	ldrh	r3, [r3, #6]
 800520a:	2b09      	cmp	r3, #9
 800520c:	bf28      	it	cs
 800520e:	2309      	movcs	r3, #9
 8005210:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005214:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8005218:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800521c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005220:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	f001 fca3 	bl	8006b70 <USBD_CtlSendData>
          break;
 800522a:	e05d      	b.n	80052e8 <USBD_CUSTOM_HID_Setup+0x404>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800522c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005230:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b03      	cmp	r3, #3
 800523e:	d10c      	bne.n	800525a <USBD_CUSTOM_HID_Setup+0x376>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005240:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005244:	f103 010c 	add.w	r1, r3, #12
 8005248:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800524c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005250:	2201      	movs	r2, #1
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	f001 fc8c 	bl	8006b70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005258:	e046      	b.n	80052e8 <USBD_CUSTOM_HID_Setup+0x404>
            USBD_CtlError(pdev, req);
 800525a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800525e:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8005262:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005266:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800526a:	6811      	ldr	r1, [r2, #0]
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	f001 fc0e 	bl	8006a8e <USBD_CtlError>
            ret = USBD_FAIL;
 8005272:	2303      	movs	r3, #3
 8005274:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
          break;
 8005278:	e036      	b.n	80052e8 <USBD_CUSTOM_HID_Setup+0x404>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800527a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800527e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b03      	cmp	r3, #3
 800528c:	d10b      	bne.n	80052a6 <USBD_CUSTOM_HID_Setup+0x3c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800528e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005292:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	885b      	ldrh	r3, [r3, #2]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80052a2:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052a4:	e020      	b.n	80052e8 <USBD_CUSTOM_HID_Setup+0x404>
            USBD_CtlError(pdev, req);
 80052a6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80052aa:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80052ae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80052b2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80052b6:	6811      	ldr	r1, [r2, #0]
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	f001 fbe8 	bl	8006a8e <USBD_CtlError>
            ret = USBD_FAIL;
 80052be:	2303      	movs	r3, #3
 80052c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
          break;
 80052c4:	e010      	b.n	80052e8 <USBD_CUSTOM_HID_Setup+0x404>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80052c6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80052ca:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80052ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80052d2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80052d6:	6811      	ldr	r1, [r2, #0]
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	f001 fbd8 	bl	8006a8e <USBD_CtlError>
          ret = USBD_FAIL;
 80052de:	2303      	movs	r3, #3
 80052e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
          break;
 80052e4:	e000      	b.n	80052e8 <USBD_CUSTOM_HID_Setup+0x404>
          break;
 80052e6:	bf00      	nop
      }
      break;
 80052e8:	e00f      	b.n	800530a <USBD_CUSTOM_HID_Setup+0x426>

    default:
      USBD_CtlError(pdev, req);
 80052ea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80052ee:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80052f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80052f6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80052fa:	6811      	ldr	r1, [r2, #0]
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	f001 fbc6 	bl	8006a8e <USBD_CtlError>
      ret = USBD_FAIL;
 8005302:	2303      	movs	r3, #3
 8005304:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
      break;
 8005308:	bf00      	nop
  }
  return (uint8_t)ret;
 800530a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
}
 800530e:	4618      	mov	r0, r3
 8005310:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	080077c4 	.word	0x080077c4
 800531c:	20000070 	.word	0x20000070

08005320 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	4613      	mov	r3, r2
 800532c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	32b0      	adds	r2, #176	@ 0xb0
 8005338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800533c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005344:	2303      	movs	r3, #3
 8005346:	e017      	b.n	8005378 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b03      	cmp	r3, #3
 8005352:	d110      	bne.n	8005376 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	7d1b      	ldrb	r3, [r3, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2201      	movs	r2, #1
 8005360:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8005362:	4b07      	ldr	r3, [pc, #28]	@ (8005380 <USBD_CUSTOM_HID_SendReport+0x60>)
 8005364:	7819      	ldrb	r1, [r3, #0]
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f002 f8d7 	bl	800751e <USBD_LL_Transmit>
 8005370:	e001      	b.n	8005376 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	20000086 	.word	0x20000086

08005384 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800538c:	2181      	movs	r1, #129	@ 0x81
 800538e:	4815      	ldr	r0, [pc, #84]	@ (80053e4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005390:	f000 fd1d 	bl	8005dce <USBD_GetEpDesc>
 8005394:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005396:	2101      	movs	r1, #1
 8005398:	4812      	ldr	r0, [pc, #72]	@ (80053e4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800539a:	f000 fd18 	bl	8005dce <USBD_GetEpDesc>
 800539e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d009      	beq.n	80053ba <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f042 020a 	orr.w	r2, r2, #10
 80053ae:	711a      	strb	r2, [r3, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2205      	movs	r2, #5
 80053b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d009      	beq.n	80053d4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f042 0202 	orr.w	r2, r2, #2
 80053c8:	711a      	strb	r2, [r3, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2205      	movs	r2, #5
 80053d2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2229      	movs	r2, #41	@ 0x29
 80053d8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80053da:	4b02      	ldr	r3, [pc, #8]	@ (80053e4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	20000044 	.word	0x20000044

080053e8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80053f0:	2181      	movs	r1, #129	@ 0x81
 80053f2:	4815      	ldr	r0, [pc, #84]	@ (8005448 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80053f4:	f000 fceb 	bl	8005dce <USBD_GetEpDesc>
 80053f8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80053fa:	2101      	movs	r1, #1
 80053fc:	4812      	ldr	r0, [pc, #72]	@ (8005448 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80053fe:	f000 fce6 	bl	8005dce <USBD_GetEpDesc>
 8005402:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f042 020a 	orr.w	r2, r2, #10
 8005412:	711a      	strb	r2, [r3, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2205      	movs	r2, #5
 800541c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d009      	beq.n	8005438 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2200      	movs	r2, #0
 8005428:	f042 0202 	orr.w	r2, r2, #2
 800542c:	711a      	strb	r2, [r3, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2205      	movs	r2, #5
 8005436:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2229      	movs	r2, #41	@ 0x29
 800543c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800543e:	4b02      	ldr	r3, [pc, #8]	@ (8005448 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	20000044 	.word	0x20000044

0800544c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005454:	2181      	movs	r1, #129	@ 0x81
 8005456:	4815      	ldr	r0, [pc, #84]	@ (80054ac <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005458:	f000 fcb9 	bl	8005dce <USBD_GetEpDesc>
 800545c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800545e:	2101      	movs	r1, #1
 8005460:	4812      	ldr	r0, [pc, #72]	@ (80054ac <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005462:	f000 fcb4 	bl	8005dce <USBD_GetEpDesc>
 8005466:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d009      	beq.n	8005482 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f042 020a 	orr.w	r2, r2, #10
 8005476:	711a      	strb	r2, [r3, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2205      	movs	r2, #5
 8005480:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d009      	beq.n	800549c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2200      	movs	r2, #0
 800548c:	f042 0202 	orr.w	r2, r2, #2
 8005490:	711a      	strb	r2, [r3, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2205      	movs	r2, #5
 800549a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2229      	movs	r2, #41	@ 0x29
 80054a0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80054a2:	4b02      	ldr	r3, [pc, #8]	@ (80054ac <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20000044 	.word	0x20000044

080054b0 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	32b0      	adds	r2, #176	@ 0xb0
 80054c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ca:	2200      	movs	r2, #0
 80054cc:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	32b0      	adds	r2, #176	@ 0xb0
 80054f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e017      	b.n	800552e <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	32b0      	adds	r2, #176	@ 0xb0
 8005508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	33b0      	adds	r3, #176	@ 0xb0
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	7810      	ldrb	r0, [r2, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	7852      	ldrb	r2, [r2, #1]
 8005528:	4611      	mov	r1, r2
 800552a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	32b0      	adds	r2, #176	@ 0xb0
 800554a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005552:	2303      	movs	r3, #3
 8005554:	e00f      	b.n	8005576 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	32b0      	adds	r2, #176	@ 0xb0
 8005560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005564:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005566:	4b06      	ldr	r3, [pc, #24]	@ (8005580 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8005568:	7819      	ldrb	r1, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	2302      	movs	r3, #2
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f001 fff6 	bl	8007560 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000087 	.word	0x20000087

08005584 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	32b0      	adds	r2, #176	@ 0xb0
 8005596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800559a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e016      	b.n	80055d4 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d111      	bne.n	80055d2 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	33b0      	adds	r3, #176	@ 0xb0
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	7810      	ldrb	r0, [r2, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	7852      	ldrb	r2, [r2, #1]
 80055c8:	4611      	mov	r1, r2
 80055ca:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	220a      	movs	r2, #10
 80055e8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80055ea:	4b03      	ldr	r3, [pc, #12]	@ (80055f8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	2000007c 	.word	0x2000007c

080055fc <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800560c:	2303      	movs	r3, #3
 800560e:	e009      	b.n	8005624 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	33b0      	adds	r3, #176	@ 0xb0
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	4613      	mov	r3, r2
 800563c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005644:	2303      	movs	r3, #3
 8005646:	e01f      	b.n	8005688 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	79fa      	ldrb	r2, [r7, #7]
 800567a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f001 fe19 	bl	80072b4 <USBD_LL_Init>
 8005682:	4603      	mov	r3, r0
 8005684:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005686:	7dfb      	ldrb	r3, [r7, #23]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e025      	b.n	80056f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	32ae      	adds	r2, #174	@ 0xae
 80056ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00f      	beq.n	80056e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	32ae      	adds	r2, #174	@ 0xae
 80056ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d4:	f107 020e 	add.w	r2, r7, #14
 80056d8:	4610      	mov	r0, r2
 80056da:	4798      	blx	r3
 80056dc:	4602      	mov	r2, r0
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f001 fe21 	bl	800734c <USBD_LL_Start>
 800570a:	4603      	mov	r3, r0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800571c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	460b      	mov	r3, r1
 8005734:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005740:	2b00      	cmp	r3, #0
 8005742:	d009      	beq.n	8005758 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	4611      	mov	r1, r2
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	4798      	blx	r3
 8005754:	4603      	mov	r3, r0
 8005756:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005758:	7bfb      	ldrb	r3, [r7, #15]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	460b      	mov	r3, r1
 800576c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	78fa      	ldrb	r2, [r7, #3]
 800577c:	4611      	mov	r1, r2
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	4798      	blx	r3
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005788:	2303      	movs	r3, #3
 800578a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800578c:	7bfb      	ldrb	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80057a6:	6839      	ldr	r1, [r7, #0]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f001 f936 	bl	8006a1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80057bc:	461a      	mov	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80057ca:	f003 031f 	and.w	r3, r3, #31
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d01a      	beq.n	8005808 <USBD_LL_SetupStage+0x72>
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d822      	bhi.n	800581c <USBD_LL_SetupStage+0x86>
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <USBD_LL_SetupStage+0x4a>
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d00a      	beq.n	80057f4 <USBD_LL_SetupStage+0x5e>
 80057de:	e01d      	b.n	800581c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80057e6:	4619      	mov	r1, r3
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fb63 	bl	8005eb4 <USBD_StdDevReq>
 80057ee:	4603      	mov	r3, r0
 80057f0:	73fb      	strb	r3, [r7, #15]
      break;
 80057f2:	e020      	b.n	8005836 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80057fa:	4619      	mov	r1, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fbcb 	bl	8005f98 <USBD_StdItfReq>
 8005802:	4603      	mov	r3, r0
 8005804:	73fb      	strb	r3, [r7, #15]
      break;
 8005806:	e016      	b.n	8005836 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800580e:	4619      	mov	r1, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fc2d 	bl	8006070 <USBD_StdEPReq>
 8005816:	4603      	mov	r3, r0
 8005818:	73fb      	strb	r3, [r7, #15]
      break;
 800581a:	e00c      	b.n	8005836 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005822:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005826:	b2db      	uxtb	r3, r3
 8005828:	4619      	mov	r1, r3
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f001 fdee 	bl	800740c <USBD_LL_StallEP>
 8005830:	4603      	mov	r3, r0
 8005832:	73fb      	strb	r3, [r7, #15]
      break;
 8005834:	bf00      	nop
  }

  return ret;
 8005836:	7bfb      	ldrb	r3, [r7, #15]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	460b      	mov	r3, r1
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005852:	7afb      	ldrb	r3, [r7, #11]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d16e      	bne.n	8005936 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800585e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005866:	2b03      	cmp	r3, #3
 8005868:	f040 8098 	bne.w	800599c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	429a      	cmp	r2, r3
 8005876:	d913      	bls.n	80058a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	1ad2      	subs	r2, r2, r3
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	4293      	cmp	r3, r2
 8005890:	bf28      	it	cs
 8005892:	4613      	movcs	r3, r2
 8005894:	461a      	mov	r2, r3
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f001 f9b2 	bl	8006c02 <USBD_CtlContinueRx>
 800589e:	e07d      	b.n	800599c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80058a6:	f003 031f 	and.w	r3, r3, #31
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d014      	beq.n	80058d8 <USBD_LL_DataOutStage+0x98>
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d81d      	bhi.n	80058ee <USBD_LL_DataOutStage+0xae>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <USBD_LL_DataOutStage+0x7c>
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d003      	beq.n	80058c2 <USBD_LL_DataOutStage+0x82>
 80058ba:	e018      	b.n	80058ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	75bb      	strb	r3, [r7, #22]
            break;
 80058c0:	e018      	b.n	80058f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	4619      	mov	r1, r3
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fa64 	bl	8005d9a <USBD_CoreFindIF>
 80058d2:	4603      	mov	r3, r0
 80058d4:	75bb      	strb	r3, [r7, #22]
            break;
 80058d6:	e00d      	b.n	80058f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	4619      	mov	r1, r3
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 fa66 	bl	8005db4 <USBD_CoreFindEP>
 80058e8:	4603      	mov	r3, r0
 80058ea:	75bb      	strb	r3, [r7, #22]
            break;
 80058ec:	e002      	b.n	80058f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	75bb      	strb	r3, [r7, #22]
            break;
 80058f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80058f4:	7dbb      	ldrb	r3, [r7, #22]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d119      	bne.n	800592e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b03      	cmp	r3, #3
 8005904:	d113      	bne.n	800592e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005906:	7dba      	ldrb	r2, [r7, #22]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	32ae      	adds	r2, #174	@ 0xae
 800590c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00b      	beq.n	800592e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005916:	7dba      	ldrb	r2, [r7, #22]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800591e:	7dba      	ldrb	r2, [r7, #22]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	32ae      	adds	r2, #174	@ 0xae
 8005924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f001 f978 	bl	8006c24 <USBD_CtlSendStatus>
 8005934:	e032      	b.n	800599c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005936:	7afb      	ldrb	r3, [r7, #11]
 8005938:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800593c:	b2db      	uxtb	r3, r3
 800593e:	4619      	mov	r1, r3
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 fa37 	bl	8005db4 <USBD_CoreFindEP>
 8005946:	4603      	mov	r3, r0
 8005948:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800594a:	7dbb      	ldrb	r3, [r7, #22]
 800594c:	2bff      	cmp	r3, #255	@ 0xff
 800594e:	d025      	beq.n	800599c <USBD_LL_DataOutStage+0x15c>
 8005950:	7dbb      	ldrb	r3, [r7, #22]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d122      	bne.n	800599c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b03      	cmp	r3, #3
 8005960:	d117      	bne.n	8005992 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005962:	7dba      	ldrb	r2, [r7, #22]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	32ae      	adds	r2, #174	@ 0xae
 8005968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00f      	beq.n	8005992 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005972:	7dba      	ldrb	r2, [r7, #22]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800597a:	7dba      	ldrb	r2, [r7, #22]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	32ae      	adds	r2, #174	@ 0xae
 8005980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	7afa      	ldrb	r2, [r7, #11]
 8005988:	4611      	mov	r1, r2
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	4798      	blx	r3
 800598e:	4603      	mov	r3, r0
 8005990:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005992:	7dfb      	ldrb	r3, [r7, #23]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005998:	7dfb      	ldrb	r3, [r7, #23]
 800599a:	e000      	b.n	800599e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b086      	sub	sp, #24
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	460b      	mov	r3, r1
 80059b0:	607a      	str	r2, [r7, #4]
 80059b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80059b4:	7afb      	ldrb	r3, [r7, #11]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d16f      	bne.n	8005a9a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	3314      	adds	r3, #20
 80059be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d15a      	bne.n	8005a80 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d914      	bls.n	8005a00 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	1ad2      	subs	r2, r2, r3
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	461a      	mov	r2, r3
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f001 f8da 	bl	8006ba6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059f2:	2300      	movs	r3, #0
 80059f4:	2200      	movs	r2, #0
 80059f6:	2100      	movs	r1, #0
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f001 fdb1 	bl	8007560 <USBD_LL_PrepareReceive>
 80059fe:	e03f      	b.n	8005a80 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d11c      	bne.n	8005a46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d316      	bcc.n	8005a46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d20f      	bcs.n	8005a46 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005a26:	2200      	movs	r2, #0
 8005a28:	2100      	movs	r1, #0
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f001 f8bb 	bl	8006ba6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a38:	2300      	movs	r3, #0
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f001 fd8e 	bl	8007560 <USBD_LL_PrepareReceive>
 8005a44:	e01c      	b.n	8005a80 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d10f      	bne.n	8005a72 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d009      	beq.n	8005a72 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a72:	2180      	movs	r1, #128	@ 0x80
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f001 fcc9 	bl	800740c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f001 f8e5 	bl	8006c4a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d03a      	beq.n	8005b00 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f7ff fe42 	bl	8005714 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005a98:	e032      	b.n	8005b00 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005a9a:	7afb      	ldrb	r3, [r7, #11]
 8005a9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 f985 	bl	8005db4 <USBD_CoreFindEP>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
 8005ab0:	2bff      	cmp	r3, #255	@ 0xff
 8005ab2:	d025      	beq.n	8005b00 <USBD_LL_DataInStage+0x15a>
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d122      	bne.n	8005b00 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d11c      	bne.n	8005b00 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005ac6:	7dfa      	ldrb	r2, [r7, #23]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	32ae      	adds	r2, #174	@ 0xae
 8005acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d014      	beq.n	8005b00 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005ad6:	7dfa      	ldrb	r2, [r7, #23]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005ade:	7dfa      	ldrb	r2, [r7, #23]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	32ae      	adds	r2, #174	@ 0xae
 8005ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	7afa      	ldrb	r2, [r7, #11]
 8005aec:	4611      	mov	r1, r2
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	4798      	blx	r3
 8005af2:	4603      	mov	r3, r0
 8005af4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005af6:	7dbb      	ldrb	r3, [r7, #22]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005afc:	7dbb      	ldrb	r3, [r7, #22]
 8005afe:	e000      	b.n	8005b02 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d014      	beq.n	8005b70 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00e      	beq.n	8005b70 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6852      	ldr	r2, [r2, #4]
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	4611      	mov	r1, r2
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	4798      	blx	r3
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b70:	2340      	movs	r3, #64	@ 0x40
 8005b72:	2200      	movs	r2, #0
 8005b74:	2100      	movs	r1, #0
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 fc03 	bl	8007382 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2240      	movs	r2, #64	@ 0x40
 8005b88:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b8c:	2340      	movs	r3, #64	@ 0x40
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2180      	movs	r1, #128	@ 0x80
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f001 fbf5 	bl	8007382 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2240      	movs	r2, #64	@ 0x40
 8005ba2:	621a      	str	r2, [r3, #32]

  return ret;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	78fa      	ldrb	r2, [r7, #3]
 8005bbe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d006      	beq.n	8005bf0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2204      	movs	r2, #4
 8005bf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d106      	bne.n	8005c28 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b082      	sub	sp, #8
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d110      	bne.n	8005c6c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00b      	beq.n	8005c6c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	32ae      	adds	r2, #174	@ 0xae
 8005c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e01c      	b.n	8005cd2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d115      	bne.n	8005cd0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	32ae      	adds	r2, #174	@ 0xae
 8005cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00b      	beq.n	8005cd0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	32ae      	adds	r2, #174	@ 0xae
 8005cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	78fa      	ldrb	r2, [r7, #3]
 8005cca:	4611      	mov	r1, r2
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	32ae      	adds	r2, #174	@ 0xae
 8005cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e01c      	b.n	8005d36 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d115      	bne.n	8005d34 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	32ae      	adds	r2, #174	@ 0xae
 8005d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	32ae      	adds	r2, #174	@ 0xae
 8005d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2c:	78fa      	ldrb	r2, [r7, #3]
 8005d2e:	4611      	mov	r1, r2
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00e      	beq.n	8005d90 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6852      	ldr	r2, [r2, #4]
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	4611      	mov	r1, r2
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	4798      	blx	r3
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	460b      	mov	r3, r1
 8005da4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005da6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005dc0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b086      	sub	sp, #24
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	885b      	ldrh	r3, [r3, #2]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	7812      	ldrb	r2, [r2, #0]
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d91f      	bls.n	8005e34 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005dfa:	e013      	b.n	8005e24 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005dfc:	f107 030a 	add.w	r3, r7, #10
 8005e00:	4619      	mov	r1, r3
 8005e02:	6978      	ldr	r0, [r7, #20]
 8005e04:	f000 f81b 	bl	8005e3e <USBD_GetNextDesc>
 8005e08:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	785b      	ldrb	r3, [r3, #1]
 8005e0e:	2b05      	cmp	r3, #5
 8005e10:	d108      	bne.n	8005e24 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	789b      	ldrb	r3, [r3, #2]
 8005e1a:	78fa      	ldrb	r2, [r7, #3]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d008      	beq.n	8005e32 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005e20:	2300      	movs	r3, #0
 8005e22:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	885b      	ldrh	r3, [r3, #2]
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	897b      	ldrh	r3, [r7, #10]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d8e5      	bhi.n	8005dfc <USBD_GetEpDesc+0x2e>
 8005e30:	e000      	b.n	8005e34 <USBD_GetEpDesc+0x66>
          break;
 8005e32:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005e34:	693b      	ldr	r3, [r7, #16]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b085      	sub	sp, #20
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	7812      	ldrb	r2, [r2, #0]
 8005e54:	4413      	add	r3, r2
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	461a      	mov	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4413      	add	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005e68:	68fb      	ldr	r3, [r7, #12]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b087      	sub	sp, #28
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005e94:	8a3b      	ldrh	r3, [r7, #16]
 8005e96:	021b      	lsls	r3, r3, #8
 8005e98:	b21a      	sxth	r2, r3
 8005e9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	b21b      	sxth	r3, r3
 8005ea2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005ea4:	89fb      	ldrh	r3, [r7, #14]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
	...

08005eb4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005eca:	2b40      	cmp	r3, #64	@ 0x40
 8005ecc:	d005      	beq.n	8005eda <USBD_StdDevReq+0x26>
 8005ece:	2b40      	cmp	r3, #64	@ 0x40
 8005ed0:	d857      	bhi.n	8005f82 <USBD_StdDevReq+0xce>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00f      	beq.n	8005ef6 <USBD_StdDevReq+0x42>
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	d153      	bne.n	8005f82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	32ae      	adds	r2, #174	@ 0xae
 8005ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	6839      	ldr	r1, [r7, #0]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	4798      	blx	r3
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef4:	e04a      	b.n	8005f8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	785b      	ldrb	r3, [r3, #1]
 8005efa:	2b09      	cmp	r3, #9
 8005efc:	d83b      	bhi.n	8005f76 <USBD_StdDevReq+0xc2>
 8005efe:	a201      	add	r2, pc, #4	@ (adr r2, 8005f04 <USBD_StdDevReq+0x50>)
 8005f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f04:	08005f59 	.word	0x08005f59
 8005f08:	08005f6d 	.word	0x08005f6d
 8005f0c:	08005f77 	.word	0x08005f77
 8005f10:	08005f63 	.word	0x08005f63
 8005f14:	08005f77 	.word	0x08005f77
 8005f18:	08005f37 	.word	0x08005f37
 8005f1c:	08005f2d 	.word	0x08005f2d
 8005f20:	08005f77 	.word	0x08005f77
 8005f24:	08005f4f 	.word	0x08005f4f
 8005f28:	08005f41 	.word	0x08005f41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fa3c 	bl	80063ac <USBD_GetDescriptor>
          break;
 8005f34:	e024      	b.n	8005f80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005f36:	6839      	ldr	r1, [r7, #0]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fbcb 	bl	80066d4 <USBD_SetAddress>
          break;
 8005f3e:	e01f      	b.n	8005f80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fc0a 	bl	800675c <USBD_SetConfig>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	73fb      	strb	r3, [r7, #15]
          break;
 8005f4c:	e018      	b.n	8005f80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005f4e:	6839      	ldr	r1, [r7, #0]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fcad 	bl	80068b0 <USBD_GetConfig>
          break;
 8005f56:	e013      	b.n	8005f80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fcde 	bl	800691c <USBD_GetStatus>
          break;
 8005f60:	e00e      	b.n	8005f80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fd0d 	bl	8006984 <USBD_SetFeature>
          break;
 8005f6a:	e009      	b.n	8005f80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fd31 	bl	80069d6 <USBD_ClrFeature>
          break;
 8005f74:	e004      	b.n	8005f80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fd88 	bl	8006a8e <USBD_CtlError>
          break;
 8005f7e:	bf00      	nop
      }
      break;
 8005f80:	e004      	b.n	8005f8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005f82:	6839      	ldr	r1, [r7, #0]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fd82 	bl	8006a8e <USBD_CtlError>
      break;
 8005f8a:	bf00      	nop
  }

  return ret;
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop

08005f98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005fae:	2b40      	cmp	r3, #64	@ 0x40
 8005fb0:	d005      	beq.n	8005fbe <USBD_StdItfReq+0x26>
 8005fb2:	2b40      	cmp	r3, #64	@ 0x40
 8005fb4:	d852      	bhi.n	800605c <USBD_StdItfReq+0xc4>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <USBD_StdItfReq+0x26>
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d14e      	bne.n	800605c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d840      	bhi.n	800604e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	889b      	ldrh	r3, [r3, #4]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d836      	bhi.n	8006044 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	889b      	ldrh	r3, [r3, #4]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff fedb 	bl	8005d9a <USBD_CoreFindIF>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fe8:	7bbb      	ldrb	r3, [r7, #14]
 8005fea:	2bff      	cmp	r3, #255	@ 0xff
 8005fec:	d01d      	beq.n	800602a <USBD_StdItfReq+0x92>
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d11a      	bne.n	800602a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005ff4:	7bba      	ldrb	r2, [r7, #14]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	32ae      	adds	r2, #174	@ 0xae
 8005ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00f      	beq.n	8006024 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006004:	7bba      	ldrb	r2, [r7, #14]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800600c:	7bba      	ldrb	r2, [r7, #14]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	32ae      	adds	r2, #174	@ 0xae
 8006012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	6839      	ldr	r1, [r7, #0]
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	4798      	blx	r3
 800601e:	4603      	mov	r3, r0
 8006020:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006022:	e004      	b.n	800602e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006024:	2303      	movs	r3, #3
 8006026:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006028:	e001      	b.n	800602e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800602a:	2303      	movs	r3, #3
 800602c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	88db      	ldrh	r3, [r3, #6]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d110      	bne.n	8006058 <USBD_StdItfReq+0xc0>
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10d      	bne.n	8006058 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fdf1 	bl	8006c24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006042:	e009      	b.n	8006058 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fd21 	bl	8006a8e <USBD_CtlError>
          break;
 800604c:	e004      	b.n	8006058 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fd1c 	bl	8006a8e <USBD_CtlError>
          break;
 8006056:	e000      	b.n	800605a <USBD_StdItfReq+0xc2>
          break;
 8006058:	bf00      	nop
      }
      break;
 800605a:	e004      	b.n	8006066 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fd15 	bl	8006a8e <USBD_CtlError>
      break;
 8006064:	bf00      	nop
  }

  return ret;
 8006066:	7bfb      	ldrb	r3, [r7, #15]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	889b      	ldrh	r3, [r3, #4]
 8006082:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800608c:	2b40      	cmp	r3, #64	@ 0x40
 800608e:	d007      	beq.n	80060a0 <USBD_StdEPReq+0x30>
 8006090:	2b40      	cmp	r3, #64	@ 0x40
 8006092:	f200 817f 	bhi.w	8006394 <USBD_StdEPReq+0x324>
 8006096:	2b00      	cmp	r3, #0
 8006098:	d02a      	beq.n	80060f0 <USBD_StdEPReq+0x80>
 800609a:	2b20      	cmp	r3, #32
 800609c:	f040 817a 	bne.w	8006394 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80060a0:	7bbb      	ldrb	r3, [r7, #14]
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff fe85 	bl	8005db4 <USBD_CoreFindEP>
 80060aa:	4603      	mov	r3, r0
 80060ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060ae:	7b7b      	ldrb	r3, [r7, #13]
 80060b0:	2bff      	cmp	r3, #255	@ 0xff
 80060b2:	f000 8174 	beq.w	800639e <USBD_StdEPReq+0x32e>
 80060b6:	7b7b      	ldrb	r3, [r7, #13]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f040 8170 	bne.w	800639e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80060be:	7b7a      	ldrb	r2, [r7, #13]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80060c6:	7b7a      	ldrb	r2, [r7, #13]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	32ae      	adds	r2, #174	@ 0xae
 80060cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 8163 	beq.w	800639e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80060d8:	7b7a      	ldrb	r2, [r7, #13]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	32ae      	adds	r2, #174	@ 0xae
 80060de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	4798      	blx	r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060ee:	e156      	b.n	800639e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d008      	beq.n	800610a <USBD_StdEPReq+0x9a>
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	f300 8145 	bgt.w	8006388 <USBD_StdEPReq+0x318>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 809b 	beq.w	800623a <USBD_StdEPReq+0x1ca>
 8006104:	2b01      	cmp	r3, #1
 8006106:	d03c      	beq.n	8006182 <USBD_StdEPReq+0x112>
 8006108:	e13e      	b.n	8006388 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d002      	beq.n	800611c <USBD_StdEPReq+0xac>
 8006116:	2b03      	cmp	r3, #3
 8006118:	d016      	beq.n	8006148 <USBD_StdEPReq+0xd8>
 800611a:	e02c      	b.n	8006176 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800611c:	7bbb      	ldrb	r3, [r7, #14]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00d      	beq.n	800613e <USBD_StdEPReq+0xce>
 8006122:	7bbb      	ldrb	r3, [r7, #14]
 8006124:	2b80      	cmp	r3, #128	@ 0x80
 8006126:	d00a      	beq.n	800613e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006128:	7bbb      	ldrb	r3, [r7, #14]
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f001 f96d 	bl	800740c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006132:	2180      	movs	r1, #128	@ 0x80
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 f969 	bl	800740c <USBD_LL_StallEP>
 800613a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800613c:	e020      	b.n	8006180 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800613e:	6839      	ldr	r1, [r7, #0]
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fca4 	bl	8006a8e <USBD_CtlError>
              break;
 8006146:	e01b      	b.n	8006180 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	885b      	ldrh	r3, [r3, #2]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10e      	bne.n	800616e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006150:	7bbb      	ldrb	r3, [r7, #14]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00b      	beq.n	800616e <USBD_StdEPReq+0xfe>
 8006156:	7bbb      	ldrb	r3, [r7, #14]
 8006158:	2b80      	cmp	r3, #128	@ 0x80
 800615a:	d008      	beq.n	800616e <USBD_StdEPReq+0xfe>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	88db      	ldrh	r3, [r3, #6]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d104      	bne.n	800616e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006164:	7bbb      	ldrb	r3, [r7, #14]
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f001 f94f 	bl	800740c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fd58 	bl	8006c24 <USBD_CtlSendStatus>

              break;
 8006174:	e004      	b.n	8006180 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006176:	6839      	ldr	r1, [r7, #0]
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fc88 	bl	8006a8e <USBD_CtlError>
              break;
 800617e:	bf00      	nop
          }
          break;
 8006180:	e107      	b.n	8006392 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d002      	beq.n	8006194 <USBD_StdEPReq+0x124>
 800618e:	2b03      	cmp	r3, #3
 8006190:	d016      	beq.n	80061c0 <USBD_StdEPReq+0x150>
 8006192:	e04b      	b.n	800622c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006194:	7bbb      	ldrb	r3, [r7, #14]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00d      	beq.n	80061b6 <USBD_StdEPReq+0x146>
 800619a:	7bbb      	ldrb	r3, [r7, #14]
 800619c:	2b80      	cmp	r3, #128	@ 0x80
 800619e:	d00a      	beq.n	80061b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80061a0:	7bbb      	ldrb	r3, [r7, #14]
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 f931 	bl	800740c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80061aa:	2180      	movs	r1, #128	@ 0x80
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f001 f92d 	bl	800740c <USBD_LL_StallEP>
 80061b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061b4:	e040      	b.n	8006238 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80061b6:	6839      	ldr	r1, [r7, #0]
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fc68 	bl	8006a8e <USBD_CtlError>
              break;
 80061be:	e03b      	b.n	8006238 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	885b      	ldrh	r3, [r3, #2]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d136      	bne.n	8006236 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80061c8:	7bbb      	ldrb	r3, [r7, #14]
 80061ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d004      	beq.n	80061dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80061d2:	7bbb      	ldrb	r3, [r7, #14]
 80061d4:	4619      	mov	r1, r3
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f001 f937 	bl	800744a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fd21 	bl	8006c24 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80061e2:	7bbb      	ldrb	r3, [r7, #14]
 80061e4:	4619      	mov	r1, r3
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff fde4 	bl	8005db4 <USBD_CoreFindEP>
 80061ec:	4603      	mov	r3, r0
 80061ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061f0:	7b7b      	ldrb	r3, [r7, #13]
 80061f2:	2bff      	cmp	r3, #255	@ 0xff
 80061f4:	d01f      	beq.n	8006236 <USBD_StdEPReq+0x1c6>
 80061f6:	7b7b      	ldrb	r3, [r7, #13]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d11c      	bne.n	8006236 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80061fc:	7b7a      	ldrb	r2, [r7, #13]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006204:	7b7a      	ldrb	r2, [r7, #13]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	32ae      	adds	r2, #174	@ 0xae
 800620a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d010      	beq.n	8006236 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006214:	7b7a      	ldrb	r2, [r7, #13]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	32ae      	adds	r2, #174	@ 0xae
 800621a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	4798      	blx	r3
 8006226:	4603      	mov	r3, r0
 8006228:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800622a:	e004      	b.n	8006236 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fc2d 	bl	8006a8e <USBD_CtlError>
              break;
 8006234:	e000      	b.n	8006238 <USBD_StdEPReq+0x1c8>
              break;
 8006236:	bf00      	nop
          }
          break;
 8006238:	e0ab      	b.n	8006392 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d002      	beq.n	800624c <USBD_StdEPReq+0x1dc>
 8006246:	2b03      	cmp	r3, #3
 8006248:	d032      	beq.n	80062b0 <USBD_StdEPReq+0x240>
 800624a:	e097      	b.n	800637c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800624c:	7bbb      	ldrb	r3, [r7, #14]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <USBD_StdEPReq+0x1f2>
 8006252:	7bbb      	ldrb	r3, [r7, #14]
 8006254:	2b80      	cmp	r3, #128	@ 0x80
 8006256:	d004      	beq.n	8006262 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fc17 	bl	8006a8e <USBD_CtlError>
                break;
 8006260:	e091      	b.n	8006386 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006262:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006266:	2b00      	cmp	r3, #0
 8006268:	da0b      	bge.n	8006282 <USBD_StdEPReq+0x212>
 800626a:	7bbb      	ldrb	r3, [r7, #14]
 800626c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006270:	4613      	mov	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	3310      	adds	r3, #16
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	3304      	adds	r3, #4
 8006280:	e00b      	b.n	800629a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006288:	4613      	mov	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	4413      	add	r3, r2
 8006298:	3304      	adds	r3, #4
 800629a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2200      	movs	r2, #0
 80062a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2202      	movs	r2, #2
 80062a6:	4619      	mov	r1, r3
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fc61 	bl	8006b70 <USBD_CtlSendData>
              break;
 80062ae:	e06a      	b.n	8006386 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80062b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	da11      	bge.n	80062dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80062b8:	7bbb      	ldrb	r3, [r7, #14]
 80062ba:	f003 020f 	and.w	r2, r3, #15
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	3324      	adds	r3, #36	@ 0x24
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d117      	bne.n	8006302 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80062d2:	6839      	ldr	r1, [r7, #0]
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fbda 	bl	8006a8e <USBD_CtlError>
                  break;
 80062da:	e054      	b.n	8006386 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80062dc:	7bbb      	ldrb	r3, [r7, #14]
 80062de:	f003 020f 	and.w	r2, r3, #15
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	4613      	mov	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d104      	bne.n	8006302 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fbc7 	bl	8006a8e <USBD_CtlError>
                  break;
 8006300:	e041      	b.n	8006386 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006306:	2b00      	cmp	r3, #0
 8006308:	da0b      	bge.n	8006322 <USBD_StdEPReq+0x2b2>
 800630a:	7bbb      	ldrb	r3, [r7, #14]
 800630c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	3310      	adds	r3, #16
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	4413      	add	r3, r2
 800631e:	3304      	adds	r3, #4
 8006320:	e00b      	b.n	800633a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006322:	7bbb      	ldrb	r3, [r7, #14]
 8006324:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006328:	4613      	mov	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	4413      	add	r3, r2
 8006338:	3304      	adds	r3, #4
 800633a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <USBD_StdEPReq+0x2d8>
 8006342:	7bbb      	ldrb	r3, [r7, #14]
 8006344:	2b80      	cmp	r3, #128	@ 0x80
 8006346:	d103      	bne.n	8006350 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2200      	movs	r2, #0
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	e00e      	b.n	800636e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006350:	7bbb      	ldrb	r3, [r7, #14]
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 f897 	bl	8007488 <USBD_LL_IsStallEP>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2201      	movs	r2, #1
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	e002      	b.n	800636e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2202      	movs	r2, #2
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fbfb 	bl	8006b70 <USBD_CtlSendData>
              break;
 800637a:	e004      	b.n	8006386 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fb85 	bl	8006a8e <USBD_CtlError>
              break;
 8006384:	bf00      	nop
          }
          break;
 8006386:	e004      	b.n	8006392 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fb7f 	bl	8006a8e <USBD_CtlError>
          break;
 8006390:	bf00      	nop
      }
      break;
 8006392:	e005      	b.n	80063a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fb79 	bl	8006a8e <USBD_CtlError>
      break;
 800639c:	e000      	b.n	80063a0 <USBD_StdEPReq+0x330>
      break;
 800639e:	bf00      	nop
  }

  return ret;
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	885b      	ldrh	r3, [r3, #2]
 80063c6:	0a1b      	lsrs	r3, r3, #8
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	3b01      	subs	r3, #1
 80063cc:	2b0e      	cmp	r3, #14
 80063ce:	f200 8152 	bhi.w	8006676 <USBD_GetDescriptor+0x2ca>
 80063d2:	a201      	add	r2, pc, #4	@ (adr r2, 80063d8 <USBD_GetDescriptor+0x2c>)
 80063d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d8:	08006449 	.word	0x08006449
 80063dc:	08006461 	.word	0x08006461
 80063e0:	080064a1 	.word	0x080064a1
 80063e4:	08006677 	.word	0x08006677
 80063e8:	08006677 	.word	0x08006677
 80063ec:	08006617 	.word	0x08006617
 80063f0:	08006643 	.word	0x08006643
 80063f4:	08006677 	.word	0x08006677
 80063f8:	08006677 	.word	0x08006677
 80063fc:	08006677 	.word	0x08006677
 8006400:	08006677 	.word	0x08006677
 8006404:	08006677 	.word	0x08006677
 8006408:	08006677 	.word	0x08006677
 800640c:	08006677 	.word	0x08006677
 8006410:	08006415 	.word	0x08006415
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00b      	beq.n	8006438 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	7c12      	ldrb	r2, [r2, #16]
 800642c:	f107 0108 	add.w	r1, r7, #8
 8006430:	4610      	mov	r0, r2
 8006432:	4798      	blx	r3
 8006434:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006436:	e126      	b.n	8006686 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fb27 	bl	8006a8e <USBD_CtlError>
        err++;
 8006440:	7afb      	ldrb	r3, [r7, #11]
 8006442:	3301      	adds	r3, #1
 8006444:	72fb      	strb	r3, [r7, #11]
      break;
 8006446:	e11e      	b.n	8006686 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	7c12      	ldrb	r2, [r2, #16]
 8006454:	f107 0108 	add.w	r1, r7, #8
 8006458:	4610      	mov	r0, r2
 800645a:	4798      	blx	r3
 800645c:	60f8      	str	r0, [r7, #12]
      break;
 800645e:	e112      	b.n	8006686 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	7c1b      	ldrb	r3, [r3, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10d      	bne.n	8006484 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800646e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006470:	f107 0208 	add.w	r2, r7, #8
 8006474:	4610      	mov	r0, r2
 8006476:	4798      	blx	r3
 8006478:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3301      	adds	r3, #1
 800647e:	2202      	movs	r2, #2
 8006480:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006482:	e100      	b.n	8006686 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800648a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648c:	f107 0208 	add.w	r2, r7, #8
 8006490:	4610      	mov	r0, r2
 8006492:	4798      	blx	r3
 8006494:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3301      	adds	r3, #1
 800649a:	2202      	movs	r2, #2
 800649c:	701a      	strb	r2, [r3, #0]
      break;
 800649e:	e0f2      	b.n	8006686 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	885b      	ldrh	r3, [r3, #2]
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b05      	cmp	r3, #5
 80064a8:	f200 80ac 	bhi.w	8006604 <USBD_GetDescriptor+0x258>
 80064ac:	a201      	add	r2, pc, #4	@ (adr r2, 80064b4 <USBD_GetDescriptor+0x108>)
 80064ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b2:	bf00      	nop
 80064b4:	080064cd 	.word	0x080064cd
 80064b8:	08006501 	.word	0x08006501
 80064bc:	08006535 	.word	0x08006535
 80064c0:	08006569 	.word	0x08006569
 80064c4:	0800659d 	.word	0x0800659d
 80064c8:	080065d1 	.word	0x080065d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00b      	beq.n	80064f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	7c12      	ldrb	r2, [r2, #16]
 80064e4:	f107 0108 	add.w	r1, r7, #8
 80064e8:	4610      	mov	r0, r2
 80064ea:	4798      	blx	r3
 80064ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ee:	e091      	b.n	8006614 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 facb 	bl	8006a8e <USBD_CtlError>
            err++;
 80064f8:	7afb      	ldrb	r3, [r7, #11]
 80064fa:	3301      	adds	r3, #1
 80064fc:	72fb      	strb	r3, [r7, #11]
          break;
 80064fe:	e089      	b.n	8006614 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00b      	beq.n	8006524 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	7c12      	ldrb	r2, [r2, #16]
 8006518:	f107 0108 	add.w	r1, r7, #8
 800651c:	4610      	mov	r0, r2
 800651e:	4798      	blx	r3
 8006520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006522:	e077      	b.n	8006614 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fab1 	bl	8006a8e <USBD_CtlError>
            err++;
 800652c:	7afb      	ldrb	r3, [r7, #11]
 800652e:	3301      	adds	r3, #1
 8006530:	72fb      	strb	r3, [r7, #11]
          break;
 8006532:	e06f      	b.n	8006614 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00b      	beq.n	8006558 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	7c12      	ldrb	r2, [r2, #16]
 800654c:	f107 0108 	add.w	r1, r7, #8
 8006550:	4610      	mov	r0, r2
 8006552:	4798      	blx	r3
 8006554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006556:	e05d      	b.n	8006614 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fa97 	bl	8006a8e <USBD_CtlError>
            err++;
 8006560:	7afb      	ldrb	r3, [r7, #11]
 8006562:	3301      	adds	r3, #1
 8006564:	72fb      	strb	r3, [r7, #11]
          break;
 8006566:	e055      	b.n	8006614 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	7c12      	ldrb	r2, [r2, #16]
 8006580:	f107 0108 	add.w	r1, r7, #8
 8006584:	4610      	mov	r0, r2
 8006586:	4798      	blx	r3
 8006588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800658a:	e043      	b.n	8006614 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fa7d 	bl	8006a8e <USBD_CtlError>
            err++;
 8006594:	7afb      	ldrb	r3, [r7, #11]
 8006596:	3301      	adds	r3, #1
 8006598:	72fb      	strb	r3, [r7, #11]
          break;
 800659a:	e03b      	b.n	8006614 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	7c12      	ldrb	r2, [r2, #16]
 80065b4:	f107 0108 	add.w	r1, r7, #8
 80065b8:	4610      	mov	r0, r2
 80065ba:	4798      	blx	r3
 80065bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065be:	e029      	b.n	8006614 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fa63 	bl	8006a8e <USBD_CtlError>
            err++;
 80065c8:	7afb      	ldrb	r3, [r7, #11]
 80065ca:	3301      	adds	r3, #1
 80065cc:	72fb      	strb	r3, [r7, #11]
          break;
 80065ce:	e021      	b.n	8006614 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00b      	beq.n	80065f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	7c12      	ldrb	r2, [r2, #16]
 80065e8:	f107 0108 	add.w	r1, r7, #8
 80065ec:	4610      	mov	r0, r2
 80065ee:	4798      	blx	r3
 80065f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065f2:	e00f      	b.n	8006614 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fa49 	bl	8006a8e <USBD_CtlError>
            err++;
 80065fc:	7afb      	ldrb	r3, [r7, #11]
 80065fe:	3301      	adds	r3, #1
 8006600:	72fb      	strb	r3, [r7, #11]
          break;
 8006602:	e007      	b.n	8006614 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fa41 	bl	8006a8e <USBD_CtlError>
          err++;
 800660c:	7afb      	ldrb	r3, [r7, #11]
 800660e:	3301      	adds	r3, #1
 8006610:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006612:	bf00      	nop
      }
      break;
 8006614:	e037      	b.n	8006686 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	7c1b      	ldrb	r3, [r3, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d109      	bne.n	8006632 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006626:	f107 0208 	add.w	r2, r7, #8
 800662a:	4610      	mov	r0, r2
 800662c:	4798      	blx	r3
 800662e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006630:	e029      	b.n	8006686 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fa2a 	bl	8006a8e <USBD_CtlError>
        err++;
 800663a:	7afb      	ldrb	r3, [r7, #11]
 800663c:	3301      	adds	r3, #1
 800663e:	72fb      	strb	r3, [r7, #11]
      break;
 8006640:	e021      	b.n	8006686 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	7c1b      	ldrb	r3, [r3, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10d      	bne.n	8006666 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006652:	f107 0208 	add.w	r2, r7, #8
 8006656:	4610      	mov	r0, r2
 8006658:	4798      	blx	r3
 800665a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3301      	adds	r3, #1
 8006660:	2207      	movs	r2, #7
 8006662:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006664:	e00f      	b.n	8006686 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fa10 	bl	8006a8e <USBD_CtlError>
        err++;
 800666e:	7afb      	ldrb	r3, [r7, #11]
 8006670:	3301      	adds	r3, #1
 8006672:	72fb      	strb	r3, [r7, #11]
      break;
 8006674:	e007      	b.n	8006686 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fa08 	bl	8006a8e <USBD_CtlError>
      err++;
 800667e:	7afb      	ldrb	r3, [r7, #11]
 8006680:	3301      	adds	r3, #1
 8006682:	72fb      	strb	r3, [r7, #11]
      break;
 8006684:	bf00      	nop
  }

  if (err != 0U)
 8006686:	7afb      	ldrb	r3, [r7, #11]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d11e      	bne.n	80066ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	88db      	ldrh	r3, [r3, #6]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d016      	beq.n	80066c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006694:	893b      	ldrh	r3, [r7, #8]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00e      	beq.n	80066b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	88da      	ldrh	r2, [r3, #6]
 800669e:	893b      	ldrh	r3, [r7, #8]
 80066a0:	4293      	cmp	r3, r2
 80066a2:	bf28      	it	cs
 80066a4:	4613      	movcs	r3, r2
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80066aa:	893b      	ldrh	r3, [r7, #8]
 80066ac:	461a      	mov	r2, r3
 80066ae:	68f9      	ldr	r1, [r7, #12]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fa5d 	bl	8006b70 <USBD_CtlSendData>
 80066b6:	e009      	b.n	80066cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f9e7 	bl	8006a8e <USBD_CtlError>
 80066c0:	e004      	b.n	80066cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 faae 	bl	8006c24 <USBD_CtlSendStatus>
 80066c8:	e000      	b.n	80066cc <USBD_GetDescriptor+0x320>
    return;
 80066ca:	bf00      	nop
  }
}
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop

080066d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	889b      	ldrh	r3, [r3, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d131      	bne.n	800674a <USBD_SetAddress+0x76>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	88db      	ldrh	r3, [r3, #6]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d12d      	bne.n	800674a <USBD_SetAddress+0x76>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	885b      	ldrh	r3, [r3, #2]
 80066f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80066f4:	d829      	bhi.n	800674a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	885b      	ldrh	r3, [r3, #2]
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006700:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b03      	cmp	r3, #3
 800670c:	d104      	bne.n	8006718 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f9bc 	bl	8006a8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006716:	e01d      	b.n	8006754 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	7bfa      	ldrb	r2, [r7, #15]
 800671c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006720:	7bfb      	ldrb	r3, [r7, #15]
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fedb 	bl	80074e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fa7a 	bl	8006c24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006730:	7bfb      	ldrb	r3, [r7, #15]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d004      	beq.n	8006740 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2202      	movs	r2, #2
 800673a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800673e:	e009      	b.n	8006754 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006748:	e004      	b.n	8006754 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800674a:	6839      	ldr	r1, [r7, #0]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f99e 	bl	8006a8e <USBD_CtlError>
  }
}
 8006752:	bf00      	nop
 8006754:	bf00      	nop
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	885b      	ldrh	r3, [r3, #2]
 800676e:	b2da      	uxtb	r2, r3
 8006770:	4b4e      	ldr	r3, [pc, #312]	@ (80068ac <USBD_SetConfig+0x150>)
 8006772:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006774:	4b4d      	ldr	r3, [pc, #308]	@ (80068ac <USBD_SetConfig+0x150>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d905      	bls.n	8006788 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800677c:	6839      	ldr	r1, [r7, #0]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f985 	bl	8006a8e <USBD_CtlError>
    return USBD_FAIL;
 8006784:	2303      	movs	r3, #3
 8006786:	e08c      	b.n	80068a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d002      	beq.n	800679a <USBD_SetConfig+0x3e>
 8006794:	2b03      	cmp	r3, #3
 8006796:	d029      	beq.n	80067ec <USBD_SetConfig+0x90>
 8006798:	e075      	b.n	8006886 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800679a:	4b44      	ldr	r3, [pc, #272]	@ (80068ac <USBD_SetConfig+0x150>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d020      	beq.n	80067e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80067a2:	4b42      	ldr	r3, [pc, #264]	@ (80068ac <USBD_SetConfig+0x150>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	461a      	mov	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80067ac:	4b3f      	ldr	r3, [pc, #252]	@ (80068ac <USBD_SetConfig+0x150>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7fe ffb9 	bl	800572a <USBD_SetClassConfig>
 80067b8:	4603      	mov	r3, r0
 80067ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d008      	beq.n	80067d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f962 	bl	8006a8e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2202      	movs	r2, #2
 80067ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80067d2:	e065      	b.n	80068a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fa25 	bl	8006c24 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2203      	movs	r2, #3
 80067de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80067e2:	e05d      	b.n	80068a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fa1d 	bl	8006c24 <USBD_CtlSendStatus>
      break;
 80067ea:	e059      	b.n	80068a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80067ec:	4b2f      	ldr	r3, [pc, #188]	@ (80068ac <USBD_SetConfig+0x150>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d112      	bne.n	800681a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80067fc:	4b2b      	ldr	r3, [pc, #172]	@ (80068ac <USBD_SetConfig+0x150>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	461a      	mov	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006806:	4b29      	ldr	r3, [pc, #164]	@ (80068ac <USBD_SetConfig+0x150>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7fe ffa8 	bl	8005762 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fa06 	bl	8006c24 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006818:	e042      	b.n	80068a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800681a:	4b24      	ldr	r3, [pc, #144]	@ (80068ac <USBD_SetConfig+0x150>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	429a      	cmp	r2, r3
 8006826:	d02a      	beq.n	800687e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7fe ff96 	bl	8005762 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006836:	4b1d      	ldr	r3, [pc, #116]	@ (80068ac <USBD_SetConfig+0x150>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006840:	4b1a      	ldr	r3, [pc, #104]	@ (80068ac <USBD_SetConfig+0x150>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fe ff6f 	bl	800572a <USBD_SetClassConfig>
 800684c:	4603      	mov	r3, r0
 800684e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00f      	beq.n	8006876 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f918 	bl	8006a8e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7fe ff7b 	bl	8005762 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006874:	e014      	b.n	80068a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f9d4 	bl	8006c24 <USBD_CtlSendStatus>
      break;
 800687c:	e010      	b.n	80068a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f9d0 	bl	8006c24 <USBD_CtlSendStatus>
      break;
 8006884:	e00c      	b.n	80068a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f900 	bl	8006a8e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800688e:	4b07      	ldr	r3, [pc, #28]	@ (80068ac <USBD_SetConfig+0x150>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7fe ff64 	bl	8005762 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800689a:	2303      	movs	r3, #3
 800689c:	73fb      	strb	r3, [r7, #15]
      break;
 800689e:	bf00      	nop
  }

  return ret;
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	2000021c 	.word	0x2000021c

080068b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	88db      	ldrh	r3, [r3, #6]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d004      	beq.n	80068cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f8e2 	bl	8006a8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80068ca:	e023      	b.n	8006914 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	dc02      	bgt.n	80068de <USBD_GetConfig+0x2e>
 80068d8:	2b00      	cmp	r3, #0
 80068da:	dc03      	bgt.n	80068e4 <USBD_GetConfig+0x34>
 80068dc:	e015      	b.n	800690a <USBD_GetConfig+0x5a>
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d00b      	beq.n	80068fa <USBD_GetConfig+0x4a>
 80068e2:	e012      	b.n	800690a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	3308      	adds	r3, #8
 80068ee:	2201      	movs	r2, #1
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f93c 	bl	8006b70 <USBD_CtlSendData>
        break;
 80068f8:	e00c      	b.n	8006914 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3304      	adds	r3, #4
 80068fe:	2201      	movs	r2, #1
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f934 	bl	8006b70 <USBD_CtlSendData>
        break;
 8006908:	e004      	b.n	8006914 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f8be 	bl	8006a8e <USBD_CtlError>
        break;
 8006912:	bf00      	nop
}
 8006914:	bf00      	nop
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800692c:	b2db      	uxtb	r3, r3
 800692e:	3b01      	subs	r3, #1
 8006930:	2b02      	cmp	r3, #2
 8006932:	d81e      	bhi.n	8006972 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	88db      	ldrh	r3, [r3, #6]
 8006938:	2b02      	cmp	r3, #2
 800693a:	d004      	beq.n	8006946 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f8a5 	bl	8006a8e <USBD_CtlError>
        break;
 8006944:	e01a      	b.n	800697c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	f043 0202 	orr.w	r2, r3, #2
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	330c      	adds	r3, #12
 8006966:	2202      	movs	r2, #2
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f900 	bl	8006b70 <USBD_CtlSendData>
      break;
 8006970:	e004      	b.n	800697c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f88a 	bl	8006a8e <USBD_CtlError>
      break;
 800697a:	bf00      	nop
  }
}
 800697c:	bf00      	nop
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	885b      	ldrh	r3, [r3, #2]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d107      	bne.n	80069a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f940 	bl	8006c24 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80069a4:	e013      	b.n	80069ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	885b      	ldrh	r3, [r3, #2]
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d10b      	bne.n	80069c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	889b      	ldrh	r3, [r3, #4]
 80069b2:	0a1b      	lsrs	r3, r3, #8
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f930 	bl	8006c24 <USBD_CtlSendStatus>
}
 80069c4:	e003      	b.n	80069ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f860 	bl	8006a8e <USBD_CtlError>
}
 80069ce:	bf00      	nop
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	3b01      	subs	r3, #1
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d80b      	bhi.n	8006a06 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	885b      	ldrh	r3, [r3, #2]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d10c      	bne.n	8006a10 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f910 	bl	8006c24 <USBD_CtlSendStatus>
      }
      break;
 8006a04:	e004      	b.n	8006a10 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f840 	bl	8006a8e <USBD_CtlError>
      break;
 8006a0e:	e000      	b.n	8006a12 <USBD_ClrFeature+0x3c>
      break;
 8006a10:	bf00      	nop
  }
}
 8006a12:	bf00      	nop
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	781a      	ldrb	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3301      	adds	r3, #1
 8006a34:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	781a      	ldrb	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3301      	adds	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f7ff fa16 	bl	8005e76 <SWAPBYTE>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3301      	adds	r3, #1
 8006a56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f7ff fa09 	bl	8005e76 <SWAPBYTE>
 8006a64:	4603      	mov	r3, r0
 8006a66:	461a      	mov	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3301      	adds	r3, #1
 8006a76:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f7ff f9fc 	bl	8005e76 <SWAPBYTE>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	461a      	mov	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	80da      	strh	r2, [r3, #6]
}
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b082      	sub	sp, #8
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a98:	2180      	movs	r1, #128	@ 0x80
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fcb6 	bl	800740c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fcb2 	bl	800740c <USBD_LL_StallEP>
}
 8006aa8:	bf00      	nop
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d036      	beq.n	8006b34 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006aca:	6938      	ldr	r0, [r7, #16]
 8006acc:	f000 f836 	bl	8006b3c <USBD_GetLen>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	7812      	ldrb	r2, [r2, #0]
 8006ae8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
 8006aec:	3301      	adds	r3, #1
 8006aee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	4413      	add	r3, r2
 8006af6:	2203      	movs	r2, #3
 8006af8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006afa:	7dfb      	ldrb	r3, [r7, #23]
 8006afc:	3301      	adds	r3, #1
 8006afe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b00:	e013      	b.n	8006b2a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	4413      	add	r3, r2
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	7812      	ldrb	r2, [r2, #0]
 8006b0c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	3301      	adds	r3, #1
 8006b12:	613b      	str	r3, [r7, #16]
    idx++;
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
 8006b16:	3301      	adds	r3, #1
 8006b18:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	4413      	add	r3, r2
 8006b20:	2200      	movs	r2, #0
 8006b22:	701a      	strb	r2, [r3, #0]
    idx++;
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
 8006b26:	3301      	adds	r3, #1
 8006b28:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e7      	bne.n	8006b02 <USBD_GetString+0x52>
 8006b32:	e000      	b.n	8006b36 <USBD_GetString+0x86>
    return;
 8006b34:	bf00      	nop
  }
}
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006b4c:	e005      	b.n	8006b5a <USBD_GetLen+0x1e>
  {
    len++;
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
 8006b50:	3301      	adds	r3, #1
 8006b52:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	3301      	adds	r3, #1
 8006b58:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1f5      	bne.n	8006b4e <USBD_GetLen+0x12>
  }

  return len;
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	2100      	movs	r1, #0
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f000 fcc1 	bl	800751e <USBD_LL_Transmit>

  return USBD_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	60b9      	str	r1, [r7, #8]
 8006bb0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 fcb0 	bl	800751e <USBD_LL_Transmit>

  return USBD_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2203      	movs	r2, #3
 8006bd8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 fcb4 	bl	8007560 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	2100      	movs	r1, #0
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 fca3 	bl	8007560 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2204      	movs	r2, #4
 8006c30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006c34:	2300      	movs	r3, #0
 8006c36:	2200      	movs	r2, #0
 8006c38:	2100      	movs	r1, #0
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fc6f 	bl	800751e <USBD_LL_Transmit>

  return USBD_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2205      	movs	r2, #5
 8006c56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2100      	movs	r1, #0
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fc7d 	bl	8007560 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <input_test>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void input_test(void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
	TouchpadReport touchpadReport = {0};
 8006c76:	1d3b      	adds	r3, r7, #4
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	605a      	str	r2, [r3, #4]
 8006c7e:	811a      	strh	r2, [r3, #8]
	touchpadReport.report_ID = REPORTID_TOUCHPAD;
 8006c80:	2301      	movs	r3, #1
 8006c82:	713b      	strb	r3, [r7, #4]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *) &touchpadReport, sizeof (touchpadReport));
 8006c84:	1d3b      	adds	r3, r7, #4
 8006c86:	220a      	movs	r2, #10
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4803      	ldr	r0, [pc, #12]	@ (8006c98 <input_test+0x28>)
 8006c8c:	f7fe fb48 	bl	8005320 <USBD_CUSTOM_HID_SendReport>
	printf("");
}
 8006c90:	bf00      	nop
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	20000220 	.word	0x20000220

08006c9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	4912      	ldr	r1, [pc, #72]	@ (8006cec <MX_USB_DEVICE_Init+0x50>)
 8006ca4:	4812      	ldr	r0, [pc, #72]	@ (8006cf0 <MX_USB_DEVICE_Init+0x54>)
 8006ca6:	f7fe fcc3 	bl	8005630 <USBD_Init>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006cb0:	f7f9 fd38 	bl	8000724 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006cb4:	490f      	ldr	r1, [pc, #60]	@ (8006cf4 <MX_USB_DEVICE_Init+0x58>)
 8006cb6:	480e      	ldr	r0, [pc, #56]	@ (8006cf0 <MX_USB_DEVICE_Init+0x54>)
 8006cb8:	f7fe fcea 	bl	8005690 <USBD_RegisterClass>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006cc2:	f7f9 fd2f 	bl	8000724 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006cc6:	490c      	ldr	r1, [pc, #48]	@ (8006cf8 <MX_USB_DEVICE_Init+0x5c>)
 8006cc8:	4809      	ldr	r0, [pc, #36]	@ (8006cf0 <MX_USB_DEVICE_Init+0x54>)
 8006cca:	f7fe fc97 	bl	80055fc <USBD_CUSTOM_HID_RegisterInterface>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006cd4:	f7f9 fd26 	bl	8000724 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006cd8:	4805      	ldr	r0, [pc, #20]	@ (8006cf0 <MX_USB_DEVICE_Init+0x54>)
 8006cda:	f7fe fd0f 	bl	80056fc <USBD_Start>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006ce4:	f7f9 fd1e 	bl	8000724 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ce8:	bf00      	nop
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	2000019c 	.word	0x2000019c
 8006cf0:	20000220 	.word	0x20000220
 8006cf4:	2000000c 	.word	0x2000000c
 8006cf8:	2000018c 	.word	0x2000018c

08006cfc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006d00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006d10:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t report_ID, uint8_t data)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	460a      	mov	r2, r1
 8006d26:	71fb      	strb	r3, [r7, #7]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */

	/*
	 * Receive feature reports from host
	 */
	if (report_ID == REPORTID_INPUT_MODE)
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d103      	bne.n	8006d3a <CUSTOM_HID_OutEvent_FS+0x1e>
	{
		touchpadConfiguration.input_mode = data;
 8006d32:	4a10      	ldr	r2, [pc, #64]	@ (8006d74 <CUSTOM_HID_OutEvent_FS+0x58>)
 8006d34:	79bb      	ldrb	r3, [r7, #6]
 8006d36:	7013      	strb	r3, [r2, #0]
 8006d38:	e00e      	b.n	8006d58 <CUSTOM_HID_OutEvent_FS+0x3c>
	}
	else if (report_ID == REPORTID_FUNCTION_SWITCH)
 8006d3a:	79fb      	ldrb	r3, [r7, #7]
 8006d3c:	2b05      	cmp	r3, #5
 8006d3e:	d10b      	bne.n	8006d58 <CUSTOM_HID_OutEvent_FS+0x3c>
	{
		touchpadConfiguration.surface_switch = data & 0b00000001;
 8006d40:	79bb      	ldrb	r3, [r7, #6]
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	4b0a      	ldr	r3, [pc, #40]	@ (8006d74 <CUSTOM_HID_OutEvent_FS+0x58>)
 8006d4a:	705a      	strb	r2, [r3, #1]
		touchpadConfiguration.button_switch = data & 0b00000010;
 8006d4c:	79bb      	ldrb	r3, [r7, #6]
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	4b07      	ldr	r3, [pc, #28]	@ (8006d74 <CUSTOM_HID_OutEvent_FS+0x58>)
 8006d56:	709a      	strb	r2, [r3, #2]
	}

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8006d58:	4807      	ldr	r0, [pc, #28]	@ (8006d78 <CUSTOM_HID_OutEvent_FS+0x5c>)
 8006d5a:	f7fe fbed 	bl	8005538 <USBD_CUSTOM_HID_ReceivePacket>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <CUSTOM_HID_OutEvent_FS+0x4e>
  {
    return -1;
 8006d64:	f04f 33ff 	mov.w	r3, #4294967295
 8006d68:	e000      	b.n	8006d6c <CUSTOM_HID_OutEvent_FS+0x50>
  }

  return (USBD_OK);
 8006d6a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	200004fc 	.word	0x200004fc
 8006d78:	20000220 	.word	0x20000220

08006d7c <get_touchpad_configuration>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */


TouchpadConfiguration get_touchpad_configuration(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
	return touchpadConfiguration;
 8006d82:	4a0c      	ldr	r2, [pc, #48]	@ (8006db4 <get_touchpad_configuration+0x38>)
 8006d84:	1d3b      	adds	r3, r7, #4
 8006d86:	6812      	ldr	r2, [r2, #0]
 8006d88:	4611      	mov	r1, r2
 8006d8a:	8019      	strh	r1, [r3, #0]
 8006d8c:	3302      	adds	r3, #2
 8006d8e:	0c12      	lsrs	r2, r2, #16
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	2300      	movs	r3, #0
 8006d94:	793a      	ldrb	r2, [r7, #4]
 8006d96:	f362 0307 	bfi	r3, r2, #0, #8
 8006d9a:	797a      	ldrb	r2, [r7, #5]
 8006d9c:	f362 230f 	bfi	r3, r2, #8, #8
 8006da0:	79ba      	ldrb	r2, [r7, #6]
 8006da2:	f362 4317 	bfi	r3, r2, #16, #8
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	200004fc 	.word	0x200004fc

08006db8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	6039      	str	r1, [r7, #0]
 8006dc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2212      	movs	r2, #18
 8006dc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006dca:	4b03      	ldr	r3, [pc, #12]	@ (8006dd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	200001bc 	.word	0x200001bc

08006ddc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4603      	mov	r3, r0
 8006de4:	6039      	str	r1, [r7, #0]
 8006de6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2204      	movs	r2, #4
 8006dec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006dee:	4b03      	ldr	r3, [pc, #12]	@ (8006dfc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	200001dc 	.word	0x200001dc

08006e00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	6039      	str	r1, [r7, #0]
 8006e0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e0c:	79fb      	ldrb	r3, [r7, #7]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d105      	bne.n	8006e1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	4907      	ldr	r1, [pc, #28]	@ (8006e34 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e16:	4808      	ldr	r0, [pc, #32]	@ (8006e38 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e18:	f7ff fe4a 	bl	8006ab0 <USBD_GetString>
 8006e1c:	e004      	b.n	8006e28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	4904      	ldr	r1, [pc, #16]	@ (8006e34 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e22:	4805      	ldr	r0, [pc, #20]	@ (8006e38 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e24:	f7ff fe44 	bl	8006ab0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e28:	4b02      	ldr	r3, [pc, #8]	@ (8006e34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20000500 	.word	0x20000500
 8006e38:	08007754 	.word	0x08007754

08006e3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	4603      	mov	r3, r0
 8006e44:	6039      	str	r1, [r7, #0]
 8006e46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	4904      	ldr	r1, [pc, #16]	@ (8006e5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e4c:	4804      	ldr	r0, [pc, #16]	@ (8006e60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e4e:	f7ff fe2f 	bl	8006ab0 <USBD_GetString>
  return USBD_StrDesc;
 8006e52:	4b02      	ldr	r3, [pc, #8]	@ (8006e5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	20000500 	.word	0x20000500
 8006e60:	08007774 	.word	0x08007774

08006e64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	6039      	str	r1, [r7, #0]
 8006e6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	221a      	movs	r2, #26
 8006e74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e76:	f000 f855 	bl	8006f24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006e7a:	4b02      	ldr	r3, [pc, #8]	@ (8006e84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	200001e0 	.word	0x200001e0

08006e88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	6039      	str	r1, [r7, #0]
 8006e92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d105      	bne.n	8006ea6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	4907      	ldr	r1, [pc, #28]	@ (8006ebc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e9e:	4808      	ldr	r0, [pc, #32]	@ (8006ec0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ea0:	f7ff fe06 	bl	8006ab0 <USBD_GetString>
 8006ea4:	e004      	b.n	8006eb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	4904      	ldr	r1, [pc, #16]	@ (8006ebc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006eaa:	4805      	ldr	r0, [pc, #20]	@ (8006ec0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006eac:	f7ff fe00 	bl	8006ab0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006eb0:	4b02      	ldr	r3, [pc, #8]	@ (8006ebc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000500 	.word	0x20000500
 8006ec0:	08007788 	.word	0x08007788

08006ec4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	6039      	str	r1, [r7, #0]
 8006ece:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d105      	bne.n	8006ee2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	4907      	ldr	r1, [pc, #28]	@ (8006ef8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006eda:	4808      	ldr	r0, [pc, #32]	@ (8006efc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006edc:	f7ff fde8 	bl	8006ab0 <USBD_GetString>
 8006ee0:	e004      	b.n	8006eec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	4904      	ldr	r1, [pc, #16]	@ (8006ef8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ee6:	4805      	ldr	r0, [pc, #20]	@ (8006efc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ee8:	f7ff fde2 	bl	8006ab0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006eec:	4b02      	ldr	r3, [pc, #8]	@ (8006ef8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000500 	.word	0x20000500
 8006efc:	0800779c 	.word	0x0800779c

08006f00 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4603      	mov	r3, r0
 8006f08:	6039      	str	r1, [r7, #0]
 8006f0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	220c      	movs	r2, #12
 8006f10:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006f12:	4b03      	ldr	r3, [pc, #12]	@ (8006f20 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	200001d0 	.word	0x200001d0

08006f24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f68 <Get_SerialNum+0x44>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f30:	4b0e      	ldr	r3, [pc, #56]	@ (8006f6c <Get_SerialNum+0x48>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f36:	4b0e      	ldr	r3, [pc, #56]	@ (8006f70 <Get_SerialNum+0x4c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4413      	add	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d009      	beq.n	8006f5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f4a:	2208      	movs	r2, #8
 8006f4c:	4909      	ldr	r1, [pc, #36]	@ (8006f74 <Get_SerialNum+0x50>)
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 f814 	bl	8006f7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f54:	2204      	movs	r2, #4
 8006f56:	4908      	ldr	r1, [pc, #32]	@ (8006f78 <Get_SerialNum+0x54>)
 8006f58:	68b8      	ldr	r0, [r7, #8]
 8006f5a:	f000 f80f 	bl	8006f7c <IntToUnicode>
  }
}
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	1fff7a10 	.word	0x1fff7a10
 8006f6c:	1fff7a14 	.word	0x1fff7a14
 8006f70:	1fff7a18 	.word	0x1fff7a18
 8006f74:	200001e2 	.word	0x200001e2
 8006f78:	200001f2 	.word	0x200001f2

08006f7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	4613      	mov	r3, r2
 8006f88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f8e:	2300      	movs	r3, #0
 8006f90:	75fb      	strb	r3, [r7, #23]
 8006f92:	e027      	b.n	8006fe4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	0f1b      	lsrs	r3, r3, #28
 8006f98:	2b09      	cmp	r3, #9
 8006f9a:	d80b      	bhi.n	8006fb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	0f1b      	lsrs	r3, r3, #28
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	005b      	lsls	r3, r3, #1
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	440b      	add	r3, r1
 8006fac:	3230      	adds	r2, #48	@ 0x30
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	701a      	strb	r2, [r3, #0]
 8006fb2:	e00a      	b.n	8006fca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	0f1b      	lsrs	r3, r3, #28
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	7dfb      	ldrb	r3, [r7, #23]
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	440b      	add	r3, r1
 8006fc4:	3237      	adds	r2, #55	@ 0x37
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006fd0:	7dfb      	ldrb	r3, [r7, #23]
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	4413      	add	r3, r2
 8006fda:	2200      	movs	r2, #0
 8006fdc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006fde:	7dfb      	ldrb	r3, [r7, #23]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	75fb      	strb	r3, [r7, #23]
 8006fe4:	7dfa      	ldrb	r2, [r7, #23]
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d3d3      	bcc.n	8006f94 <IntToUnicode+0x18>
  }
}
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
	...

08006ffc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b0a0      	sub	sp, #128	@ 0x80
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007004:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007008:	2200      	movs	r2, #0
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	605a      	str	r2, [r3, #4]
 800700e:	609a      	str	r2, [r3, #8]
 8007010:	60da      	str	r2, [r3, #12]
 8007012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007014:	f107 0310 	add.w	r3, r7, #16
 8007018:	225c      	movs	r2, #92	@ 0x5c
 800701a:	2100      	movs	r1, #0
 800701c:	4618      	mov	r0, r3
 800701e:	f000 fb53 	bl	80076c8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800702a:	d149      	bne.n	80070c0 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800702c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007030:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007032:	2300      	movs	r3, #0
 8007034:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007036:	f107 0310 	add.w	r3, r7, #16
 800703a:	4618      	mov	r0, r3
 800703c:	f7fb fafa 	bl	8002634 <HAL_RCCEx_PeriphCLKConfig>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8007046:	f7f9 fb6d 	bl	8000724 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800704a:	2300      	movs	r3, #0
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	4b1e      	ldr	r3, [pc, #120]	@ (80070c8 <HAL_PCD_MspInit+0xcc>)
 8007050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007052:	4a1d      	ldr	r2, [pc, #116]	@ (80070c8 <HAL_PCD_MspInit+0xcc>)
 8007054:	f043 0301 	orr.w	r3, r3, #1
 8007058:	6313      	str	r3, [r2, #48]	@ 0x30
 800705a:	4b1b      	ldr	r3, [pc, #108]	@ (80070c8 <HAL_PCD_MspInit+0xcc>)
 800705c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007066:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800706a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800706c:	2302      	movs	r3, #2
 800706e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007070:	2300      	movs	r3, #0
 8007072:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007074:	2303      	movs	r3, #3
 8007076:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007078:	230a      	movs	r3, #10
 800707a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800707c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007080:	4619      	mov	r1, r3
 8007082:	4812      	ldr	r0, [pc, #72]	@ (80070cc <HAL_PCD_MspInit+0xd0>)
 8007084:	f7f9 fd9a 	bl	8000bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007088:	4b0f      	ldr	r3, [pc, #60]	@ (80070c8 <HAL_PCD_MspInit+0xcc>)
 800708a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800708c:	4a0e      	ldr	r2, [pc, #56]	@ (80070c8 <HAL_PCD_MspInit+0xcc>)
 800708e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007092:	6353      	str	r3, [r2, #52]	@ 0x34
 8007094:	2300      	movs	r3, #0
 8007096:	60bb      	str	r3, [r7, #8]
 8007098:	4b0b      	ldr	r3, [pc, #44]	@ (80070c8 <HAL_PCD_MspInit+0xcc>)
 800709a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800709c:	4a0a      	ldr	r2, [pc, #40]	@ (80070c8 <HAL_PCD_MspInit+0xcc>)
 800709e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80070a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80070a4:	4b08      	ldr	r3, [pc, #32]	@ (80070c8 <HAL_PCD_MspInit+0xcc>)
 80070a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070ac:	60bb      	str	r3, [r7, #8]
 80070ae:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80070b0:	2200      	movs	r2, #0
 80070b2:	2100      	movs	r1, #0
 80070b4:	2043      	movs	r0, #67	@ 0x43
 80070b6:	f7f9 fd4a 	bl	8000b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80070ba:	2043      	movs	r0, #67	@ 0x43
 80070bc:	f7f9 fd63 	bl	8000b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80070c0:	bf00      	nop
 80070c2:	3780      	adds	r7, #128	@ 0x80
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	40023800 	.word	0x40023800
 80070cc:	40020000 	.word	0x40020000

080070d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070e4:	4619      	mov	r1, r3
 80070e6:	4610      	mov	r0, r2
 80070e8:	f7fe fb55 	bl	8005796 <USBD_LL_SetupStage>
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007106:	78fa      	ldrb	r2, [r7, #3]
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	4613      	mov	r3, r2
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	4413      	add	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	440b      	add	r3, r1
 8007114:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	78fb      	ldrb	r3, [r7, #3]
 800711c:	4619      	mov	r1, r3
 800711e:	f7fe fb8f 	bl	8005840 <USBD_LL_DataOutStage>
}
 8007122:	bf00      	nop
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	460b      	mov	r3, r1
 8007134:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800713c:	78fa      	ldrb	r2, [r7, #3]
 800713e:	6879      	ldr	r1, [r7, #4]
 8007140:	4613      	mov	r3, r2
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	440b      	add	r3, r1
 800714a:	3320      	adds	r3, #32
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	78fb      	ldrb	r3, [r7, #3]
 8007150:	4619      	mov	r1, r3
 8007152:	f7fe fc28 	bl	80059a6 <USBD_LL_DataInStage>
}
 8007156:	bf00      	nop
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800716c:	4618      	mov	r0, r3
 800716e:	f7fe fd62 	bl	8005c36 <USBD_LL_SOF>
}
 8007172:	bf00      	nop
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007182:	2301      	movs	r3, #1
 8007184:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	79db      	ldrb	r3, [r3, #7]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]
 8007192:	e008      	b.n	80071a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	79db      	ldrb	r3, [r3, #7]
 8007198:	2b02      	cmp	r3, #2
 800719a:	d102      	bne.n	80071a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800719c:	2301      	movs	r3, #1
 800719e:	73fb      	strb	r3, [r7, #15]
 80071a0:	e001      	b.n	80071a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80071a2:	f7f9 fabf 	bl	8000724 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071ac:	7bfa      	ldrb	r2, [r7, #15]
 80071ae:	4611      	mov	r1, r2
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe fcfc 	bl	8005bae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fe fca4 	bl	8005b0a <USBD_LL_Reset>
}
 80071c2:	bf00      	nop
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
	...

080071cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fe fcf7 	bl	8005bce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6812      	ldr	r2, [r2, #0]
 80071ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80071f2:	f043 0301 	orr.w	r3, r3, #1
 80071f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	7adb      	ldrb	r3, [r3, #11]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d005      	beq.n	800720c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007200:	4b04      	ldr	r3, [pc, #16]	@ (8007214 <HAL_PCD_SuspendCallback+0x48>)
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	4a03      	ldr	r2, [pc, #12]	@ (8007214 <HAL_PCD_SuspendCallback+0x48>)
 8007206:	f043 0306 	orr.w	r3, r3, #6
 800720a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800720c:	bf00      	nop
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	e000ed00 	.word	0xe000ed00

08007218 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe fced 	bl	8005c06 <USBD_LL_Resume>
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007246:	78fa      	ldrb	r2, [r7, #3]
 8007248:	4611      	mov	r1, r2
 800724a:	4618      	mov	r0, r3
 800724c:	f7fe fd45 	bl	8005cda <USBD_LL_IsoOUTIncomplete>
}
 8007250:	bf00      	nop
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800726a:	78fa      	ldrb	r2, [r7, #3]
 800726c:	4611      	mov	r1, r2
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe fd01 	bl	8005c76 <USBD_LL_IsoINIncomplete>
}
 8007274:	bf00      	nop
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fd57 	bl	8005d3e <USBD_LL_DevConnected>
}
 8007290:	bf00      	nop
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fe fd54 	bl	8005d54 <USBD_LL_DevDisconnected>
}
 80072ac:	bf00      	nop
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d13c      	bne.n	800733e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80072c4:	4a20      	ldr	r2, [pc, #128]	@ (8007348 <USBD_LL_Init+0x94>)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007348 <USBD_LL_Init+0x94>)
 80072d0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007348 <USBD_LL_Init+0x94>)
 80072d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80072da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80072dc:	4b1a      	ldr	r3, [pc, #104]	@ (8007348 <USBD_LL_Init+0x94>)
 80072de:	2206      	movs	r2, #6
 80072e0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80072e2:	4b19      	ldr	r3, [pc, #100]	@ (8007348 <USBD_LL_Init+0x94>)
 80072e4:	2202      	movs	r2, #2
 80072e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80072e8:	4b17      	ldr	r3, [pc, #92]	@ (8007348 <USBD_LL_Init+0x94>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80072ee:	4b16      	ldr	r3, [pc, #88]	@ (8007348 <USBD_LL_Init+0x94>)
 80072f0:	2202      	movs	r2, #2
 80072f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80072f4:	4b14      	ldr	r3, [pc, #80]	@ (8007348 <USBD_LL_Init+0x94>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80072fa:	4b13      	ldr	r3, [pc, #76]	@ (8007348 <USBD_LL_Init+0x94>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007300:	4b11      	ldr	r3, [pc, #68]	@ (8007348 <USBD_LL_Init+0x94>)
 8007302:	2200      	movs	r2, #0
 8007304:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007306:	4b10      	ldr	r3, [pc, #64]	@ (8007348 <USBD_LL_Init+0x94>)
 8007308:	2200      	movs	r2, #0
 800730a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800730c:	4b0e      	ldr	r3, [pc, #56]	@ (8007348 <USBD_LL_Init+0x94>)
 800730e:	2200      	movs	r2, #0
 8007310:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007312:	480d      	ldr	r0, [pc, #52]	@ (8007348 <USBD_LL_Init+0x94>)
 8007314:	f7f9 fe17 	bl	8000f46 <HAL_PCD_Init>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800731e:	f7f9 fa01 	bl	8000724 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007322:	2180      	movs	r1, #128	@ 0x80
 8007324:	4808      	ldr	r0, [pc, #32]	@ (8007348 <USBD_LL_Init+0x94>)
 8007326:	f7fb f85e 	bl	80023e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800732a:	2240      	movs	r2, #64	@ 0x40
 800732c:	2100      	movs	r1, #0
 800732e:	4806      	ldr	r0, [pc, #24]	@ (8007348 <USBD_LL_Init+0x94>)
 8007330:	f7fb f812 	bl	8002358 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007334:	2280      	movs	r2, #128	@ 0x80
 8007336:	2101      	movs	r1, #1
 8007338:	4803      	ldr	r0, [pc, #12]	@ (8007348 <USBD_LL_Init+0x94>)
 800733a:	f7fb f80d 	bl	8002358 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	20000700 	.word	0x20000700

0800734c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007362:	4618      	mov	r0, r3
 8007364:	f7f9 ff05 	bl	8001172 <HAL_PCD_Start>
 8007368:	4603      	mov	r3, r0
 800736a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800736c:	7bfb      	ldrb	r3, [r7, #15]
 800736e:	4618      	mov	r0, r3
 8007370:	f000 f97e 	bl	8007670 <USBD_Get_USB_Status>
 8007374:	4603      	mov	r3, r0
 8007376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007378:	7bbb      	ldrb	r3, [r7, #14]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	4608      	mov	r0, r1
 800738c:	4611      	mov	r1, r2
 800738e:	461a      	mov	r2, r3
 8007390:	4603      	mov	r3, r0
 8007392:	70fb      	strb	r3, [r7, #3]
 8007394:	460b      	mov	r3, r1
 8007396:	70bb      	strb	r3, [r7, #2]
 8007398:	4613      	mov	r3, r2
 800739a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80073aa:	78bb      	ldrb	r3, [r7, #2]
 80073ac:	883a      	ldrh	r2, [r7, #0]
 80073ae:	78f9      	ldrb	r1, [r7, #3]
 80073b0:	f7fa fc06 	bl	8001bc0 <HAL_PCD_EP_Open>
 80073b4:	4603      	mov	r3, r0
 80073b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 f958 	bl	8007670 <USBD_Get_USB_Status>
 80073c0:	4603      	mov	r3, r0
 80073c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	460b      	mov	r3, r1
 80073d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073e8:	78fa      	ldrb	r2, [r7, #3]
 80073ea:	4611      	mov	r1, r2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fa fc4f 	bl	8001c90 <HAL_PCD_EP_Close>
 80073f2:	4603      	mov	r3, r0
 80073f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 f939 	bl	8007670 <USBD_Get_USB_Status>
 80073fe:	4603      	mov	r3, r0
 8007400:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007402:	7bbb      	ldrb	r3, [r7, #14]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007426:	78fa      	ldrb	r2, [r7, #3]
 8007428:	4611      	mov	r1, r2
 800742a:	4618      	mov	r0, r3
 800742c:	f7fa fcef 	bl	8001e0e <HAL_PCD_EP_SetStall>
 8007430:	4603      	mov	r3, r0
 8007432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	4618      	mov	r0, r3
 8007438:	f000 f91a 	bl	8007670 <USBD_Get_USB_Status>
 800743c:	4603      	mov	r3, r0
 800743e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007440:	7bbb      	ldrb	r3, [r7, #14]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	460b      	mov	r3, r1
 8007454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007464:	78fa      	ldrb	r2, [r7, #3]
 8007466:	4611      	mov	r1, r2
 8007468:	4618      	mov	r0, r3
 800746a:	f7fa fd33 	bl	8001ed4 <HAL_PCD_EP_ClrStall>
 800746e:	4603      	mov	r3, r0
 8007470:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007472:	7bfb      	ldrb	r3, [r7, #15]
 8007474:	4618      	mov	r0, r3
 8007476:	f000 f8fb 	bl	8007670 <USBD_Get_USB_Status>
 800747a:	4603      	mov	r3, r0
 800747c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800747e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	460b      	mov	r3, r1
 8007492:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800749a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800749c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	da0b      	bge.n	80074bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80074a4:	78fb      	ldrb	r3, [r7, #3]
 80074a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074aa:	68f9      	ldr	r1, [r7, #12]
 80074ac:	4613      	mov	r3, r2
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	4413      	add	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	440b      	add	r3, r1
 80074b6:	3316      	adds	r3, #22
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	e00b      	b.n	80074d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074c2:	68f9      	ldr	r1, [r7, #12]
 80074c4:	4613      	mov	r3, r2
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	4413      	add	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	440b      	add	r3, r1
 80074ce:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80074d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	460b      	mov	r3, r1
 80074ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074fa:	78fa      	ldrb	r2, [r7, #3]
 80074fc:	4611      	mov	r1, r2
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fa fb3a 	bl	8001b78 <HAL_PCD_SetAddress>
 8007504:	4603      	mov	r3, r0
 8007506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	4618      	mov	r0, r3
 800750c:	f000 f8b0 	bl	8007670 <USBD_Get_USB_Status>
 8007510:	4603      	mov	r3, r0
 8007512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007514:	7bbb      	ldrb	r3, [r7, #14]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b086      	sub	sp, #24
 8007522:	af00      	add	r7, sp, #0
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	603b      	str	r3, [r7, #0]
 800752a:	460b      	mov	r3, r1
 800752c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800753c:	7af9      	ldrb	r1, [r7, #11]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	f7fa fc2a 	bl	8001d9a <HAL_PCD_EP_Transmit>
 8007546:	4603      	mov	r3, r0
 8007548:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800754a:	7dfb      	ldrb	r3, [r7, #23]
 800754c:	4618      	mov	r0, r3
 800754e:	f000 f88f 	bl	8007670 <USBD_Get_USB_Status>
 8007552:	4603      	mov	r3, r0
 8007554:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007556:	7dbb      	ldrb	r3, [r7, #22]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	607a      	str	r2, [r7, #4]
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	460b      	mov	r3, r1
 800756e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800757e:	7af9      	ldrb	r1, [r7, #11]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	f7fa fbce 	bl	8001d24 <HAL_PCD_EP_Receive>
 8007588:	4603      	mov	r3, r0
 800758a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800758c:	7dfb      	ldrb	r3, [r7, #23]
 800758e:	4618      	mov	r0, r3
 8007590:	f000 f86e 	bl	8007670 <USBD_Get_USB_Status>
 8007594:	4603      	mov	r3, r0
 8007596:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007598:	7dbb      	ldrb	r3, [r7, #22]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80075b0:	78fb      	ldrb	r3, [r7, #3]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <HAL_PCDEx_LPM_Callback+0x18>
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d01f      	beq.n	80075fa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80075ba:	e03b      	b.n	8007634 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	7adb      	ldrb	r3, [r3, #11]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d007      	beq.n	80075d4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80075c4:	f7f8 ffd4 	bl	8000570 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075c8:	4b1c      	ldr	r3, [pc, #112]	@ (800763c <HAL_PCDEx_LPM_Callback+0x98>)
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	4a1b      	ldr	r2, [pc, #108]	@ (800763c <HAL_PCDEx_LPM_Callback+0x98>)
 80075ce:	f023 0306 	bic.w	r3, r3, #6
 80075d2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	6812      	ldr	r2, [r2, #0]
 80075e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80075e6:	f023 0301 	bic.w	r3, r3, #1
 80075ea:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fe fb07 	bl	8005c06 <USBD_LL_Resume>
    break;
 80075f8:	e01c      	b.n	8007634 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6812      	ldr	r2, [r2, #0]
 8007608:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800760c:	f043 0301 	orr.w	r3, r3, #1
 8007610:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007618:	4618      	mov	r0, r3
 800761a:	f7fe fad8 	bl	8005bce <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	7adb      	ldrb	r3, [r3, #11]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007626:	4b05      	ldr	r3, [pc, #20]	@ (800763c <HAL_PCDEx_LPM_Callback+0x98>)
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	4a04      	ldr	r2, [pc, #16]	@ (800763c <HAL_PCDEx_LPM_Callback+0x98>)
 800762c:	f043 0306 	orr.w	r3, r3, #6
 8007630:	6113      	str	r3, [r2, #16]
    break;
 8007632:	bf00      	nop
}
 8007634:	bf00      	nop
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	e000ed00 	.word	0xe000ed00

08007640 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007648:	4b03      	ldr	r3, [pc, #12]	@ (8007658 <USBD_static_malloc+0x18>)
}
 800764a:	4618      	mov	r0, r3
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	20000be4 	.word	0x20000be4

0800765c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]

}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	4603      	mov	r3, r0
 8007678:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800767e:	79fb      	ldrb	r3, [r7, #7]
 8007680:	2b03      	cmp	r3, #3
 8007682:	d817      	bhi.n	80076b4 <USBD_Get_USB_Status+0x44>
 8007684:	a201      	add	r2, pc, #4	@ (adr r2, 800768c <USBD_Get_USB_Status+0x1c>)
 8007686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768a:	bf00      	nop
 800768c:	0800769d 	.word	0x0800769d
 8007690:	080076a3 	.word	0x080076a3
 8007694:	080076a9 	.word	0x080076a9
 8007698:	080076af 	.word	0x080076af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	73fb      	strb	r3, [r7, #15]
    break;
 80076a0:	e00b      	b.n	80076ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076a2:	2303      	movs	r3, #3
 80076a4:	73fb      	strb	r3, [r7, #15]
    break;
 80076a6:	e008      	b.n	80076ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076a8:	2301      	movs	r3, #1
 80076aa:	73fb      	strb	r3, [r7, #15]
    break;
 80076ac:	e005      	b.n	80076ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076ae:	2303      	movs	r3, #3
 80076b0:	73fb      	strb	r3, [r7, #15]
    break;
 80076b2:	e002      	b.n	80076ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80076b4:	2303      	movs	r3, #3
 80076b6:	73fb      	strb	r3, [r7, #15]
    break;
 80076b8:	bf00      	nop
  }
  return usb_status;
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <memset>:
 80076c8:	4402      	add	r2, r0
 80076ca:	4603      	mov	r3, r0
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d100      	bne.n	80076d2 <memset+0xa>
 80076d0:	4770      	bx	lr
 80076d2:	f803 1b01 	strb.w	r1, [r3], #1
 80076d6:	e7f9      	b.n	80076cc <memset+0x4>

080076d8 <__libc_init_array>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	4d0d      	ldr	r5, [pc, #52]	@ (8007710 <__libc_init_array+0x38>)
 80076dc:	4c0d      	ldr	r4, [pc, #52]	@ (8007714 <__libc_init_array+0x3c>)
 80076de:	1b64      	subs	r4, r4, r5
 80076e0:	10a4      	asrs	r4, r4, #2
 80076e2:	2600      	movs	r6, #0
 80076e4:	42a6      	cmp	r6, r4
 80076e6:	d109      	bne.n	80076fc <__libc_init_array+0x24>
 80076e8:	4d0b      	ldr	r5, [pc, #44]	@ (8007718 <__libc_init_array+0x40>)
 80076ea:	4c0c      	ldr	r4, [pc, #48]	@ (800771c <__libc_init_array+0x44>)
 80076ec:	f000 f826 	bl	800773c <_init>
 80076f0:	1b64      	subs	r4, r4, r5
 80076f2:	10a4      	asrs	r4, r4, #2
 80076f4:	2600      	movs	r6, #0
 80076f6:	42a6      	cmp	r6, r4
 80076f8:	d105      	bne.n	8007706 <__libc_init_array+0x2e>
 80076fa:	bd70      	pop	{r4, r5, r6, pc}
 80076fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007700:	4798      	blx	r3
 8007702:	3601      	adds	r6, #1
 8007704:	e7ee      	b.n	80076e4 <__libc_init_array+0xc>
 8007706:	f855 3b04 	ldr.w	r3, [r5], #4
 800770a:	4798      	blx	r3
 800770c:	3601      	adds	r6, #1
 800770e:	e7f2      	b.n	80076f6 <__libc_init_array+0x1e>
 8007710:	080078d0 	.word	0x080078d0
 8007714:	080078d0 	.word	0x080078d0
 8007718:	080078d0 	.word	0x080078d0
 800771c:	080078d4 	.word	0x080078d4

08007720 <memcpy>:
 8007720:	440a      	add	r2, r1
 8007722:	4291      	cmp	r1, r2
 8007724:	f100 33ff 	add.w	r3, r0, #4294967295
 8007728:	d100      	bne.n	800772c <memcpy+0xc>
 800772a:	4770      	bx	lr
 800772c:	b510      	push	{r4, lr}
 800772e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007736:	4291      	cmp	r1, r2
 8007738:	d1f9      	bne.n	800772e <memcpy+0xe>
 800773a:	bd10      	pop	{r4, pc}

0800773c <_init>:
 800773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773e:	bf00      	nop
 8007740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007742:	bc08      	pop	{r3}
 8007744:	469e      	mov	lr, r3
 8007746:	4770      	bx	lr

08007748 <_fini>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	bf00      	nop
 800774c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800774e:	bc08      	pop	{r3}
 8007750:	469e      	mov	lr, r3
 8007752:	4770      	bx	lr
